// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server.proto

#include "server.pb.h"
#include "server.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace grep11 {

static const char* Crypto_method_names[] = {
  "/grep11.Crypto/GenerateRandom",
  "/grep11.Crypto/DigestInit",
  "/grep11.Crypto/Digest",
  "/grep11.Crypto/DigestUpdate",
  "/grep11.Crypto/DigestKey",
  "/grep11.Crypto/DigestFinal",
  "/grep11.Crypto/DigestSingle",
  "/grep11.Crypto/EncryptInit",
  "/grep11.Crypto/DecryptInit",
  "/grep11.Crypto/EncryptUpdate",
  "/grep11.Crypto/DecryptUpdate",
  "/grep11.Crypto/Encrypt",
  "/grep11.Crypto/Decrypt",
  "/grep11.Crypto/EncryptFinal",
  "/grep11.Crypto/DecryptFinal",
  "/grep11.Crypto/EncryptSingle",
  "/grep11.Crypto/DecryptSingle",
  "/grep11.Crypto/SignInit",
  "/grep11.Crypto/VerifyInit",
  "/grep11.Crypto/SignUpdate",
  "/grep11.Crypto/VerifyUpdate",
  "/grep11.Crypto/SignFinal",
  "/grep11.Crypto/VerifyFinal",
  "/grep11.Crypto/Sign",
  "/grep11.Crypto/Verify",
  "/grep11.Crypto/SignSingle",
  "/grep11.Crypto/VerifySingle",
  "/grep11.Crypto/GenerateKey",
  "/grep11.Crypto/GenerateKeyPair",
  "/grep11.Crypto/WrapKey",
  "/grep11.Crypto/UnwrapKey",
  "/grep11.Crypto/DeriveKey",
  "/grep11.Crypto/GetMechanismList",
  "/grep11.Crypto/GetMechanismInfo",
  "/grep11.Crypto/GetAttributeValue",
  "/grep11.Crypto/SetAttributeValue",
};

std::unique_ptr< Crypto::Stub> Crypto::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Crypto::Stub> stub(new Crypto::Stub(channel));
  return stub;
}

Crypto::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GenerateRandom_(Crypto_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DigestInit_(Crypto_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Digest_(Crypto_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DigestUpdate_(Crypto_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DigestKey_(Crypto_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DigestFinal_(Crypto_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DigestSingle_(Crypto_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EncryptInit_(Crypto_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DecryptInit_(Crypto_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EncryptUpdate_(Crypto_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DecryptUpdate_(Crypto_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Encrypt_(Crypto_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Decrypt_(Crypto_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EncryptFinal_(Crypto_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DecryptFinal_(Crypto_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EncryptSingle_(Crypto_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DecryptSingle_(Crypto_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignInit_(Crypto_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyInit_(Crypto_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignUpdate_(Crypto_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyUpdate_(Crypto_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignFinal_(Crypto_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyFinal_(Crypto_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Sign_(Crypto_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Verify_(Crypto_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignSingle_(Crypto_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifySingle_(Crypto_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GenerateKey_(Crypto_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GenerateKeyPair_(Crypto_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WrapKey_(Crypto_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnwrapKey_(Crypto_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeriveKey_(Crypto_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMechanismList_(Crypto_method_names[32], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMechanismInfo_(Crypto_method_names[33], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAttributeValue_(Crypto_method_names[34], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAttributeValue_(Crypto_method_names[35], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Crypto::Stub::GenerateRandom(::grpc::ClientContext* context, const ::grep11::GenerateRandomRequest& request, ::grep11::GenerateRandomResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GenerateRandom_, context, request, response);
}

void Crypto::Stub::experimental_async::GenerateRandom(::grpc::ClientContext* context, const ::grep11::GenerateRandomRequest* request, ::grep11::GenerateRandomResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GenerateRandom_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::GenerateRandom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GenerateRandomResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GenerateRandom_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::GenerateRandom(::grpc::ClientContext* context, const ::grep11::GenerateRandomRequest* request, ::grep11::GenerateRandomResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GenerateRandom_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::GenerateRandom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GenerateRandomResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GenerateRandom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::GenerateRandomResponse>* Crypto::Stub::AsyncGenerateRandomRaw(::grpc::ClientContext* context, const ::grep11::GenerateRandomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::GenerateRandomResponse>::Create(channel_.get(), cq, rpcmethod_GenerateRandom_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::GenerateRandomResponse>* Crypto::Stub::PrepareAsyncGenerateRandomRaw(::grpc::ClientContext* context, const ::grep11::GenerateRandomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::GenerateRandomResponse>::Create(channel_.get(), cq, rpcmethod_GenerateRandom_, context, request, false);
}

::grpc::Status Crypto::Stub::DigestInit(::grpc::ClientContext* context, const ::grep11::DigestInitRequest& request, ::grep11::DigestInitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DigestInit_, context, request, response);
}

void Crypto::Stub::experimental_async::DigestInit(::grpc::ClientContext* context, const ::grep11::DigestInitRequest* request, ::grep11::DigestInitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DigestInit_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::DigestInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestInitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DigestInit_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::DigestInit(::grpc::ClientContext* context, const ::grep11::DigestInitRequest* request, ::grep11::DigestInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DigestInit_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::DigestInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DigestInit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::DigestInitResponse>* Crypto::Stub::AsyncDigestInitRaw(::grpc::ClientContext* context, const ::grep11::DigestInitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DigestInitResponse>::Create(channel_.get(), cq, rpcmethod_DigestInit_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::DigestInitResponse>* Crypto::Stub::PrepareAsyncDigestInitRaw(::grpc::ClientContext* context, const ::grep11::DigestInitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DigestInitResponse>::Create(channel_.get(), cq, rpcmethod_DigestInit_, context, request, false);
}

::grpc::Status Crypto::Stub::Digest(::grpc::ClientContext* context, const ::grep11::DigestRequest& request, ::grep11::DigestResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Digest_, context, request, response);
}

void Crypto::Stub::experimental_async::Digest(::grpc::ClientContext* context, const ::grep11::DigestRequest* request, ::grep11::DigestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Digest_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::Digest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Digest_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::Digest(::grpc::ClientContext* context, const ::grep11::DigestRequest* request, ::grep11::DigestResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Digest_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::Digest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Digest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::DigestResponse>* Crypto::Stub::AsyncDigestRaw(::grpc::ClientContext* context, const ::grep11::DigestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DigestResponse>::Create(channel_.get(), cq, rpcmethod_Digest_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::DigestResponse>* Crypto::Stub::PrepareAsyncDigestRaw(::grpc::ClientContext* context, const ::grep11::DigestRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DigestResponse>::Create(channel_.get(), cq, rpcmethod_Digest_, context, request, false);
}

::grpc::Status Crypto::Stub::DigestUpdate(::grpc::ClientContext* context, const ::grep11::DigestUpdateRequest& request, ::grep11::DigestUpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DigestUpdate_, context, request, response);
}

void Crypto::Stub::experimental_async::DigestUpdate(::grpc::ClientContext* context, const ::grep11::DigestUpdateRequest* request, ::grep11::DigestUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DigestUpdate_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::DigestUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DigestUpdate_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::DigestUpdate(::grpc::ClientContext* context, const ::grep11::DigestUpdateRequest* request, ::grep11::DigestUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DigestUpdate_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::DigestUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DigestUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::DigestUpdateResponse>* Crypto::Stub::AsyncDigestUpdateRaw(::grpc::ClientContext* context, const ::grep11::DigestUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DigestUpdateResponse>::Create(channel_.get(), cq, rpcmethod_DigestUpdate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::DigestUpdateResponse>* Crypto::Stub::PrepareAsyncDigestUpdateRaw(::grpc::ClientContext* context, const ::grep11::DigestUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DigestUpdateResponse>::Create(channel_.get(), cq, rpcmethod_DigestUpdate_, context, request, false);
}

::grpc::Status Crypto::Stub::DigestKey(::grpc::ClientContext* context, const ::grep11::DigestKeyRequest& request, ::grep11::DigestKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DigestKey_, context, request, response);
}

void Crypto::Stub::experimental_async::DigestKey(::grpc::ClientContext* context, const ::grep11::DigestKeyRequest* request, ::grep11::DigestKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DigestKey_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::DigestKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DigestKey_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::DigestKey(::grpc::ClientContext* context, const ::grep11::DigestKeyRequest* request, ::grep11::DigestKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DigestKey_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::DigestKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DigestKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::DigestKeyResponse>* Crypto::Stub::AsyncDigestKeyRaw(::grpc::ClientContext* context, const ::grep11::DigestKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DigestKeyResponse>::Create(channel_.get(), cq, rpcmethod_DigestKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::DigestKeyResponse>* Crypto::Stub::PrepareAsyncDigestKeyRaw(::grpc::ClientContext* context, const ::grep11::DigestKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DigestKeyResponse>::Create(channel_.get(), cq, rpcmethod_DigestKey_, context, request, false);
}

::grpc::Status Crypto::Stub::DigestFinal(::grpc::ClientContext* context, const ::grep11::DigestFinalRequest& request, ::grep11::DigestFinalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DigestFinal_, context, request, response);
}

void Crypto::Stub::experimental_async::DigestFinal(::grpc::ClientContext* context, const ::grep11::DigestFinalRequest* request, ::grep11::DigestFinalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DigestFinal_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::DigestFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestFinalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DigestFinal_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::DigestFinal(::grpc::ClientContext* context, const ::grep11::DigestFinalRequest* request, ::grep11::DigestFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DigestFinal_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::DigestFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DigestFinal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::DigestFinalResponse>* Crypto::Stub::AsyncDigestFinalRaw(::grpc::ClientContext* context, const ::grep11::DigestFinalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DigestFinalResponse>::Create(channel_.get(), cq, rpcmethod_DigestFinal_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::DigestFinalResponse>* Crypto::Stub::PrepareAsyncDigestFinalRaw(::grpc::ClientContext* context, const ::grep11::DigestFinalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DigestFinalResponse>::Create(channel_.get(), cq, rpcmethod_DigestFinal_, context, request, false);
}

::grpc::Status Crypto::Stub::DigestSingle(::grpc::ClientContext* context, const ::grep11::DigestSingleRequest& request, ::grep11::DigestSingleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DigestSingle_, context, request, response);
}

void Crypto::Stub::experimental_async::DigestSingle(::grpc::ClientContext* context, const ::grep11::DigestSingleRequest* request, ::grep11::DigestSingleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DigestSingle_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::DigestSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestSingleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DigestSingle_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::DigestSingle(::grpc::ClientContext* context, const ::grep11::DigestSingleRequest* request, ::grep11::DigestSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DigestSingle_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::DigestSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DigestSingle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::DigestSingleResponse>* Crypto::Stub::AsyncDigestSingleRaw(::grpc::ClientContext* context, const ::grep11::DigestSingleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DigestSingleResponse>::Create(channel_.get(), cq, rpcmethod_DigestSingle_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::DigestSingleResponse>* Crypto::Stub::PrepareAsyncDigestSingleRaw(::grpc::ClientContext* context, const ::grep11::DigestSingleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DigestSingleResponse>::Create(channel_.get(), cq, rpcmethod_DigestSingle_, context, request, false);
}

::grpc::Status Crypto::Stub::EncryptInit(::grpc::ClientContext* context, const ::grep11::EncryptInitRequest& request, ::grep11::EncryptInitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EncryptInit_, context, request, response);
}

void Crypto::Stub::experimental_async::EncryptInit(::grpc::ClientContext* context, const ::grep11::EncryptInitRequest* request, ::grep11::EncryptInitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EncryptInit_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::EncryptInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptInitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EncryptInit_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::EncryptInit(::grpc::ClientContext* context, const ::grep11::EncryptInitRequest* request, ::grep11::EncryptInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EncryptInit_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::EncryptInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EncryptInit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::EncryptInitResponse>* Crypto::Stub::AsyncEncryptInitRaw(::grpc::ClientContext* context, const ::grep11::EncryptInitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::EncryptInitResponse>::Create(channel_.get(), cq, rpcmethod_EncryptInit_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::EncryptInitResponse>* Crypto::Stub::PrepareAsyncEncryptInitRaw(::grpc::ClientContext* context, const ::grep11::EncryptInitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::EncryptInitResponse>::Create(channel_.get(), cq, rpcmethod_EncryptInit_, context, request, false);
}

::grpc::Status Crypto::Stub::DecryptInit(::grpc::ClientContext* context, const ::grep11::DecryptInitRequest& request, ::grep11::DecryptInitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DecryptInit_, context, request, response);
}

void Crypto::Stub::experimental_async::DecryptInit(::grpc::ClientContext* context, const ::grep11::DecryptInitRequest* request, ::grep11::DecryptInitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DecryptInit_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::DecryptInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptInitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DecryptInit_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::DecryptInit(::grpc::ClientContext* context, const ::grep11::DecryptInitRequest* request, ::grep11::DecryptInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DecryptInit_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::DecryptInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DecryptInit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::DecryptInitResponse>* Crypto::Stub::AsyncDecryptInitRaw(::grpc::ClientContext* context, const ::grep11::DecryptInitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DecryptInitResponse>::Create(channel_.get(), cq, rpcmethod_DecryptInit_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::DecryptInitResponse>* Crypto::Stub::PrepareAsyncDecryptInitRaw(::grpc::ClientContext* context, const ::grep11::DecryptInitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DecryptInitResponse>::Create(channel_.get(), cq, rpcmethod_DecryptInit_, context, request, false);
}

::grpc::Status Crypto::Stub::EncryptUpdate(::grpc::ClientContext* context, const ::grep11::EncryptUpdateRequest& request, ::grep11::EncryptUpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EncryptUpdate_, context, request, response);
}

void Crypto::Stub::experimental_async::EncryptUpdate(::grpc::ClientContext* context, const ::grep11::EncryptUpdateRequest* request, ::grep11::EncryptUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EncryptUpdate_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::EncryptUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EncryptUpdate_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::EncryptUpdate(::grpc::ClientContext* context, const ::grep11::EncryptUpdateRequest* request, ::grep11::EncryptUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EncryptUpdate_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::EncryptUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EncryptUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::EncryptUpdateResponse>* Crypto::Stub::AsyncEncryptUpdateRaw(::grpc::ClientContext* context, const ::grep11::EncryptUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::EncryptUpdateResponse>::Create(channel_.get(), cq, rpcmethod_EncryptUpdate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::EncryptUpdateResponse>* Crypto::Stub::PrepareAsyncEncryptUpdateRaw(::grpc::ClientContext* context, const ::grep11::EncryptUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::EncryptUpdateResponse>::Create(channel_.get(), cq, rpcmethod_EncryptUpdate_, context, request, false);
}

::grpc::Status Crypto::Stub::DecryptUpdate(::grpc::ClientContext* context, const ::grep11::DecryptUpdateRequest& request, ::grep11::DecryptUpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DecryptUpdate_, context, request, response);
}

void Crypto::Stub::experimental_async::DecryptUpdate(::grpc::ClientContext* context, const ::grep11::DecryptUpdateRequest* request, ::grep11::DecryptUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DecryptUpdate_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::DecryptUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DecryptUpdate_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::DecryptUpdate(::grpc::ClientContext* context, const ::grep11::DecryptUpdateRequest* request, ::grep11::DecryptUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DecryptUpdate_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::DecryptUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DecryptUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::DecryptUpdateResponse>* Crypto::Stub::AsyncDecryptUpdateRaw(::grpc::ClientContext* context, const ::grep11::DecryptUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DecryptUpdateResponse>::Create(channel_.get(), cq, rpcmethod_DecryptUpdate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::DecryptUpdateResponse>* Crypto::Stub::PrepareAsyncDecryptUpdateRaw(::grpc::ClientContext* context, const ::grep11::DecryptUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DecryptUpdateResponse>::Create(channel_.get(), cq, rpcmethod_DecryptUpdate_, context, request, false);
}

::grpc::Status Crypto::Stub::Encrypt(::grpc::ClientContext* context, const ::grep11::EncryptRequest& request, ::grep11::EncryptResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Encrypt_, context, request, response);
}

void Crypto::Stub::experimental_async::Encrypt(::grpc::ClientContext* context, const ::grep11::EncryptRequest* request, ::grep11::EncryptResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Encrypt_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::Encrypt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Encrypt_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::Encrypt(::grpc::ClientContext* context, const ::grep11::EncryptRequest* request, ::grep11::EncryptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Encrypt_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::Encrypt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Encrypt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::EncryptResponse>* Crypto::Stub::AsyncEncryptRaw(::grpc::ClientContext* context, const ::grep11::EncryptRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::EncryptResponse>::Create(channel_.get(), cq, rpcmethod_Encrypt_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::EncryptResponse>* Crypto::Stub::PrepareAsyncEncryptRaw(::grpc::ClientContext* context, const ::grep11::EncryptRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::EncryptResponse>::Create(channel_.get(), cq, rpcmethod_Encrypt_, context, request, false);
}

::grpc::Status Crypto::Stub::Decrypt(::grpc::ClientContext* context, const ::grep11::DecryptRequest& request, ::grep11::DecryptResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Decrypt_, context, request, response);
}

void Crypto::Stub::experimental_async::Decrypt(::grpc::ClientContext* context, const ::grep11::DecryptRequest* request, ::grep11::DecryptResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Decrypt_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::Decrypt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Decrypt_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::Decrypt(::grpc::ClientContext* context, const ::grep11::DecryptRequest* request, ::grep11::DecryptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Decrypt_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::Decrypt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Decrypt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::DecryptResponse>* Crypto::Stub::AsyncDecryptRaw(::grpc::ClientContext* context, const ::grep11::DecryptRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DecryptResponse>::Create(channel_.get(), cq, rpcmethod_Decrypt_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::DecryptResponse>* Crypto::Stub::PrepareAsyncDecryptRaw(::grpc::ClientContext* context, const ::grep11::DecryptRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DecryptResponse>::Create(channel_.get(), cq, rpcmethod_Decrypt_, context, request, false);
}

::grpc::Status Crypto::Stub::EncryptFinal(::grpc::ClientContext* context, const ::grep11::EncryptFinalRequest& request, ::grep11::EncryptFinalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EncryptFinal_, context, request, response);
}

void Crypto::Stub::experimental_async::EncryptFinal(::grpc::ClientContext* context, const ::grep11::EncryptFinalRequest* request, ::grep11::EncryptFinalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EncryptFinal_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::EncryptFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptFinalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EncryptFinal_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::EncryptFinal(::grpc::ClientContext* context, const ::grep11::EncryptFinalRequest* request, ::grep11::EncryptFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EncryptFinal_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::EncryptFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EncryptFinal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::EncryptFinalResponse>* Crypto::Stub::AsyncEncryptFinalRaw(::grpc::ClientContext* context, const ::grep11::EncryptFinalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::EncryptFinalResponse>::Create(channel_.get(), cq, rpcmethod_EncryptFinal_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::EncryptFinalResponse>* Crypto::Stub::PrepareAsyncEncryptFinalRaw(::grpc::ClientContext* context, const ::grep11::EncryptFinalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::EncryptFinalResponse>::Create(channel_.get(), cq, rpcmethod_EncryptFinal_, context, request, false);
}

::grpc::Status Crypto::Stub::DecryptFinal(::grpc::ClientContext* context, const ::grep11::DecryptFinalRequest& request, ::grep11::DecryptFinalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DecryptFinal_, context, request, response);
}

void Crypto::Stub::experimental_async::DecryptFinal(::grpc::ClientContext* context, const ::grep11::DecryptFinalRequest* request, ::grep11::DecryptFinalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DecryptFinal_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::DecryptFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptFinalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DecryptFinal_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::DecryptFinal(::grpc::ClientContext* context, const ::grep11::DecryptFinalRequest* request, ::grep11::DecryptFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DecryptFinal_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::DecryptFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DecryptFinal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::DecryptFinalResponse>* Crypto::Stub::AsyncDecryptFinalRaw(::grpc::ClientContext* context, const ::grep11::DecryptFinalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DecryptFinalResponse>::Create(channel_.get(), cq, rpcmethod_DecryptFinal_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::DecryptFinalResponse>* Crypto::Stub::PrepareAsyncDecryptFinalRaw(::grpc::ClientContext* context, const ::grep11::DecryptFinalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DecryptFinalResponse>::Create(channel_.get(), cq, rpcmethod_DecryptFinal_, context, request, false);
}

::grpc::Status Crypto::Stub::EncryptSingle(::grpc::ClientContext* context, const ::grep11::EncryptSingleRequest& request, ::grep11::EncryptSingleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EncryptSingle_, context, request, response);
}

void Crypto::Stub::experimental_async::EncryptSingle(::grpc::ClientContext* context, const ::grep11::EncryptSingleRequest* request, ::grep11::EncryptSingleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EncryptSingle_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::EncryptSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptSingleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EncryptSingle_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::EncryptSingle(::grpc::ClientContext* context, const ::grep11::EncryptSingleRequest* request, ::grep11::EncryptSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EncryptSingle_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::EncryptSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EncryptSingle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::EncryptSingleResponse>* Crypto::Stub::AsyncEncryptSingleRaw(::grpc::ClientContext* context, const ::grep11::EncryptSingleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::EncryptSingleResponse>::Create(channel_.get(), cq, rpcmethod_EncryptSingle_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::EncryptSingleResponse>* Crypto::Stub::PrepareAsyncEncryptSingleRaw(::grpc::ClientContext* context, const ::grep11::EncryptSingleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::EncryptSingleResponse>::Create(channel_.get(), cq, rpcmethod_EncryptSingle_, context, request, false);
}

::grpc::Status Crypto::Stub::DecryptSingle(::grpc::ClientContext* context, const ::grep11::DecryptSingleRequest& request, ::grep11::DecryptSingleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DecryptSingle_, context, request, response);
}

void Crypto::Stub::experimental_async::DecryptSingle(::grpc::ClientContext* context, const ::grep11::DecryptSingleRequest* request, ::grep11::DecryptSingleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DecryptSingle_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::DecryptSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptSingleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DecryptSingle_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::DecryptSingle(::grpc::ClientContext* context, const ::grep11::DecryptSingleRequest* request, ::grep11::DecryptSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DecryptSingle_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::DecryptSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DecryptSingle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::DecryptSingleResponse>* Crypto::Stub::AsyncDecryptSingleRaw(::grpc::ClientContext* context, const ::grep11::DecryptSingleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DecryptSingleResponse>::Create(channel_.get(), cq, rpcmethod_DecryptSingle_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::DecryptSingleResponse>* Crypto::Stub::PrepareAsyncDecryptSingleRaw(::grpc::ClientContext* context, const ::grep11::DecryptSingleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DecryptSingleResponse>::Create(channel_.get(), cq, rpcmethod_DecryptSingle_, context, request, false);
}

::grpc::Status Crypto::Stub::SignInit(::grpc::ClientContext* context, const ::grep11::SignInitRequest& request, ::grep11::SignInitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SignInit_, context, request, response);
}

void Crypto::Stub::experimental_async::SignInit(::grpc::ClientContext* context, const ::grep11::SignInitRequest* request, ::grep11::SignInitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SignInit_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::SignInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignInitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SignInit_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::SignInit(::grpc::ClientContext* context, const ::grep11::SignInitRequest* request, ::grep11::SignInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SignInit_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::SignInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SignInit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::SignInitResponse>* Crypto::Stub::AsyncSignInitRaw(::grpc::ClientContext* context, const ::grep11::SignInitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::SignInitResponse>::Create(channel_.get(), cq, rpcmethod_SignInit_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::SignInitResponse>* Crypto::Stub::PrepareAsyncSignInitRaw(::grpc::ClientContext* context, const ::grep11::SignInitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::SignInitResponse>::Create(channel_.get(), cq, rpcmethod_SignInit_, context, request, false);
}

::grpc::Status Crypto::Stub::VerifyInit(::grpc::ClientContext* context, const ::grep11::VerifyInitRequest& request, ::grep11::VerifyInitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VerifyInit_, context, request, response);
}

void Crypto::Stub::experimental_async::VerifyInit(::grpc::ClientContext* context, const ::grep11::VerifyInitRequest* request, ::grep11::VerifyInitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyInit_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::VerifyInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyInitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyInit_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::VerifyInit(::grpc::ClientContext* context, const ::grep11::VerifyInitRequest* request, ::grep11::VerifyInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyInit_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::VerifyInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyInit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::VerifyInitResponse>* Crypto::Stub::AsyncVerifyInitRaw(::grpc::ClientContext* context, const ::grep11::VerifyInitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::VerifyInitResponse>::Create(channel_.get(), cq, rpcmethod_VerifyInit_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::VerifyInitResponse>* Crypto::Stub::PrepareAsyncVerifyInitRaw(::grpc::ClientContext* context, const ::grep11::VerifyInitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::VerifyInitResponse>::Create(channel_.get(), cq, rpcmethod_VerifyInit_, context, request, false);
}

::grpc::Status Crypto::Stub::SignUpdate(::grpc::ClientContext* context, const ::grep11::SignUpdateRequest& request, ::grep11::SignUpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SignUpdate_, context, request, response);
}

void Crypto::Stub::experimental_async::SignUpdate(::grpc::ClientContext* context, const ::grep11::SignUpdateRequest* request, ::grep11::SignUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SignUpdate_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::SignUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SignUpdate_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::SignUpdate(::grpc::ClientContext* context, const ::grep11::SignUpdateRequest* request, ::grep11::SignUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SignUpdate_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::SignUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SignUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::SignUpdateResponse>* Crypto::Stub::AsyncSignUpdateRaw(::grpc::ClientContext* context, const ::grep11::SignUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::SignUpdateResponse>::Create(channel_.get(), cq, rpcmethod_SignUpdate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::SignUpdateResponse>* Crypto::Stub::PrepareAsyncSignUpdateRaw(::grpc::ClientContext* context, const ::grep11::SignUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::SignUpdateResponse>::Create(channel_.get(), cq, rpcmethod_SignUpdate_, context, request, false);
}

::grpc::Status Crypto::Stub::VerifyUpdate(::grpc::ClientContext* context, const ::grep11::VerifyUpdateRequest& request, ::grep11::VerifyUpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VerifyUpdate_, context, request, response);
}

void Crypto::Stub::experimental_async::VerifyUpdate(::grpc::ClientContext* context, const ::grep11::VerifyUpdateRequest* request, ::grep11::VerifyUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyUpdate_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::VerifyUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyUpdate_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::VerifyUpdate(::grpc::ClientContext* context, const ::grep11::VerifyUpdateRequest* request, ::grep11::VerifyUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyUpdate_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::VerifyUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::VerifyUpdateResponse>* Crypto::Stub::AsyncVerifyUpdateRaw(::grpc::ClientContext* context, const ::grep11::VerifyUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::VerifyUpdateResponse>::Create(channel_.get(), cq, rpcmethod_VerifyUpdate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::VerifyUpdateResponse>* Crypto::Stub::PrepareAsyncVerifyUpdateRaw(::grpc::ClientContext* context, const ::grep11::VerifyUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::VerifyUpdateResponse>::Create(channel_.get(), cq, rpcmethod_VerifyUpdate_, context, request, false);
}

::grpc::Status Crypto::Stub::SignFinal(::grpc::ClientContext* context, const ::grep11::SignFinalRequest& request, ::grep11::SignFinalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SignFinal_, context, request, response);
}

void Crypto::Stub::experimental_async::SignFinal(::grpc::ClientContext* context, const ::grep11::SignFinalRequest* request, ::grep11::SignFinalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SignFinal_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::SignFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignFinalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SignFinal_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::SignFinal(::grpc::ClientContext* context, const ::grep11::SignFinalRequest* request, ::grep11::SignFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SignFinal_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::SignFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SignFinal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::SignFinalResponse>* Crypto::Stub::AsyncSignFinalRaw(::grpc::ClientContext* context, const ::grep11::SignFinalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::SignFinalResponse>::Create(channel_.get(), cq, rpcmethod_SignFinal_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::SignFinalResponse>* Crypto::Stub::PrepareAsyncSignFinalRaw(::grpc::ClientContext* context, const ::grep11::SignFinalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::SignFinalResponse>::Create(channel_.get(), cq, rpcmethod_SignFinal_, context, request, false);
}

::grpc::Status Crypto::Stub::VerifyFinal(::grpc::ClientContext* context, const ::grep11::VerifyFinalRequest& request, ::grep11::VerifyFinalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VerifyFinal_, context, request, response);
}

void Crypto::Stub::experimental_async::VerifyFinal(::grpc::ClientContext* context, const ::grep11::VerifyFinalRequest* request, ::grep11::VerifyFinalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyFinal_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::VerifyFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyFinalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyFinal_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::VerifyFinal(::grpc::ClientContext* context, const ::grep11::VerifyFinalRequest* request, ::grep11::VerifyFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyFinal_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::VerifyFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyFinal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::VerifyFinalResponse>* Crypto::Stub::AsyncVerifyFinalRaw(::grpc::ClientContext* context, const ::grep11::VerifyFinalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::VerifyFinalResponse>::Create(channel_.get(), cq, rpcmethod_VerifyFinal_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::VerifyFinalResponse>* Crypto::Stub::PrepareAsyncVerifyFinalRaw(::grpc::ClientContext* context, const ::grep11::VerifyFinalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::VerifyFinalResponse>::Create(channel_.get(), cq, rpcmethod_VerifyFinal_, context, request, false);
}

::grpc::Status Crypto::Stub::Sign(::grpc::ClientContext* context, const ::grep11::SignRequest& request, ::grep11::SignResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Sign_, context, request, response);
}

void Crypto::Stub::experimental_async::Sign(::grpc::ClientContext* context, const ::grep11::SignRequest* request, ::grep11::SignResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Sign_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::Sign(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Sign_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::Sign(::grpc::ClientContext* context, const ::grep11::SignRequest* request, ::grep11::SignResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Sign_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::Sign(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Sign_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::SignResponse>* Crypto::Stub::AsyncSignRaw(::grpc::ClientContext* context, const ::grep11::SignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::SignResponse>::Create(channel_.get(), cq, rpcmethod_Sign_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::SignResponse>* Crypto::Stub::PrepareAsyncSignRaw(::grpc::ClientContext* context, const ::grep11::SignRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::SignResponse>::Create(channel_.get(), cq, rpcmethod_Sign_, context, request, false);
}

::grpc::Status Crypto::Stub::Verify(::grpc::ClientContext* context, const ::grep11::VerifyRequest& request, ::grep11::VerifyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Verify_, context, request, response);
}

void Crypto::Stub::experimental_async::Verify(::grpc::ClientContext* context, const ::grep11::VerifyRequest* request, ::grep11::VerifyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Verify_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::Verify(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Verify_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::Verify(::grpc::ClientContext* context, const ::grep11::VerifyRequest* request, ::grep11::VerifyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Verify_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::Verify(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Verify_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::VerifyResponse>* Crypto::Stub::AsyncVerifyRaw(::grpc::ClientContext* context, const ::grep11::VerifyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::VerifyResponse>::Create(channel_.get(), cq, rpcmethod_Verify_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::VerifyResponse>* Crypto::Stub::PrepareAsyncVerifyRaw(::grpc::ClientContext* context, const ::grep11::VerifyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::VerifyResponse>::Create(channel_.get(), cq, rpcmethod_Verify_, context, request, false);
}

::grpc::Status Crypto::Stub::SignSingle(::grpc::ClientContext* context, const ::grep11::SignSingleRequest& request, ::grep11::SignSingleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SignSingle_, context, request, response);
}

void Crypto::Stub::experimental_async::SignSingle(::grpc::ClientContext* context, const ::grep11::SignSingleRequest* request, ::grep11::SignSingleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SignSingle_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::SignSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignSingleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SignSingle_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::SignSingle(::grpc::ClientContext* context, const ::grep11::SignSingleRequest* request, ::grep11::SignSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SignSingle_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::SignSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SignSingle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::SignSingleResponse>* Crypto::Stub::AsyncSignSingleRaw(::grpc::ClientContext* context, const ::grep11::SignSingleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::SignSingleResponse>::Create(channel_.get(), cq, rpcmethod_SignSingle_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::SignSingleResponse>* Crypto::Stub::PrepareAsyncSignSingleRaw(::grpc::ClientContext* context, const ::grep11::SignSingleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::SignSingleResponse>::Create(channel_.get(), cq, rpcmethod_SignSingle_, context, request, false);
}

::grpc::Status Crypto::Stub::VerifySingle(::grpc::ClientContext* context, const ::grep11::VerifySingleRequest& request, ::grep11::VerifySingleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VerifySingle_, context, request, response);
}

void Crypto::Stub::experimental_async::VerifySingle(::grpc::ClientContext* context, const ::grep11::VerifySingleRequest* request, ::grep11::VerifySingleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifySingle_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::VerifySingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifySingleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifySingle_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::VerifySingle(::grpc::ClientContext* context, const ::grep11::VerifySingleRequest* request, ::grep11::VerifySingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifySingle_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::VerifySingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifySingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifySingle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::VerifySingleResponse>* Crypto::Stub::AsyncVerifySingleRaw(::grpc::ClientContext* context, const ::grep11::VerifySingleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::VerifySingleResponse>::Create(channel_.get(), cq, rpcmethod_VerifySingle_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::VerifySingleResponse>* Crypto::Stub::PrepareAsyncVerifySingleRaw(::grpc::ClientContext* context, const ::grep11::VerifySingleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::VerifySingleResponse>::Create(channel_.get(), cq, rpcmethod_VerifySingle_, context, request, false);
}

::grpc::Status Crypto::Stub::GenerateKey(::grpc::ClientContext* context, const ::grep11::GenerateKeyRequest& request, ::grep11::GenerateKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GenerateKey_, context, request, response);
}

void Crypto::Stub::experimental_async::GenerateKey(::grpc::ClientContext* context, const ::grep11::GenerateKeyRequest* request, ::grep11::GenerateKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GenerateKey_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::GenerateKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GenerateKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GenerateKey_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::GenerateKey(::grpc::ClientContext* context, const ::grep11::GenerateKeyRequest* request, ::grep11::GenerateKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GenerateKey_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::GenerateKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GenerateKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GenerateKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::GenerateKeyResponse>* Crypto::Stub::AsyncGenerateKeyRaw(::grpc::ClientContext* context, const ::grep11::GenerateKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::GenerateKeyResponse>::Create(channel_.get(), cq, rpcmethod_GenerateKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::GenerateKeyResponse>* Crypto::Stub::PrepareAsyncGenerateKeyRaw(::grpc::ClientContext* context, const ::grep11::GenerateKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::GenerateKeyResponse>::Create(channel_.get(), cq, rpcmethod_GenerateKey_, context, request, false);
}

::grpc::Status Crypto::Stub::GenerateKeyPair(::grpc::ClientContext* context, const ::grep11::GenerateKeyPairRequest& request, ::grep11::GenerateKeyPairResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GenerateKeyPair_, context, request, response);
}

void Crypto::Stub::experimental_async::GenerateKeyPair(::grpc::ClientContext* context, const ::grep11::GenerateKeyPairRequest* request, ::grep11::GenerateKeyPairResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GenerateKeyPair_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::GenerateKeyPair(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GenerateKeyPairResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GenerateKeyPair_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::GenerateKeyPair(::grpc::ClientContext* context, const ::grep11::GenerateKeyPairRequest* request, ::grep11::GenerateKeyPairResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GenerateKeyPair_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::GenerateKeyPair(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GenerateKeyPairResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GenerateKeyPair_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::GenerateKeyPairResponse>* Crypto::Stub::AsyncGenerateKeyPairRaw(::grpc::ClientContext* context, const ::grep11::GenerateKeyPairRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::GenerateKeyPairResponse>::Create(channel_.get(), cq, rpcmethod_GenerateKeyPair_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::GenerateKeyPairResponse>* Crypto::Stub::PrepareAsyncGenerateKeyPairRaw(::grpc::ClientContext* context, const ::grep11::GenerateKeyPairRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::GenerateKeyPairResponse>::Create(channel_.get(), cq, rpcmethod_GenerateKeyPair_, context, request, false);
}

::grpc::Status Crypto::Stub::WrapKey(::grpc::ClientContext* context, const ::grep11::WrapKeyRequest& request, ::grep11::WrapKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WrapKey_, context, request, response);
}

void Crypto::Stub::experimental_async::WrapKey(::grpc::ClientContext* context, const ::grep11::WrapKeyRequest* request, ::grep11::WrapKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WrapKey_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::WrapKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::WrapKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WrapKey_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::WrapKey(::grpc::ClientContext* context, const ::grep11::WrapKeyRequest* request, ::grep11::WrapKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WrapKey_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::WrapKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::WrapKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WrapKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::WrapKeyResponse>* Crypto::Stub::AsyncWrapKeyRaw(::grpc::ClientContext* context, const ::grep11::WrapKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::WrapKeyResponse>::Create(channel_.get(), cq, rpcmethod_WrapKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::WrapKeyResponse>* Crypto::Stub::PrepareAsyncWrapKeyRaw(::grpc::ClientContext* context, const ::grep11::WrapKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::WrapKeyResponse>::Create(channel_.get(), cq, rpcmethod_WrapKey_, context, request, false);
}

::grpc::Status Crypto::Stub::UnwrapKey(::grpc::ClientContext* context, const ::grep11::UnwrapKeyRequest& request, ::grep11::UnwrapKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnwrapKey_, context, request, response);
}

void Crypto::Stub::experimental_async::UnwrapKey(::grpc::ClientContext* context, const ::grep11::UnwrapKeyRequest* request, ::grep11::UnwrapKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnwrapKey_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::UnwrapKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::UnwrapKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnwrapKey_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::UnwrapKey(::grpc::ClientContext* context, const ::grep11::UnwrapKeyRequest* request, ::grep11::UnwrapKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnwrapKey_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::UnwrapKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::UnwrapKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnwrapKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::UnwrapKeyResponse>* Crypto::Stub::AsyncUnwrapKeyRaw(::grpc::ClientContext* context, const ::grep11::UnwrapKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::UnwrapKeyResponse>::Create(channel_.get(), cq, rpcmethod_UnwrapKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::UnwrapKeyResponse>* Crypto::Stub::PrepareAsyncUnwrapKeyRaw(::grpc::ClientContext* context, const ::grep11::UnwrapKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::UnwrapKeyResponse>::Create(channel_.get(), cq, rpcmethod_UnwrapKey_, context, request, false);
}

::grpc::Status Crypto::Stub::DeriveKey(::grpc::ClientContext* context, const ::grep11::DeriveKeyRequest& request, ::grep11::DeriveKeyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeriveKey_, context, request, response);
}

void Crypto::Stub::experimental_async::DeriveKey(::grpc::ClientContext* context, const ::grep11::DeriveKeyRequest* request, ::grep11::DeriveKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeriveKey_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::DeriveKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DeriveKeyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeriveKey_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::DeriveKey(::grpc::ClientContext* context, const ::grep11::DeriveKeyRequest* request, ::grep11::DeriveKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeriveKey_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::DeriveKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DeriveKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeriveKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::DeriveKeyResponse>* Crypto::Stub::AsyncDeriveKeyRaw(::grpc::ClientContext* context, const ::grep11::DeriveKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DeriveKeyResponse>::Create(channel_.get(), cq, rpcmethod_DeriveKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::DeriveKeyResponse>* Crypto::Stub::PrepareAsyncDeriveKeyRaw(::grpc::ClientContext* context, const ::grep11::DeriveKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::DeriveKeyResponse>::Create(channel_.get(), cq, rpcmethod_DeriveKey_, context, request, false);
}

::grpc::Status Crypto::Stub::GetMechanismList(::grpc::ClientContext* context, const ::grep11::GetMechanismListRequest& request, ::grep11::GetMechanismListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMechanismList_, context, request, response);
}

void Crypto::Stub::experimental_async::GetMechanismList(::grpc::ClientContext* context, const ::grep11::GetMechanismListRequest* request, ::grep11::GetMechanismListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMechanismList_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::GetMechanismList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GetMechanismListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMechanismList_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::GetMechanismList(::grpc::ClientContext* context, const ::grep11::GetMechanismListRequest* request, ::grep11::GetMechanismListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMechanismList_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::GetMechanismList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GetMechanismListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMechanismList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::GetMechanismListResponse>* Crypto::Stub::AsyncGetMechanismListRaw(::grpc::ClientContext* context, const ::grep11::GetMechanismListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::GetMechanismListResponse>::Create(channel_.get(), cq, rpcmethod_GetMechanismList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::GetMechanismListResponse>* Crypto::Stub::PrepareAsyncGetMechanismListRaw(::grpc::ClientContext* context, const ::grep11::GetMechanismListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::GetMechanismListResponse>::Create(channel_.get(), cq, rpcmethod_GetMechanismList_, context, request, false);
}

::grpc::Status Crypto::Stub::GetMechanismInfo(::grpc::ClientContext* context, const ::grep11::GetMechanismInfoRequest& request, ::grep11::GetMechanismInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMechanismInfo_, context, request, response);
}

void Crypto::Stub::experimental_async::GetMechanismInfo(::grpc::ClientContext* context, const ::grep11::GetMechanismInfoRequest* request, ::grep11::GetMechanismInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMechanismInfo_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::GetMechanismInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GetMechanismInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMechanismInfo_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::GetMechanismInfo(::grpc::ClientContext* context, const ::grep11::GetMechanismInfoRequest* request, ::grep11::GetMechanismInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMechanismInfo_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::GetMechanismInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GetMechanismInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMechanismInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::GetMechanismInfoResponse>* Crypto::Stub::AsyncGetMechanismInfoRaw(::grpc::ClientContext* context, const ::grep11::GetMechanismInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::GetMechanismInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetMechanismInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::GetMechanismInfoResponse>* Crypto::Stub::PrepareAsyncGetMechanismInfoRaw(::grpc::ClientContext* context, const ::grep11::GetMechanismInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::GetMechanismInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetMechanismInfo_, context, request, false);
}

::grpc::Status Crypto::Stub::GetAttributeValue(::grpc::ClientContext* context, const ::grep11::GetAttributeValueRequest& request, ::grep11::GetAttributeValueResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAttributeValue_, context, request, response);
}

void Crypto::Stub::experimental_async::GetAttributeValue(::grpc::ClientContext* context, const ::grep11::GetAttributeValueRequest* request, ::grep11::GetAttributeValueResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAttributeValue_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::GetAttributeValue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GetAttributeValueResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAttributeValue_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::GetAttributeValue(::grpc::ClientContext* context, const ::grep11::GetAttributeValueRequest* request, ::grep11::GetAttributeValueResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAttributeValue_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::GetAttributeValue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GetAttributeValueResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAttributeValue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::GetAttributeValueResponse>* Crypto::Stub::AsyncGetAttributeValueRaw(::grpc::ClientContext* context, const ::grep11::GetAttributeValueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::GetAttributeValueResponse>::Create(channel_.get(), cq, rpcmethod_GetAttributeValue_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::GetAttributeValueResponse>* Crypto::Stub::PrepareAsyncGetAttributeValueRaw(::grpc::ClientContext* context, const ::grep11::GetAttributeValueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::GetAttributeValueResponse>::Create(channel_.get(), cq, rpcmethod_GetAttributeValue_, context, request, false);
}

::grpc::Status Crypto::Stub::SetAttributeValue(::grpc::ClientContext* context, const ::grep11::SetAttributeValueRequest& request, ::grep11::SetAttributeValueResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetAttributeValue_, context, request, response);
}

void Crypto::Stub::experimental_async::SetAttributeValue(::grpc::ClientContext* context, const ::grep11::SetAttributeValueRequest* request, ::grep11::SetAttributeValueResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetAttributeValue_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::SetAttributeValue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SetAttributeValueResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetAttributeValue_, context, request, response, std::move(f));
}

void Crypto::Stub::experimental_async::SetAttributeValue(::grpc::ClientContext* context, const ::grep11::SetAttributeValueRequest* request, ::grep11::SetAttributeValueResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetAttributeValue_, context, request, response, reactor);
}

void Crypto::Stub::experimental_async::SetAttributeValue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SetAttributeValueResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetAttributeValue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::grep11::SetAttributeValueResponse>* Crypto::Stub::AsyncSetAttributeValueRaw(::grpc::ClientContext* context, const ::grep11::SetAttributeValueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::SetAttributeValueResponse>::Create(channel_.get(), cq, rpcmethod_SetAttributeValue_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::grep11::SetAttributeValueResponse>* Crypto::Stub::PrepareAsyncSetAttributeValueRaw(::grpc::ClientContext* context, const ::grep11::SetAttributeValueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::grep11::SetAttributeValueResponse>::Create(channel_.get(), cq, rpcmethod_SetAttributeValue_, context, request, false);
}

Crypto::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::GenerateRandomRequest, ::grep11::GenerateRandomResponse>(
          std::mem_fn(&Crypto::Service::GenerateRandom), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::DigestInitRequest, ::grep11::DigestInitResponse>(
          std::mem_fn(&Crypto::Service::DigestInit), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::DigestRequest, ::grep11::DigestResponse>(
          std::mem_fn(&Crypto::Service::Digest), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::DigestUpdateRequest, ::grep11::DigestUpdateResponse>(
          std::mem_fn(&Crypto::Service::DigestUpdate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::DigestKeyRequest, ::grep11::DigestKeyResponse>(
          std::mem_fn(&Crypto::Service::DigestKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::DigestFinalRequest, ::grep11::DigestFinalResponse>(
          std::mem_fn(&Crypto::Service::DigestFinal), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::DigestSingleRequest, ::grep11::DigestSingleResponse>(
          std::mem_fn(&Crypto::Service::DigestSingle), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::EncryptInitRequest, ::grep11::EncryptInitResponse>(
          std::mem_fn(&Crypto::Service::EncryptInit), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::DecryptInitRequest, ::grep11::DecryptInitResponse>(
          std::mem_fn(&Crypto::Service::DecryptInit), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::EncryptUpdateRequest, ::grep11::EncryptUpdateResponse>(
          std::mem_fn(&Crypto::Service::EncryptUpdate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::DecryptUpdateRequest, ::grep11::DecryptUpdateResponse>(
          std::mem_fn(&Crypto::Service::DecryptUpdate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::EncryptRequest, ::grep11::EncryptResponse>(
          std::mem_fn(&Crypto::Service::Encrypt), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::DecryptRequest, ::grep11::DecryptResponse>(
          std::mem_fn(&Crypto::Service::Decrypt), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::EncryptFinalRequest, ::grep11::EncryptFinalResponse>(
          std::mem_fn(&Crypto::Service::EncryptFinal), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::DecryptFinalRequest, ::grep11::DecryptFinalResponse>(
          std::mem_fn(&Crypto::Service::DecryptFinal), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::EncryptSingleRequest, ::grep11::EncryptSingleResponse>(
          std::mem_fn(&Crypto::Service::EncryptSingle), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::DecryptSingleRequest, ::grep11::DecryptSingleResponse>(
          std::mem_fn(&Crypto::Service::DecryptSingle), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::SignInitRequest, ::grep11::SignInitResponse>(
          std::mem_fn(&Crypto::Service::SignInit), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::VerifyInitRequest, ::grep11::VerifyInitResponse>(
          std::mem_fn(&Crypto::Service::VerifyInit), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::SignUpdateRequest, ::grep11::SignUpdateResponse>(
          std::mem_fn(&Crypto::Service::SignUpdate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::VerifyUpdateRequest, ::grep11::VerifyUpdateResponse>(
          std::mem_fn(&Crypto::Service::VerifyUpdate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::SignFinalRequest, ::grep11::SignFinalResponse>(
          std::mem_fn(&Crypto::Service::SignFinal), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::VerifyFinalRequest, ::grep11::VerifyFinalResponse>(
          std::mem_fn(&Crypto::Service::VerifyFinal), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::SignRequest, ::grep11::SignResponse>(
          std::mem_fn(&Crypto::Service::Sign), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::VerifyRequest, ::grep11::VerifyResponse>(
          std::mem_fn(&Crypto::Service::Verify), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::SignSingleRequest, ::grep11::SignSingleResponse>(
          std::mem_fn(&Crypto::Service::SignSingle), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::VerifySingleRequest, ::grep11::VerifySingleResponse>(
          std::mem_fn(&Crypto::Service::VerifySingle), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::GenerateKeyRequest, ::grep11::GenerateKeyResponse>(
          std::mem_fn(&Crypto::Service::GenerateKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::GenerateKeyPairRequest, ::grep11::GenerateKeyPairResponse>(
          std::mem_fn(&Crypto::Service::GenerateKeyPair), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::WrapKeyRequest, ::grep11::WrapKeyResponse>(
          std::mem_fn(&Crypto::Service::WrapKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::UnwrapKeyRequest, ::grep11::UnwrapKeyResponse>(
          std::mem_fn(&Crypto::Service::UnwrapKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::DeriveKeyRequest, ::grep11::DeriveKeyResponse>(
          std::mem_fn(&Crypto::Service::DeriveKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::GetMechanismListRequest, ::grep11::GetMechanismListResponse>(
          std::mem_fn(&Crypto::Service::GetMechanismList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::GetMechanismInfoRequest, ::grep11::GetMechanismInfoResponse>(
          std::mem_fn(&Crypto::Service::GetMechanismInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::GetAttributeValueRequest, ::grep11::GetAttributeValueResponse>(
          std::mem_fn(&Crypto::Service::GetAttributeValue), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Crypto_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Crypto::Service, ::grep11::SetAttributeValueRequest, ::grep11::SetAttributeValueResponse>(
          std::mem_fn(&Crypto::Service::SetAttributeValue), this)));
}

Crypto::Service::~Service() {
}

::grpc::Status Crypto::Service::GenerateRandom(::grpc::ServerContext* context, const ::grep11::GenerateRandomRequest* request, ::grep11::GenerateRandomResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::DigestInit(::grpc::ServerContext* context, const ::grep11::DigestInitRequest* request, ::grep11::DigestInitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::Digest(::grpc::ServerContext* context, const ::grep11::DigestRequest* request, ::grep11::DigestResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::DigestUpdate(::grpc::ServerContext* context, const ::grep11::DigestUpdateRequest* request, ::grep11::DigestUpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::DigestKey(::grpc::ServerContext* context, const ::grep11::DigestKeyRequest* request, ::grep11::DigestKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::DigestFinal(::grpc::ServerContext* context, const ::grep11::DigestFinalRequest* request, ::grep11::DigestFinalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::DigestSingle(::grpc::ServerContext* context, const ::grep11::DigestSingleRequest* request, ::grep11::DigestSingleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::EncryptInit(::grpc::ServerContext* context, const ::grep11::EncryptInitRequest* request, ::grep11::EncryptInitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::DecryptInit(::grpc::ServerContext* context, const ::grep11::DecryptInitRequest* request, ::grep11::DecryptInitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::EncryptUpdate(::grpc::ServerContext* context, const ::grep11::EncryptUpdateRequest* request, ::grep11::EncryptUpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::DecryptUpdate(::grpc::ServerContext* context, const ::grep11::DecryptUpdateRequest* request, ::grep11::DecryptUpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::Encrypt(::grpc::ServerContext* context, const ::grep11::EncryptRequest* request, ::grep11::EncryptResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::Decrypt(::grpc::ServerContext* context, const ::grep11::DecryptRequest* request, ::grep11::DecryptResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::EncryptFinal(::grpc::ServerContext* context, const ::grep11::EncryptFinalRequest* request, ::grep11::EncryptFinalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::DecryptFinal(::grpc::ServerContext* context, const ::grep11::DecryptFinalRequest* request, ::grep11::DecryptFinalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::EncryptSingle(::grpc::ServerContext* context, const ::grep11::EncryptSingleRequest* request, ::grep11::EncryptSingleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::DecryptSingle(::grpc::ServerContext* context, const ::grep11::DecryptSingleRequest* request, ::grep11::DecryptSingleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::SignInit(::grpc::ServerContext* context, const ::grep11::SignInitRequest* request, ::grep11::SignInitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::VerifyInit(::grpc::ServerContext* context, const ::grep11::VerifyInitRequest* request, ::grep11::VerifyInitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::SignUpdate(::grpc::ServerContext* context, const ::grep11::SignUpdateRequest* request, ::grep11::SignUpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::VerifyUpdate(::grpc::ServerContext* context, const ::grep11::VerifyUpdateRequest* request, ::grep11::VerifyUpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::SignFinal(::grpc::ServerContext* context, const ::grep11::SignFinalRequest* request, ::grep11::SignFinalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::VerifyFinal(::grpc::ServerContext* context, const ::grep11::VerifyFinalRequest* request, ::grep11::VerifyFinalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::Sign(::grpc::ServerContext* context, const ::grep11::SignRequest* request, ::grep11::SignResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::Verify(::grpc::ServerContext* context, const ::grep11::VerifyRequest* request, ::grep11::VerifyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::SignSingle(::grpc::ServerContext* context, const ::grep11::SignSingleRequest* request, ::grep11::SignSingleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::VerifySingle(::grpc::ServerContext* context, const ::grep11::VerifySingleRequest* request, ::grep11::VerifySingleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::GenerateKey(::grpc::ServerContext* context, const ::grep11::GenerateKeyRequest* request, ::grep11::GenerateKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::GenerateKeyPair(::grpc::ServerContext* context, const ::grep11::GenerateKeyPairRequest* request, ::grep11::GenerateKeyPairResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::WrapKey(::grpc::ServerContext* context, const ::grep11::WrapKeyRequest* request, ::grep11::WrapKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::UnwrapKey(::grpc::ServerContext* context, const ::grep11::UnwrapKeyRequest* request, ::grep11::UnwrapKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::DeriveKey(::grpc::ServerContext* context, const ::grep11::DeriveKeyRequest* request, ::grep11::DeriveKeyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::GetMechanismList(::grpc::ServerContext* context, const ::grep11::GetMechanismListRequest* request, ::grep11::GetMechanismListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::GetMechanismInfo(::grpc::ServerContext* context, const ::grep11::GetMechanismInfoRequest* request, ::grep11::GetMechanismInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::GetAttributeValue(::grpc::ServerContext* context, const ::grep11::GetAttributeValueRequest* request, ::grep11::GetAttributeValueResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Crypto::Service::SetAttributeValue(::grpc::ServerContext* context, const ::grep11::SetAttributeValueRequest* request, ::grep11::SetAttributeValueResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace grep11

