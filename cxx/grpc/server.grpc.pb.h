// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server.proto
// Original file comments:
// Code generated by protogen. DO NOT EDIT.
//
//
// Copyright IBM Corp. All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#ifndef GRPC_server_2eproto__INCLUDED
#define GRPC_server_2eproto__INCLUDED

#include "server.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace grep11 {

class Crypto final {
 public:
  static constexpr char const* service_full_name() {
    return "grep11.Crypto";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // CK_RV m_GenerateRandom (
    //     CK_BYTE_PTR rnd, CK_ULONG rndlen,
    //     target_t target) ;
    virtual ::grpc::Status GenerateRandom(::grpc::ClientContext* context, const ::grep11::GenerateRandomRequest& request, ::grep11::GenerateRandomResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GenerateRandomResponse>> AsyncGenerateRandom(::grpc::ClientContext* context, const ::grep11::GenerateRandomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GenerateRandomResponse>>(AsyncGenerateRandomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GenerateRandomResponse>> PrepareAsyncGenerateRandom(::grpc::ClientContext* context, const ::grep11::GenerateRandomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GenerateRandomResponse>>(PrepareAsyncGenerateRandomRaw(context, request, cq));
    }
    // CK_RV m_DigestInit (
    //     unsigned char *state, size_t *statelen,
    //     const CK_MECHANISM_PTR mech,
    //     target_t target) ;
    virtual ::grpc::Status DigestInit(::grpc::ClientContext* context, const ::grep11::DigestInitRequest& request, ::grep11::DigestInitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestInitResponse>> AsyncDigestInit(::grpc::ClientContext* context, const ::grep11::DigestInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestInitResponse>>(AsyncDigestInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestInitResponse>> PrepareAsyncDigestInit(::grpc::ClientContext* context, const ::grep11::DigestInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestInitResponse>>(PrepareAsyncDigestInitRaw(context, request, cq));
    }
    // CK_RV m_Digest (
    //     const unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR data, CK_ULONG datalen,
    //     CK_BYTE_PTR digest, CK_ULONG_PTR digestlen,
    //     target_t target) ;
    virtual ::grpc::Status Digest(::grpc::ClientContext* context, const ::grep11::DigestRequest& request, ::grep11::DigestResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestResponse>> AsyncDigest(::grpc::ClientContext* context, const ::grep11::DigestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestResponse>>(AsyncDigestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestResponse>> PrepareAsyncDigest(::grpc::ClientContext* context, const ::grep11::DigestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestResponse>>(PrepareAsyncDigestRaw(context, request, cq));
    }
    // CK_RV m_DigestUpdate (
    //     unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR data, CK_ULONG datalen,
    //     target_t target) ;
    virtual ::grpc::Status DigestUpdate(::grpc::ClientContext* context, const ::grep11::DigestUpdateRequest& request, ::grep11::DigestUpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestUpdateResponse>> AsyncDigestUpdate(::grpc::ClientContext* context, const ::grep11::DigestUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestUpdateResponse>>(AsyncDigestUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestUpdateResponse>> PrepareAsyncDigestUpdate(::grpc::ClientContext* context, const ::grep11::DigestUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestUpdateResponse>>(PrepareAsyncDigestUpdateRaw(context, request, cq));
    }
    // CK_RV m_DigestKey (
    //     unsigned char *state, size_t statelen,
    //     const unsigned char *key, size_t keylen,
    //     target_t target) ;
    virtual ::grpc::Status DigestKey(::grpc::ClientContext* context, const ::grep11::DigestKeyRequest& request, ::grep11::DigestKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestKeyResponse>> AsyncDigestKey(::grpc::ClientContext* context, const ::grep11::DigestKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestKeyResponse>>(AsyncDigestKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestKeyResponse>> PrepareAsyncDigestKey(::grpc::ClientContext* context, const ::grep11::DigestKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestKeyResponse>>(PrepareAsyncDigestKeyRaw(context, request, cq));
    }
    // CK_RV m_DigestFinal (
    //     const unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR digest, CK_ULONG_PTR digestlen,
    //     target_t target) ;
    virtual ::grpc::Status DigestFinal(::grpc::ClientContext* context, const ::grep11::DigestFinalRequest& request, ::grep11::DigestFinalResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestFinalResponse>> AsyncDigestFinal(::grpc::ClientContext* context, const ::grep11::DigestFinalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestFinalResponse>>(AsyncDigestFinalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestFinalResponse>> PrepareAsyncDigestFinal(::grpc::ClientContext* context, const ::grep11::DigestFinalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestFinalResponse>>(PrepareAsyncDigestFinalRaw(context, request, cq));
    }
    // CK_RV m_DigestSingle (
    //     CK_MECHANISM_PTR mech,
    //     CK_BYTE_PTR data, CK_ULONG datalen,
    //     CK_BYTE_PTR digest, CK_ULONG_PTR digestlen,
    //     target_t target) ;
    virtual ::grpc::Status DigestSingle(::grpc::ClientContext* context, const ::grep11::DigestSingleRequest& request, ::grep11::DigestSingleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestSingleResponse>> AsyncDigestSingle(::grpc::ClientContext* context, const ::grep11::DigestSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestSingleResponse>>(AsyncDigestSingleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestSingleResponse>> PrepareAsyncDigestSingle(::grpc::ClientContext* context, const ::grep11::DigestSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestSingleResponse>>(PrepareAsyncDigestSingleRaw(context, request, cq));
    }
    // CK_RV m_EncryptInit (
    //     unsigned char *state, size_t *statelen,
    //     CK_MECHANISM_PTR mech,
    //     const unsigned char *key, size_t keylen,
    //     target_t target) ;
    virtual ::grpc::Status EncryptInit(::grpc::ClientContext* context, const ::grep11::EncryptInitRequest& request, ::grep11::EncryptInitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptInitResponse>> AsyncEncryptInit(::grpc::ClientContext* context, const ::grep11::EncryptInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptInitResponse>>(AsyncEncryptInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptInitResponse>> PrepareAsyncEncryptInit(::grpc::ClientContext* context, const ::grep11::EncryptInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptInitResponse>>(PrepareAsyncEncryptInitRaw(context, request, cq));
    }
    // CK_RV m_DecryptInit (
    //     unsigned char *state, size_t *statelen,
    //     CK_MECHANISM_PTR mech,
    //     const unsigned char *key, size_t keylen,
    //     target_t target) ;
    virtual ::grpc::Status DecryptInit(::grpc::ClientContext* context, const ::grep11::DecryptInitRequest& request, ::grep11::DecryptInitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptInitResponse>> AsyncDecryptInit(::grpc::ClientContext* context, const ::grep11::DecryptInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptInitResponse>>(AsyncDecryptInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptInitResponse>> PrepareAsyncDecryptInit(::grpc::ClientContext* context, const ::grep11::DecryptInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptInitResponse>>(PrepareAsyncDecryptInitRaw(context, request, cq));
    }
    // CK_RV m_EncryptUpdate (
    //     unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR plain, CK_ULONG plainlen,
    //     CK_BYTE_PTR ciphered, CK_ULONG_PTR cipheredlen,
    //     target_t target) ;
    virtual ::grpc::Status EncryptUpdate(::grpc::ClientContext* context, const ::grep11::EncryptUpdateRequest& request, ::grep11::EncryptUpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptUpdateResponse>> AsyncEncryptUpdate(::grpc::ClientContext* context, const ::grep11::EncryptUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptUpdateResponse>>(AsyncEncryptUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptUpdateResponse>> PrepareAsyncEncryptUpdate(::grpc::ClientContext* context, const ::grep11::EncryptUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptUpdateResponse>>(PrepareAsyncEncryptUpdateRaw(context, request, cq));
    }
    // CK_RV m_DecryptUpdate (
    //     unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR ciphered, CK_ULONG cipheredlen,
    //     CK_BYTE_PTR plain, CK_ULONG_PTR plainlen,
    //     target_t target) ;
    virtual ::grpc::Status DecryptUpdate(::grpc::ClientContext* context, const ::grep11::DecryptUpdateRequest& request, ::grep11::DecryptUpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptUpdateResponse>> AsyncDecryptUpdate(::grpc::ClientContext* context, const ::grep11::DecryptUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptUpdateResponse>>(AsyncDecryptUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptUpdateResponse>> PrepareAsyncDecryptUpdate(::grpc::ClientContext* context, const ::grep11::DecryptUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptUpdateResponse>>(PrepareAsyncDecryptUpdateRaw(context, request, cq));
    }
    // CK_RV m_Encrypt (
    //     const unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR plain, CK_ULONG plainlen,
    //     CK_BYTE_PTR ciphered, CK_ULONG_PTR cipheredlen,
    //     target_t target) ;
    virtual ::grpc::Status Encrypt(::grpc::ClientContext* context, const ::grep11::EncryptRequest& request, ::grep11::EncryptResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptResponse>> AsyncEncrypt(::grpc::ClientContext* context, const ::grep11::EncryptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptResponse>>(AsyncEncryptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptResponse>> PrepareAsyncEncrypt(::grpc::ClientContext* context, const ::grep11::EncryptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptResponse>>(PrepareAsyncEncryptRaw(context, request, cq));
    }
    // CK_RV m_Decrypt (
    //     const unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR ciphered, CK_ULONG cipheredlen,
    //     CK_BYTE_PTR plain, CK_ULONG_PTR plainlen,
    //     target_t target) ;
    virtual ::grpc::Status Decrypt(::grpc::ClientContext* context, const ::grep11::DecryptRequest& request, ::grep11::DecryptResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptResponse>> AsyncDecrypt(::grpc::ClientContext* context, const ::grep11::DecryptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptResponse>>(AsyncDecryptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptResponse>> PrepareAsyncDecrypt(::grpc::ClientContext* context, const ::grep11::DecryptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptResponse>>(PrepareAsyncDecryptRaw(context, request, cq));
    }
    // CK_RV m_EncryptFinal (
    //     const unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR ciphered, CK_ULONG_PTR cipheredlen,
    //     target_t target) ;
    virtual ::grpc::Status EncryptFinal(::grpc::ClientContext* context, const ::grep11::EncryptFinalRequest& request, ::grep11::EncryptFinalResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptFinalResponse>> AsyncEncryptFinal(::grpc::ClientContext* context, const ::grep11::EncryptFinalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptFinalResponse>>(AsyncEncryptFinalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptFinalResponse>> PrepareAsyncEncryptFinal(::grpc::ClientContext* context, const ::grep11::EncryptFinalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptFinalResponse>>(PrepareAsyncEncryptFinalRaw(context, request, cq));
    }
    // CK_RV m_DecryptFinal (
    //     const unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR plain, CK_ULONG_PTR plainlen,
    //     target_t target) ;
    virtual ::grpc::Status DecryptFinal(::grpc::ClientContext* context, const ::grep11::DecryptFinalRequest& request, ::grep11::DecryptFinalResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptFinalResponse>> AsyncDecryptFinal(::grpc::ClientContext* context, const ::grep11::DecryptFinalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptFinalResponse>>(AsyncDecryptFinalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptFinalResponse>> PrepareAsyncDecryptFinal(::grpc::ClientContext* context, const ::grep11::DecryptFinalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptFinalResponse>>(PrepareAsyncDecryptFinalRaw(context, request, cq));
    }
    // CK_RV m_EncryptSingle (
    //     const unsigned char *key, size_t keylen,
    //     CK_MECHANISM_PTR mech,
    //     CK_BYTE_PTR plain, CK_ULONG plainlen,
    //     CK_BYTE_PTR ciphered, CK_ULONG_PTR cipheredlen,
    //     target_t target) ;
    virtual ::grpc::Status EncryptSingle(::grpc::ClientContext* context, const ::grep11::EncryptSingleRequest& request, ::grep11::EncryptSingleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptSingleResponse>> AsyncEncryptSingle(::grpc::ClientContext* context, const ::grep11::EncryptSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptSingleResponse>>(AsyncEncryptSingleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptSingleResponse>> PrepareAsyncEncryptSingle(::grpc::ClientContext* context, const ::grep11::EncryptSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptSingleResponse>>(PrepareAsyncEncryptSingleRaw(context, request, cq));
    }
    // CK_RV m_DecryptSingle (
    //     const unsigned char *key, size_t keylen,
    //     CK_MECHANISM_PTR mech,
    //     CK_BYTE_PTR ciphered, CK_ULONG cipheredlen,
    //     CK_BYTE_PTR plain, CK_ULONG_PTR plainlen,
    //     target_t target) ;
    virtual ::grpc::Status DecryptSingle(::grpc::ClientContext* context, const ::grep11::DecryptSingleRequest& request, ::grep11::DecryptSingleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptSingleResponse>> AsyncDecryptSingle(::grpc::ClientContext* context, const ::grep11::DecryptSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptSingleResponse>>(AsyncDecryptSingleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptSingleResponse>> PrepareAsyncDecryptSingle(::grpc::ClientContext* context, const ::grep11::DecryptSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptSingleResponse>>(PrepareAsyncDecryptSingleRaw(context, request, cq));
    }
    // CK_RV m_SignInit (
    //     unsigned char *state, size_t *statelen,
    //     CK_MECHANISM_PTR mech,
    //     const unsigned char *privKey, size_t privKeylen,
    //     target_t target) ;
    virtual ::grpc::Status SignInit(::grpc::ClientContext* context, const ::grep11::SignInitRequest& request, ::grep11::SignInitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignInitResponse>> AsyncSignInit(::grpc::ClientContext* context, const ::grep11::SignInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignInitResponse>>(AsyncSignInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignInitResponse>> PrepareAsyncSignInit(::grpc::ClientContext* context, const ::grep11::SignInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignInitResponse>>(PrepareAsyncSignInitRaw(context, request, cq));
    }
    // CK_RV m_VerifyInit (
    //     unsigned char *state, size_t *statelen,
    //     CK_MECHANISM_PTR mech,
    //     const unsigned char *pubKey, size_t pubKeylen,
    //     target_t target) ;
    virtual ::grpc::Status VerifyInit(::grpc::ClientContext* context, const ::grep11::VerifyInitRequest& request, ::grep11::VerifyInitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyInitResponse>> AsyncVerifyInit(::grpc::ClientContext* context, const ::grep11::VerifyInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyInitResponse>>(AsyncVerifyInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyInitResponse>> PrepareAsyncVerifyInit(::grpc::ClientContext* context, const ::grep11::VerifyInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyInitResponse>>(PrepareAsyncVerifyInitRaw(context, request, cq));
    }
    // CK_RV m_SignUpdate (
    //     unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR data, CK_ULONG datalen,
    //     target_t target) ;
    virtual ::grpc::Status SignUpdate(::grpc::ClientContext* context, const ::grep11::SignUpdateRequest& request, ::grep11::SignUpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignUpdateResponse>> AsyncSignUpdate(::grpc::ClientContext* context, const ::grep11::SignUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignUpdateResponse>>(AsyncSignUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignUpdateResponse>> PrepareAsyncSignUpdate(::grpc::ClientContext* context, const ::grep11::SignUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignUpdateResponse>>(PrepareAsyncSignUpdateRaw(context, request, cq));
    }
    // CK_RV m_VerifyUpdate (
    //     unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR data, CK_ULONG datalen,
    //     target_t target) ;
    virtual ::grpc::Status VerifyUpdate(::grpc::ClientContext* context, const ::grep11::VerifyUpdateRequest& request, ::grep11::VerifyUpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyUpdateResponse>> AsyncVerifyUpdate(::grpc::ClientContext* context, const ::grep11::VerifyUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyUpdateResponse>>(AsyncVerifyUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyUpdateResponse>> PrepareAsyncVerifyUpdate(::grpc::ClientContext* context, const ::grep11::VerifyUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyUpdateResponse>>(PrepareAsyncVerifyUpdateRaw(context, request, cq));
    }
    // CK_RV m_SignFinal (
    //     const unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR signature, CK_ULONG_PTR signaturelen,
    //     target_t target) ;
    virtual ::grpc::Status SignFinal(::grpc::ClientContext* context, const ::grep11::SignFinalRequest& request, ::grep11::SignFinalResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignFinalResponse>> AsyncSignFinal(::grpc::ClientContext* context, const ::grep11::SignFinalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignFinalResponse>>(AsyncSignFinalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignFinalResponse>> PrepareAsyncSignFinal(::grpc::ClientContext* context, const ::grep11::SignFinalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignFinalResponse>>(PrepareAsyncSignFinalRaw(context, request, cq));
    }
    // CK_RV m_VerifyFinal (
    //     const unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR signature, CK_ULONG signaturelen,
    //     target_t target) ;
    virtual ::grpc::Status VerifyFinal(::grpc::ClientContext* context, const ::grep11::VerifyFinalRequest& request, ::grep11::VerifyFinalResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyFinalResponse>> AsyncVerifyFinal(::grpc::ClientContext* context, const ::grep11::VerifyFinalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyFinalResponse>>(AsyncVerifyFinalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyFinalResponse>> PrepareAsyncVerifyFinal(::grpc::ClientContext* context, const ::grep11::VerifyFinalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyFinalResponse>>(PrepareAsyncVerifyFinalRaw(context, request, cq));
    }
    // CK_RV m_Sign (
    //     const unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR data, CK_ULONG datalen,
    //     CK_BYTE_PTR signature, CK_ULONG_PTR signaturelen,
    //     target_t target) ;
    virtual ::grpc::Status Sign(::grpc::ClientContext* context, const ::grep11::SignRequest& request, ::grep11::SignResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignResponse>> AsyncSign(::grpc::ClientContext* context, const ::grep11::SignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignResponse>>(AsyncSignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignResponse>> PrepareAsyncSign(::grpc::ClientContext* context, const ::grep11::SignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignResponse>>(PrepareAsyncSignRaw(context, request, cq));
    }
    // CK_RV m_Verify (
    //     const unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR data, CK_ULONG datalen,
    //     CK_BYTE_PTR signature, CK_ULONG signaturelen,
    //     target_t target) ;
    virtual ::grpc::Status Verify(::grpc::ClientContext* context, const ::grep11::VerifyRequest& request, ::grep11::VerifyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyResponse>> AsyncVerify(::grpc::ClientContext* context, const ::grep11::VerifyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyResponse>>(AsyncVerifyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyResponse>> PrepareAsyncVerify(::grpc::ClientContext* context, const ::grep11::VerifyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyResponse>>(PrepareAsyncVerifyRaw(context, request, cq));
    }
    // CK_RV m_SignSingle (
    //     const unsigned char *privKey, size_t privKeylen,
    //     CK_MECHANISM_PTR mech,
    //     CK_BYTE_PTR data, CK_ULONG datalen,
    //     CK_BYTE_PTR signature, CK_ULONG_PTR signaturelen,
    //     target_t target) ;
    virtual ::grpc::Status SignSingle(::grpc::ClientContext* context, const ::grep11::SignSingleRequest& request, ::grep11::SignSingleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignSingleResponse>> AsyncSignSingle(::grpc::ClientContext* context, const ::grep11::SignSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignSingleResponse>>(AsyncSignSingleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignSingleResponse>> PrepareAsyncSignSingle(::grpc::ClientContext* context, const ::grep11::SignSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignSingleResponse>>(PrepareAsyncSignSingleRaw(context, request, cq));
    }
    // CK_RV m_VerifySingle (
    //     const unsigned char *pubKey, size_t pubKeylen,
    //     CK_MECHANISM_PTR mech,
    //     CK_BYTE_PTR data, CK_ULONG datalen,
    //     CK_BYTE_PTR signature, CK_ULONG signaturelen,
    //     target_t target) ;
    virtual ::grpc::Status VerifySingle(::grpc::ClientContext* context, const ::grep11::VerifySingleRequest& request, ::grep11::VerifySingleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifySingleResponse>> AsyncVerifySingle(::grpc::ClientContext* context, const ::grep11::VerifySingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifySingleResponse>>(AsyncVerifySingleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifySingleResponse>> PrepareAsyncVerifySingle(::grpc::ClientContext* context, const ::grep11::VerifySingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifySingleResponse>>(PrepareAsyncVerifySingleRaw(context, request, cq));
    }
    // CK_RV m_GenerateKey (
    //     CK_MECHANISM_PTR mech,
    //     CK_ATTRIBUTE_PTR template, CK_ULONG templatelen,
    //     const unsigned char *pin, size_t pinlen,
    //     unsigned char *key, size_t *keylen,
    //     unsigned char *checkSum, size_t *checkSumlen,
    //     target_t target) ;
    virtual ::grpc::Status GenerateKey(::grpc::ClientContext* context, const ::grep11::GenerateKeyRequest& request, ::grep11::GenerateKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GenerateKeyResponse>> AsyncGenerateKey(::grpc::ClientContext* context, const ::grep11::GenerateKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GenerateKeyResponse>>(AsyncGenerateKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GenerateKeyResponse>> PrepareAsyncGenerateKey(::grpc::ClientContext* context, const ::grep11::GenerateKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GenerateKeyResponse>>(PrepareAsyncGenerateKeyRaw(context, request, cq));
    }
    // CK_RV m_GenerateKeyPair (
    //     CK_MECHANISM_PTR mech,
    //     CK_ATTRIBUTE_PTR pubKeyTemplate, CK_ULONG pubKeyTemplatelen,
    //     CK_ATTRIBUTE_PTR privKeyTemplate, CK_ULONG privKeyTemplatelen,
    //     const unsigned char *pin, size_t pinlen,
    //     unsigned char *privKey, size_t *privKeylen,
    //     unsigned char *pubKey, size_t *pubKeylen,
    //     target_t target) ;
    virtual ::grpc::Status GenerateKeyPair(::grpc::ClientContext* context, const ::grep11::GenerateKeyPairRequest& request, ::grep11::GenerateKeyPairResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GenerateKeyPairResponse>> AsyncGenerateKeyPair(::grpc::ClientContext* context, const ::grep11::GenerateKeyPairRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GenerateKeyPairResponse>>(AsyncGenerateKeyPairRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GenerateKeyPairResponse>> PrepareAsyncGenerateKeyPair(::grpc::ClientContext* context, const ::grep11::GenerateKeyPairRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GenerateKeyPairResponse>>(PrepareAsyncGenerateKeyPairRaw(context, request, cq));
    }
    // CK_RV m_WrapKey (
    //     const unsigned char *key, size_t keylen,
    //     const unsigned char *keK, size_t keKlen,
    //     const unsigned char *macKey, size_t macKeylen,
    //     const CK_MECHANISM_PTR mech,
    //     CK_BYTE_PTR wrapped, CK_ULONG_PTR wrappedlen,
    //     target_t target) ;
    virtual ::grpc::Status WrapKey(::grpc::ClientContext* context, const ::grep11::WrapKeyRequest& request, ::grep11::WrapKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::WrapKeyResponse>> AsyncWrapKey(::grpc::ClientContext* context, const ::grep11::WrapKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::WrapKeyResponse>>(AsyncWrapKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::WrapKeyResponse>> PrepareAsyncWrapKey(::grpc::ClientContext* context, const ::grep11::WrapKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::WrapKeyResponse>>(PrepareAsyncWrapKeyRaw(context, request, cq));
    }
    // CK_RV m_UnwrapKey (
    //     const CK_BYTE_PTR wrapped, CK_ULONG wrappedlen,
    //     const unsigned char *keK, size_t keKlen,
    //     const unsigned char *macKey, size_t macKeylen,
    //     const unsigned char *pin, size_t pinlen,
    //     const CK_MECHANISM_PTR mech,
    //     const CK_ATTRIBUTE_PTR template, CK_ULONG templatelen,
    //     unsigned char *unwrapped, size_t *unwrappedlen,
    //     CK_BYTE_PTR checkSum, CK_ULONG *checkSumlen,
    //     target_t target) ;
    virtual ::grpc::Status UnwrapKey(::grpc::ClientContext* context, const ::grep11::UnwrapKeyRequest& request, ::grep11::UnwrapKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::UnwrapKeyResponse>> AsyncUnwrapKey(::grpc::ClientContext* context, const ::grep11::UnwrapKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::UnwrapKeyResponse>>(AsyncUnwrapKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::UnwrapKeyResponse>> PrepareAsyncUnwrapKey(::grpc::ClientContext* context, const ::grep11::UnwrapKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::UnwrapKeyResponse>>(PrepareAsyncUnwrapKeyRaw(context, request, cq));
    }
    // CK_RV m_DeriveKey (
    //     CK_MECHANISM_PTR mech,
    //     CK_ATTRIBUTE_PTR template, CK_ULONG templatelen,
    //     const unsigned char *baseKey, size_t baseKeylen,
    //     const unsigned char *data, size_t datalen,
    //     const unsigned char *pin, size_t pinlen,
    //     unsigned char *newKey, size_t *newKeylen,
    //     unsigned char *checkSum, size_t *checkSumlen,
    //     target_t target) ;
    virtual ::grpc::Status DeriveKey(::grpc::ClientContext* context, const ::grep11::DeriveKeyRequest& request, ::grep11::DeriveKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DeriveKeyResponse>> AsyncDeriveKey(::grpc::ClientContext* context, const ::grep11::DeriveKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DeriveKeyResponse>>(AsyncDeriveKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DeriveKeyResponse>> PrepareAsyncDeriveKey(::grpc::ClientContext* context, const ::grep11::DeriveKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DeriveKeyResponse>>(PrepareAsyncDeriveKeyRaw(context, request, cq));
    }
    // CK_RV m_GetMechanismList (
    //     CK_SLOT_ID slot,
    //     CK_MECHANISM_TYPE_PTR mechs, CK_ULONG_PTR mechslen,
    //     target_t target) ;
    virtual ::grpc::Status GetMechanismList(::grpc::ClientContext* context, const ::grep11::GetMechanismListRequest& request, ::grep11::GetMechanismListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GetMechanismListResponse>> AsyncGetMechanismList(::grpc::ClientContext* context, const ::grep11::GetMechanismListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GetMechanismListResponse>>(AsyncGetMechanismListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GetMechanismListResponse>> PrepareAsyncGetMechanismList(::grpc::ClientContext* context, const ::grep11::GetMechanismListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GetMechanismListResponse>>(PrepareAsyncGetMechanismListRaw(context, request, cq));
    }
    // CK_RV m_GetMechanismInfo (
    //     CK_SLOT_ID slot,
    //     CK_MECHANISM_TYPE mech,
    //     CK_MECHANISM_INFO_PTR mechInfo,
    //     target_t target) ;
    virtual ::grpc::Status GetMechanismInfo(::grpc::ClientContext* context, const ::grep11::GetMechanismInfoRequest& request, ::grep11::GetMechanismInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GetMechanismInfoResponse>> AsyncGetMechanismInfo(::grpc::ClientContext* context, const ::grep11::GetMechanismInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GetMechanismInfoResponse>>(AsyncGetMechanismInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GetMechanismInfoResponse>> PrepareAsyncGetMechanismInfo(::grpc::ClientContext* context, const ::grep11::GetMechanismInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GetMechanismInfoResponse>>(PrepareAsyncGetMechanismInfoRaw(context, request, cq));
    }
    // CK_RV m_GetAttributeValue (
    //     const unsigned char *object, size_t objectlen,
    //     CK_ATTRIBUTE_PTR attributes, CK_ULONG attributeslen,
    //     target_t target) ;
    virtual ::grpc::Status GetAttributeValue(::grpc::ClientContext* context, const ::grep11::GetAttributeValueRequest& request, ::grep11::GetAttributeValueResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GetAttributeValueResponse>> AsyncGetAttributeValue(::grpc::ClientContext* context, const ::grep11::GetAttributeValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GetAttributeValueResponse>>(AsyncGetAttributeValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GetAttributeValueResponse>> PrepareAsyncGetAttributeValue(::grpc::ClientContext* context, const ::grep11::GetAttributeValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GetAttributeValueResponse>>(PrepareAsyncGetAttributeValueRaw(context, request, cq));
    }
    // CK_RV m_SetAttributeValue (
    //     unsigned char *object, size_t objectlen,
    //     CK_ATTRIBUTE_PTR attributes, CK_ULONG attributeslen,
    //     target_t target) ;
    virtual ::grpc::Status SetAttributeValue(::grpc::ClientContext* context, const ::grep11::SetAttributeValueRequest& request, ::grep11::SetAttributeValueResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SetAttributeValueResponse>> AsyncSetAttributeValue(::grpc::ClientContext* context, const ::grep11::SetAttributeValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SetAttributeValueResponse>>(AsyncSetAttributeValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SetAttributeValueResponse>> PrepareAsyncSetAttributeValue(::grpc::ClientContext* context, const ::grep11::SetAttributeValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SetAttributeValueResponse>>(PrepareAsyncSetAttributeValueRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // CK_RV m_GenerateRandom (
      //     CK_BYTE_PTR rnd, CK_ULONG rndlen,
      //     target_t target) ;
      virtual void GenerateRandom(::grpc::ClientContext* context, const ::grep11::GenerateRandomRequest* request, ::grep11::GenerateRandomResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GenerateRandom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GenerateRandomResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GenerateRandom(::grpc::ClientContext* context, const ::grep11::GenerateRandomRequest* request, ::grep11::GenerateRandomResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GenerateRandom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GenerateRandomResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_DigestInit (
      //     unsigned char *state, size_t *statelen,
      //     const CK_MECHANISM_PTR mech,
      //     target_t target) ;
      virtual void DigestInit(::grpc::ClientContext* context, const ::grep11::DigestInitRequest* request, ::grep11::DigestInitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DigestInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestInitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DigestInit(::grpc::ClientContext* context, const ::grep11::DigestInitRequest* request, ::grep11::DigestInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DigestInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_Digest (
      //     const unsigned char *state, size_t statelen,
      //     CK_BYTE_PTR data, CK_ULONG datalen,
      //     CK_BYTE_PTR digest, CK_ULONG_PTR digestlen,
      //     target_t target) ;
      virtual void Digest(::grpc::ClientContext* context, const ::grep11::DigestRequest* request, ::grep11::DigestResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Digest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Digest(::grpc::ClientContext* context, const ::grep11::DigestRequest* request, ::grep11::DigestResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Digest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_DigestUpdate (
      //     unsigned char *state, size_t statelen,
      //     CK_BYTE_PTR data, CK_ULONG datalen,
      //     target_t target) ;
      virtual void DigestUpdate(::grpc::ClientContext* context, const ::grep11::DigestUpdateRequest* request, ::grep11::DigestUpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DigestUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestUpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DigestUpdate(::grpc::ClientContext* context, const ::grep11::DigestUpdateRequest* request, ::grep11::DigestUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DigestUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_DigestKey (
      //     unsigned char *state, size_t statelen,
      //     const unsigned char *key, size_t keylen,
      //     target_t target) ;
      virtual void DigestKey(::grpc::ClientContext* context, const ::grep11::DigestKeyRequest* request, ::grep11::DigestKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DigestKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DigestKey(::grpc::ClientContext* context, const ::grep11::DigestKeyRequest* request, ::grep11::DigestKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DigestKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_DigestFinal (
      //     const unsigned char *state, size_t statelen,
      //     CK_BYTE_PTR digest, CK_ULONG_PTR digestlen,
      //     target_t target) ;
      virtual void DigestFinal(::grpc::ClientContext* context, const ::grep11::DigestFinalRequest* request, ::grep11::DigestFinalResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DigestFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestFinalResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DigestFinal(::grpc::ClientContext* context, const ::grep11::DigestFinalRequest* request, ::grep11::DigestFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DigestFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_DigestSingle (
      //     CK_MECHANISM_PTR mech,
      //     CK_BYTE_PTR data, CK_ULONG datalen,
      //     CK_BYTE_PTR digest, CK_ULONG_PTR digestlen,
      //     target_t target) ;
      virtual void DigestSingle(::grpc::ClientContext* context, const ::grep11::DigestSingleRequest* request, ::grep11::DigestSingleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DigestSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestSingleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DigestSingle(::grpc::ClientContext* context, const ::grep11::DigestSingleRequest* request, ::grep11::DigestSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DigestSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_EncryptInit (
      //     unsigned char *state, size_t *statelen,
      //     CK_MECHANISM_PTR mech,
      //     const unsigned char *key, size_t keylen,
      //     target_t target) ;
      virtual void EncryptInit(::grpc::ClientContext* context, const ::grep11::EncryptInitRequest* request, ::grep11::EncryptInitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EncryptInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptInitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EncryptInit(::grpc::ClientContext* context, const ::grep11::EncryptInitRequest* request, ::grep11::EncryptInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void EncryptInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_DecryptInit (
      //     unsigned char *state, size_t *statelen,
      //     CK_MECHANISM_PTR mech,
      //     const unsigned char *key, size_t keylen,
      //     target_t target) ;
      virtual void DecryptInit(::grpc::ClientContext* context, const ::grep11::DecryptInitRequest* request, ::grep11::DecryptInitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DecryptInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptInitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DecryptInit(::grpc::ClientContext* context, const ::grep11::DecryptInitRequest* request, ::grep11::DecryptInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DecryptInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_EncryptUpdate (
      //     unsigned char *state, size_t statelen,
      //     CK_BYTE_PTR plain, CK_ULONG plainlen,
      //     CK_BYTE_PTR ciphered, CK_ULONG_PTR cipheredlen,
      //     target_t target) ;
      virtual void EncryptUpdate(::grpc::ClientContext* context, const ::grep11::EncryptUpdateRequest* request, ::grep11::EncryptUpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EncryptUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptUpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EncryptUpdate(::grpc::ClientContext* context, const ::grep11::EncryptUpdateRequest* request, ::grep11::EncryptUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void EncryptUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_DecryptUpdate (
      //     unsigned char *state, size_t statelen,
      //     CK_BYTE_PTR ciphered, CK_ULONG cipheredlen,
      //     CK_BYTE_PTR plain, CK_ULONG_PTR plainlen,
      //     target_t target) ;
      virtual void DecryptUpdate(::grpc::ClientContext* context, const ::grep11::DecryptUpdateRequest* request, ::grep11::DecryptUpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DecryptUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptUpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DecryptUpdate(::grpc::ClientContext* context, const ::grep11::DecryptUpdateRequest* request, ::grep11::DecryptUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DecryptUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_Encrypt (
      //     const unsigned char *state, size_t statelen,
      //     CK_BYTE_PTR plain, CK_ULONG plainlen,
      //     CK_BYTE_PTR ciphered, CK_ULONG_PTR cipheredlen,
      //     target_t target) ;
      virtual void Encrypt(::grpc::ClientContext* context, const ::grep11::EncryptRequest* request, ::grep11::EncryptResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Encrypt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Encrypt(::grpc::ClientContext* context, const ::grep11::EncryptRequest* request, ::grep11::EncryptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Encrypt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_Decrypt (
      //     const unsigned char *state, size_t statelen,
      //     CK_BYTE_PTR ciphered, CK_ULONG cipheredlen,
      //     CK_BYTE_PTR plain, CK_ULONG_PTR plainlen,
      //     target_t target) ;
      virtual void Decrypt(::grpc::ClientContext* context, const ::grep11::DecryptRequest* request, ::grep11::DecryptResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Decrypt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Decrypt(::grpc::ClientContext* context, const ::grep11::DecryptRequest* request, ::grep11::DecryptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Decrypt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_EncryptFinal (
      //     const unsigned char *state, size_t statelen,
      //     CK_BYTE_PTR ciphered, CK_ULONG_PTR cipheredlen,
      //     target_t target) ;
      virtual void EncryptFinal(::grpc::ClientContext* context, const ::grep11::EncryptFinalRequest* request, ::grep11::EncryptFinalResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EncryptFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptFinalResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EncryptFinal(::grpc::ClientContext* context, const ::grep11::EncryptFinalRequest* request, ::grep11::EncryptFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void EncryptFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_DecryptFinal (
      //     const unsigned char *state, size_t statelen,
      //     CK_BYTE_PTR plain, CK_ULONG_PTR plainlen,
      //     target_t target) ;
      virtual void DecryptFinal(::grpc::ClientContext* context, const ::grep11::DecryptFinalRequest* request, ::grep11::DecryptFinalResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DecryptFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptFinalResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DecryptFinal(::grpc::ClientContext* context, const ::grep11::DecryptFinalRequest* request, ::grep11::DecryptFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DecryptFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_EncryptSingle (
      //     const unsigned char *key, size_t keylen,
      //     CK_MECHANISM_PTR mech,
      //     CK_BYTE_PTR plain, CK_ULONG plainlen,
      //     CK_BYTE_PTR ciphered, CK_ULONG_PTR cipheredlen,
      //     target_t target) ;
      virtual void EncryptSingle(::grpc::ClientContext* context, const ::grep11::EncryptSingleRequest* request, ::grep11::EncryptSingleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EncryptSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptSingleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EncryptSingle(::grpc::ClientContext* context, const ::grep11::EncryptSingleRequest* request, ::grep11::EncryptSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void EncryptSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_DecryptSingle (
      //     const unsigned char *key, size_t keylen,
      //     CK_MECHANISM_PTR mech,
      //     CK_BYTE_PTR ciphered, CK_ULONG cipheredlen,
      //     CK_BYTE_PTR plain, CK_ULONG_PTR plainlen,
      //     target_t target) ;
      virtual void DecryptSingle(::grpc::ClientContext* context, const ::grep11::DecryptSingleRequest* request, ::grep11::DecryptSingleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DecryptSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptSingleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DecryptSingle(::grpc::ClientContext* context, const ::grep11::DecryptSingleRequest* request, ::grep11::DecryptSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DecryptSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_SignInit (
      //     unsigned char *state, size_t *statelen,
      //     CK_MECHANISM_PTR mech,
      //     const unsigned char *privKey, size_t privKeylen,
      //     target_t target) ;
      virtual void SignInit(::grpc::ClientContext* context, const ::grep11::SignInitRequest* request, ::grep11::SignInitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SignInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignInitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SignInit(::grpc::ClientContext* context, const ::grep11::SignInitRequest* request, ::grep11::SignInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SignInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_VerifyInit (
      //     unsigned char *state, size_t *statelen,
      //     CK_MECHANISM_PTR mech,
      //     const unsigned char *pubKey, size_t pubKeylen,
      //     target_t target) ;
      virtual void VerifyInit(::grpc::ClientContext* context, const ::grep11::VerifyInitRequest* request, ::grep11::VerifyInitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyInitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyInit(::grpc::ClientContext* context, const ::grep11::VerifyInitRequest* request, ::grep11::VerifyInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void VerifyInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_SignUpdate (
      //     unsigned char *state, size_t statelen,
      //     CK_BYTE_PTR data, CK_ULONG datalen,
      //     target_t target) ;
      virtual void SignUpdate(::grpc::ClientContext* context, const ::grep11::SignUpdateRequest* request, ::grep11::SignUpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SignUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignUpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SignUpdate(::grpc::ClientContext* context, const ::grep11::SignUpdateRequest* request, ::grep11::SignUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SignUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_VerifyUpdate (
      //     unsigned char *state, size_t statelen,
      //     CK_BYTE_PTR data, CK_ULONG datalen,
      //     target_t target) ;
      virtual void VerifyUpdate(::grpc::ClientContext* context, const ::grep11::VerifyUpdateRequest* request, ::grep11::VerifyUpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyUpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyUpdate(::grpc::ClientContext* context, const ::grep11::VerifyUpdateRequest* request, ::grep11::VerifyUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void VerifyUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_SignFinal (
      //     const unsigned char *state, size_t statelen,
      //     CK_BYTE_PTR signature, CK_ULONG_PTR signaturelen,
      //     target_t target) ;
      virtual void SignFinal(::grpc::ClientContext* context, const ::grep11::SignFinalRequest* request, ::grep11::SignFinalResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SignFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignFinalResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SignFinal(::grpc::ClientContext* context, const ::grep11::SignFinalRequest* request, ::grep11::SignFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SignFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_VerifyFinal (
      //     const unsigned char *state, size_t statelen,
      //     CK_BYTE_PTR signature, CK_ULONG signaturelen,
      //     target_t target) ;
      virtual void VerifyFinal(::grpc::ClientContext* context, const ::grep11::VerifyFinalRequest* request, ::grep11::VerifyFinalResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyFinalResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyFinal(::grpc::ClientContext* context, const ::grep11::VerifyFinalRequest* request, ::grep11::VerifyFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void VerifyFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_Sign (
      //     const unsigned char *state, size_t statelen,
      //     CK_BYTE_PTR data, CK_ULONG datalen,
      //     CK_BYTE_PTR signature, CK_ULONG_PTR signaturelen,
      //     target_t target) ;
      virtual void Sign(::grpc::ClientContext* context, const ::grep11::SignRequest* request, ::grep11::SignResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Sign(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Sign(::grpc::ClientContext* context, const ::grep11::SignRequest* request, ::grep11::SignResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Sign(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_Verify (
      //     const unsigned char *state, size_t statelen,
      //     CK_BYTE_PTR data, CK_ULONG datalen,
      //     CK_BYTE_PTR signature, CK_ULONG signaturelen,
      //     target_t target) ;
      virtual void Verify(::grpc::ClientContext* context, const ::grep11::VerifyRequest* request, ::grep11::VerifyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Verify(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Verify(::grpc::ClientContext* context, const ::grep11::VerifyRequest* request, ::grep11::VerifyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Verify(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_SignSingle (
      //     const unsigned char *privKey, size_t privKeylen,
      //     CK_MECHANISM_PTR mech,
      //     CK_BYTE_PTR data, CK_ULONG datalen,
      //     CK_BYTE_PTR signature, CK_ULONG_PTR signaturelen,
      //     target_t target) ;
      virtual void SignSingle(::grpc::ClientContext* context, const ::grep11::SignSingleRequest* request, ::grep11::SignSingleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SignSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignSingleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SignSingle(::grpc::ClientContext* context, const ::grep11::SignSingleRequest* request, ::grep11::SignSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SignSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_VerifySingle (
      //     const unsigned char *pubKey, size_t pubKeylen,
      //     CK_MECHANISM_PTR mech,
      //     CK_BYTE_PTR data, CK_ULONG datalen,
      //     CK_BYTE_PTR signature, CK_ULONG signaturelen,
      //     target_t target) ;
      virtual void VerifySingle(::grpc::ClientContext* context, const ::grep11::VerifySingleRequest* request, ::grep11::VerifySingleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifySingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifySingleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifySingle(::grpc::ClientContext* context, const ::grep11::VerifySingleRequest* request, ::grep11::VerifySingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void VerifySingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifySingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_GenerateKey (
      //     CK_MECHANISM_PTR mech,
      //     CK_ATTRIBUTE_PTR template, CK_ULONG templatelen,
      //     const unsigned char *pin, size_t pinlen,
      //     unsigned char *key, size_t *keylen,
      //     unsigned char *checkSum, size_t *checkSumlen,
      //     target_t target) ;
      virtual void GenerateKey(::grpc::ClientContext* context, const ::grep11::GenerateKeyRequest* request, ::grep11::GenerateKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GenerateKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GenerateKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GenerateKey(::grpc::ClientContext* context, const ::grep11::GenerateKeyRequest* request, ::grep11::GenerateKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GenerateKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GenerateKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_GenerateKeyPair (
      //     CK_MECHANISM_PTR mech,
      //     CK_ATTRIBUTE_PTR pubKeyTemplate, CK_ULONG pubKeyTemplatelen,
      //     CK_ATTRIBUTE_PTR privKeyTemplate, CK_ULONG privKeyTemplatelen,
      //     const unsigned char *pin, size_t pinlen,
      //     unsigned char *privKey, size_t *privKeylen,
      //     unsigned char *pubKey, size_t *pubKeylen,
      //     target_t target) ;
      virtual void GenerateKeyPair(::grpc::ClientContext* context, const ::grep11::GenerateKeyPairRequest* request, ::grep11::GenerateKeyPairResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GenerateKeyPair(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GenerateKeyPairResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GenerateKeyPair(::grpc::ClientContext* context, const ::grep11::GenerateKeyPairRequest* request, ::grep11::GenerateKeyPairResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GenerateKeyPair(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GenerateKeyPairResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_WrapKey (
      //     const unsigned char *key, size_t keylen,
      //     const unsigned char *keK, size_t keKlen,
      //     const unsigned char *macKey, size_t macKeylen,
      //     const CK_MECHANISM_PTR mech,
      //     CK_BYTE_PTR wrapped, CK_ULONG_PTR wrappedlen,
      //     target_t target) ;
      virtual void WrapKey(::grpc::ClientContext* context, const ::grep11::WrapKeyRequest* request, ::grep11::WrapKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WrapKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::WrapKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WrapKey(::grpc::ClientContext* context, const ::grep11::WrapKeyRequest* request, ::grep11::WrapKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void WrapKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::WrapKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_UnwrapKey (
      //     const CK_BYTE_PTR wrapped, CK_ULONG wrappedlen,
      //     const unsigned char *keK, size_t keKlen,
      //     const unsigned char *macKey, size_t macKeylen,
      //     const unsigned char *pin, size_t pinlen,
      //     const CK_MECHANISM_PTR mech,
      //     const CK_ATTRIBUTE_PTR template, CK_ULONG templatelen,
      //     unsigned char *unwrapped, size_t *unwrappedlen,
      //     CK_BYTE_PTR checkSum, CK_ULONG *checkSumlen,
      //     target_t target) ;
      virtual void UnwrapKey(::grpc::ClientContext* context, const ::grep11::UnwrapKeyRequest* request, ::grep11::UnwrapKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnwrapKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::UnwrapKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnwrapKey(::grpc::ClientContext* context, const ::grep11::UnwrapKeyRequest* request, ::grep11::UnwrapKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void UnwrapKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::UnwrapKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_DeriveKey (
      //     CK_MECHANISM_PTR mech,
      //     CK_ATTRIBUTE_PTR template, CK_ULONG templatelen,
      //     const unsigned char *baseKey, size_t baseKeylen,
      //     const unsigned char *data, size_t datalen,
      //     const unsigned char *pin, size_t pinlen,
      //     unsigned char *newKey, size_t *newKeylen,
      //     unsigned char *checkSum, size_t *checkSumlen,
      //     target_t target) ;
      virtual void DeriveKey(::grpc::ClientContext* context, const ::grep11::DeriveKeyRequest* request, ::grep11::DeriveKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeriveKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DeriveKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeriveKey(::grpc::ClientContext* context, const ::grep11::DeriveKeyRequest* request, ::grep11::DeriveKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DeriveKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DeriveKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_GetMechanismList (
      //     CK_SLOT_ID slot,
      //     CK_MECHANISM_TYPE_PTR mechs, CK_ULONG_PTR mechslen,
      //     target_t target) ;
      virtual void GetMechanismList(::grpc::ClientContext* context, const ::grep11::GetMechanismListRequest* request, ::grep11::GetMechanismListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMechanismList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GetMechanismListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMechanismList(::grpc::ClientContext* context, const ::grep11::GetMechanismListRequest* request, ::grep11::GetMechanismListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetMechanismList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GetMechanismListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_GetMechanismInfo (
      //     CK_SLOT_ID slot,
      //     CK_MECHANISM_TYPE mech,
      //     CK_MECHANISM_INFO_PTR mechInfo,
      //     target_t target) ;
      virtual void GetMechanismInfo(::grpc::ClientContext* context, const ::grep11::GetMechanismInfoRequest* request, ::grep11::GetMechanismInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMechanismInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GetMechanismInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMechanismInfo(::grpc::ClientContext* context, const ::grep11::GetMechanismInfoRequest* request, ::grep11::GetMechanismInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetMechanismInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GetMechanismInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_GetAttributeValue (
      //     const unsigned char *object, size_t objectlen,
      //     CK_ATTRIBUTE_PTR attributes, CK_ULONG attributeslen,
      //     target_t target) ;
      virtual void GetAttributeValue(::grpc::ClientContext* context, const ::grep11::GetAttributeValueRequest* request, ::grep11::GetAttributeValueResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAttributeValue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GetAttributeValueResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAttributeValue(::grpc::ClientContext* context, const ::grep11::GetAttributeValueRequest* request, ::grep11::GetAttributeValueResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetAttributeValue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GetAttributeValueResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // CK_RV m_SetAttributeValue (
      //     unsigned char *object, size_t objectlen,
      //     CK_ATTRIBUTE_PTR attributes, CK_ULONG attributeslen,
      //     target_t target) ;
      virtual void SetAttributeValue(::grpc::ClientContext* context, const ::grep11::SetAttributeValueRequest* request, ::grep11::SetAttributeValueResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetAttributeValue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SetAttributeValueResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetAttributeValue(::grpc::ClientContext* context, const ::grep11::SetAttributeValueRequest* request, ::grep11::SetAttributeValueResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetAttributeValue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SetAttributeValueResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GenerateRandomResponse>* AsyncGenerateRandomRaw(::grpc::ClientContext* context, const ::grep11::GenerateRandomRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GenerateRandomResponse>* PrepareAsyncGenerateRandomRaw(::grpc::ClientContext* context, const ::grep11::GenerateRandomRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestInitResponse>* AsyncDigestInitRaw(::grpc::ClientContext* context, const ::grep11::DigestInitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestInitResponse>* PrepareAsyncDigestInitRaw(::grpc::ClientContext* context, const ::grep11::DigestInitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestResponse>* AsyncDigestRaw(::grpc::ClientContext* context, const ::grep11::DigestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestResponse>* PrepareAsyncDigestRaw(::grpc::ClientContext* context, const ::grep11::DigestRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestUpdateResponse>* AsyncDigestUpdateRaw(::grpc::ClientContext* context, const ::grep11::DigestUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestUpdateResponse>* PrepareAsyncDigestUpdateRaw(::grpc::ClientContext* context, const ::grep11::DigestUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestKeyResponse>* AsyncDigestKeyRaw(::grpc::ClientContext* context, const ::grep11::DigestKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestKeyResponse>* PrepareAsyncDigestKeyRaw(::grpc::ClientContext* context, const ::grep11::DigestKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestFinalResponse>* AsyncDigestFinalRaw(::grpc::ClientContext* context, const ::grep11::DigestFinalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestFinalResponse>* PrepareAsyncDigestFinalRaw(::grpc::ClientContext* context, const ::grep11::DigestFinalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestSingleResponse>* AsyncDigestSingleRaw(::grpc::ClientContext* context, const ::grep11::DigestSingleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DigestSingleResponse>* PrepareAsyncDigestSingleRaw(::grpc::ClientContext* context, const ::grep11::DigestSingleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptInitResponse>* AsyncEncryptInitRaw(::grpc::ClientContext* context, const ::grep11::EncryptInitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptInitResponse>* PrepareAsyncEncryptInitRaw(::grpc::ClientContext* context, const ::grep11::EncryptInitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptInitResponse>* AsyncDecryptInitRaw(::grpc::ClientContext* context, const ::grep11::DecryptInitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptInitResponse>* PrepareAsyncDecryptInitRaw(::grpc::ClientContext* context, const ::grep11::DecryptInitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptUpdateResponse>* AsyncEncryptUpdateRaw(::grpc::ClientContext* context, const ::grep11::EncryptUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptUpdateResponse>* PrepareAsyncEncryptUpdateRaw(::grpc::ClientContext* context, const ::grep11::EncryptUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptUpdateResponse>* AsyncDecryptUpdateRaw(::grpc::ClientContext* context, const ::grep11::DecryptUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptUpdateResponse>* PrepareAsyncDecryptUpdateRaw(::grpc::ClientContext* context, const ::grep11::DecryptUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptResponse>* AsyncEncryptRaw(::grpc::ClientContext* context, const ::grep11::EncryptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptResponse>* PrepareAsyncEncryptRaw(::grpc::ClientContext* context, const ::grep11::EncryptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptResponse>* AsyncDecryptRaw(::grpc::ClientContext* context, const ::grep11::DecryptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptResponse>* PrepareAsyncDecryptRaw(::grpc::ClientContext* context, const ::grep11::DecryptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptFinalResponse>* AsyncEncryptFinalRaw(::grpc::ClientContext* context, const ::grep11::EncryptFinalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptFinalResponse>* PrepareAsyncEncryptFinalRaw(::grpc::ClientContext* context, const ::grep11::EncryptFinalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptFinalResponse>* AsyncDecryptFinalRaw(::grpc::ClientContext* context, const ::grep11::DecryptFinalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptFinalResponse>* PrepareAsyncDecryptFinalRaw(::grpc::ClientContext* context, const ::grep11::DecryptFinalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptSingleResponse>* AsyncEncryptSingleRaw(::grpc::ClientContext* context, const ::grep11::EncryptSingleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::EncryptSingleResponse>* PrepareAsyncEncryptSingleRaw(::grpc::ClientContext* context, const ::grep11::EncryptSingleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptSingleResponse>* AsyncDecryptSingleRaw(::grpc::ClientContext* context, const ::grep11::DecryptSingleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DecryptSingleResponse>* PrepareAsyncDecryptSingleRaw(::grpc::ClientContext* context, const ::grep11::DecryptSingleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignInitResponse>* AsyncSignInitRaw(::grpc::ClientContext* context, const ::grep11::SignInitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignInitResponse>* PrepareAsyncSignInitRaw(::grpc::ClientContext* context, const ::grep11::SignInitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyInitResponse>* AsyncVerifyInitRaw(::grpc::ClientContext* context, const ::grep11::VerifyInitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyInitResponse>* PrepareAsyncVerifyInitRaw(::grpc::ClientContext* context, const ::grep11::VerifyInitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignUpdateResponse>* AsyncSignUpdateRaw(::grpc::ClientContext* context, const ::grep11::SignUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignUpdateResponse>* PrepareAsyncSignUpdateRaw(::grpc::ClientContext* context, const ::grep11::SignUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyUpdateResponse>* AsyncVerifyUpdateRaw(::grpc::ClientContext* context, const ::grep11::VerifyUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyUpdateResponse>* PrepareAsyncVerifyUpdateRaw(::grpc::ClientContext* context, const ::grep11::VerifyUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignFinalResponse>* AsyncSignFinalRaw(::grpc::ClientContext* context, const ::grep11::SignFinalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignFinalResponse>* PrepareAsyncSignFinalRaw(::grpc::ClientContext* context, const ::grep11::SignFinalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyFinalResponse>* AsyncVerifyFinalRaw(::grpc::ClientContext* context, const ::grep11::VerifyFinalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyFinalResponse>* PrepareAsyncVerifyFinalRaw(::grpc::ClientContext* context, const ::grep11::VerifyFinalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignResponse>* AsyncSignRaw(::grpc::ClientContext* context, const ::grep11::SignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignResponse>* PrepareAsyncSignRaw(::grpc::ClientContext* context, const ::grep11::SignRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyResponse>* AsyncVerifyRaw(::grpc::ClientContext* context, const ::grep11::VerifyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifyResponse>* PrepareAsyncVerifyRaw(::grpc::ClientContext* context, const ::grep11::VerifyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignSingleResponse>* AsyncSignSingleRaw(::grpc::ClientContext* context, const ::grep11::SignSingleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SignSingleResponse>* PrepareAsyncSignSingleRaw(::grpc::ClientContext* context, const ::grep11::SignSingleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifySingleResponse>* AsyncVerifySingleRaw(::grpc::ClientContext* context, const ::grep11::VerifySingleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::VerifySingleResponse>* PrepareAsyncVerifySingleRaw(::grpc::ClientContext* context, const ::grep11::VerifySingleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GenerateKeyResponse>* AsyncGenerateKeyRaw(::grpc::ClientContext* context, const ::grep11::GenerateKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GenerateKeyResponse>* PrepareAsyncGenerateKeyRaw(::grpc::ClientContext* context, const ::grep11::GenerateKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GenerateKeyPairResponse>* AsyncGenerateKeyPairRaw(::grpc::ClientContext* context, const ::grep11::GenerateKeyPairRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GenerateKeyPairResponse>* PrepareAsyncGenerateKeyPairRaw(::grpc::ClientContext* context, const ::grep11::GenerateKeyPairRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::WrapKeyResponse>* AsyncWrapKeyRaw(::grpc::ClientContext* context, const ::grep11::WrapKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::WrapKeyResponse>* PrepareAsyncWrapKeyRaw(::grpc::ClientContext* context, const ::grep11::WrapKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::UnwrapKeyResponse>* AsyncUnwrapKeyRaw(::grpc::ClientContext* context, const ::grep11::UnwrapKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::UnwrapKeyResponse>* PrepareAsyncUnwrapKeyRaw(::grpc::ClientContext* context, const ::grep11::UnwrapKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DeriveKeyResponse>* AsyncDeriveKeyRaw(::grpc::ClientContext* context, const ::grep11::DeriveKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::DeriveKeyResponse>* PrepareAsyncDeriveKeyRaw(::grpc::ClientContext* context, const ::grep11::DeriveKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GetMechanismListResponse>* AsyncGetMechanismListRaw(::grpc::ClientContext* context, const ::grep11::GetMechanismListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GetMechanismListResponse>* PrepareAsyncGetMechanismListRaw(::grpc::ClientContext* context, const ::grep11::GetMechanismListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GetMechanismInfoResponse>* AsyncGetMechanismInfoRaw(::grpc::ClientContext* context, const ::grep11::GetMechanismInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GetMechanismInfoResponse>* PrepareAsyncGetMechanismInfoRaw(::grpc::ClientContext* context, const ::grep11::GetMechanismInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GetAttributeValueResponse>* AsyncGetAttributeValueRaw(::grpc::ClientContext* context, const ::grep11::GetAttributeValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::GetAttributeValueResponse>* PrepareAsyncGetAttributeValueRaw(::grpc::ClientContext* context, const ::grep11::GetAttributeValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SetAttributeValueResponse>* AsyncSetAttributeValueRaw(::grpc::ClientContext* context, const ::grep11::SetAttributeValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::grep11::SetAttributeValueResponse>* PrepareAsyncSetAttributeValueRaw(::grpc::ClientContext* context, const ::grep11::SetAttributeValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GenerateRandom(::grpc::ClientContext* context, const ::grep11::GenerateRandomRequest& request, ::grep11::GenerateRandomResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GenerateRandomResponse>> AsyncGenerateRandom(::grpc::ClientContext* context, const ::grep11::GenerateRandomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GenerateRandomResponse>>(AsyncGenerateRandomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GenerateRandomResponse>> PrepareAsyncGenerateRandom(::grpc::ClientContext* context, const ::grep11::GenerateRandomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GenerateRandomResponse>>(PrepareAsyncGenerateRandomRaw(context, request, cq));
    }
    ::grpc::Status DigestInit(::grpc::ClientContext* context, const ::grep11::DigestInitRequest& request, ::grep11::DigestInitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestInitResponse>> AsyncDigestInit(::grpc::ClientContext* context, const ::grep11::DigestInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestInitResponse>>(AsyncDigestInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestInitResponse>> PrepareAsyncDigestInit(::grpc::ClientContext* context, const ::grep11::DigestInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestInitResponse>>(PrepareAsyncDigestInitRaw(context, request, cq));
    }
    ::grpc::Status Digest(::grpc::ClientContext* context, const ::grep11::DigestRequest& request, ::grep11::DigestResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestResponse>> AsyncDigest(::grpc::ClientContext* context, const ::grep11::DigestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestResponse>>(AsyncDigestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestResponse>> PrepareAsyncDigest(::grpc::ClientContext* context, const ::grep11::DigestRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestResponse>>(PrepareAsyncDigestRaw(context, request, cq));
    }
    ::grpc::Status DigestUpdate(::grpc::ClientContext* context, const ::grep11::DigestUpdateRequest& request, ::grep11::DigestUpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestUpdateResponse>> AsyncDigestUpdate(::grpc::ClientContext* context, const ::grep11::DigestUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestUpdateResponse>>(AsyncDigestUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestUpdateResponse>> PrepareAsyncDigestUpdate(::grpc::ClientContext* context, const ::grep11::DigestUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestUpdateResponse>>(PrepareAsyncDigestUpdateRaw(context, request, cq));
    }
    ::grpc::Status DigestKey(::grpc::ClientContext* context, const ::grep11::DigestKeyRequest& request, ::grep11::DigestKeyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestKeyResponse>> AsyncDigestKey(::grpc::ClientContext* context, const ::grep11::DigestKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestKeyResponse>>(AsyncDigestKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestKeyResponse>> PrepareAsyncDigestKey(::grpc::ClientContext* context, const ::grep11::DigestKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestKeyResponse>>(PrepareAsyncDigestKeyRaw(context, request, cq));
    }
    ::grpc::Status DigestFinal(::grpc::ClientContext* context, const ::grep11::DigestFinalRequest& request, ::grep11::DigestFinalResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestFinalResponse>> AsyncDigestFinal(::grpc::ClientContext* context, const ::grep11::DigestFinalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestFinalResponse>>(AsyncDigestFinalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestFinalResponse>> PrepareAsyncDigestFinal(::grpc::ClientContext* context, const ::grep11::DigestFinalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestFinalResponse>>(PrepareAsyncDigestFinalRaw(context, request, cq));
    }
    ::grpc::Status DigestSingle(::grpc::ClientContext* context, const ::grep11::DigestSingleRequest& request, ::grep11::DigestSingleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestSingleResponse>> AsyncDigestSingle(::grpc::ClientContext* context, const ::grep11::DigestSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestSingleResponse>>(AsyncDigestSingleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestSingleResponse>> PrepareAsyncDigestSingle(::grpc::ClientContext* context, const ::grep11::DigestSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DigestSingleResponse>>(PrepareAsyncDigestSingleRaw(context, request, cq));
    }
    ::grpc::Status EncryptInit(::grpc::ClientContext* context, const ::grep11::EncryptInitRequest& request, ::grep11::EncryptInitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::EncryptInitResponse>> AsyncEncryptInit(::grpc::ClientContext* context, const ::grep11::EncryptInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::EncryptInitResponse>>(AsyncEncryptInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::EncryptInitResponse>> PrepareAsyncEncryptInit(::grpc::ClientContext* context, const ::grep11::EncryptInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::EncryptInitResponse>>(PrepareAsyncEncryptInitRaw(context, request, cq));
    }
    ::grpc::Status DecryptInit(::grpc::ClientContext* context, const ::grep11::DecryptInitRequest& request, ::grep11::DecryptInitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DecryptInitResponse>> AsyncDecryptInit(::grpc::ClientContext* context, const ::grep11::DecryptInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DecryptInitResponse>>(AsyncDecryptInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DecryptInitResponse>> PrepareAsyncDecryptInit(::grpc::ClientContext* context, const ::grep11::DecryptInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DecryptInitResponse>>(PrepareAsyncDecryptInitRaw(context, request, cq));
    }
    ::grpc::Status EncryptUpdate(::grpc::ClientContext* context, const ::grep11::EncryptUpdateRequest& request, ::grep11::EncryptUpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::EncryptUpdateResponse>> AsyncEncryptUpdate(::grpc::ClientContext* context, const ::grep11::EncryptUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::EncryptUpdateResponse>>(AsyncEncryptUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::EncryptUpdateResponse>> PrepareAsyncEncryptUpdate(::grpc::ClientContext* context, const ::grep11::EncryptUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::EncryptUpdateResponse>>(PrepareAsyncEncryptUpdateRaw(context, request, cq));
    }
    ::grpc::Status DecryptUpdate(::grpc::ClientContext* context, const ::grep11::DecryptUpdateRequest& request, ::grep11::DecryptUpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DecryptUpdateResponse>> AsyncDecryptUpdate(::grpc::ClientContext* context, const ::grep11::DecryptUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DecryptUpdateResponse>>(AsyncDecryptUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DecryptUpdateResponse>> PrepareAsyncDecryptUpdate(::grpc::ClientContext* context, const ::grep11::DecryptUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DecryptUpdateResponse>>(PrepareAsyncDecryptUpdateRaw(context, request, cq));
    }
    ::grpc::Status Encrypt(::grpc::ClientContext* context, const ::grep11::EncryptRequest& request, ::grep11::EncryptResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::EncryptResponse>> AsyncEncrypt(::grpc::ClientContext* context, const ::grep11::EncryptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::EncryptResponse>>(AsyncEncryptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::EncryptResponse>> PrepareAsyncEncrypt(::grpc::ClientContext* context, const ::grep11::EncryptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::EncryptResponse>>(PrepareAsyncEncryptRaw(context, request, cq));
    }
    ::grpc::Status Decrypt(::grpc::ClientContext* context, const ::grep11::DecryptRequest& request, ::grep11::DecryptResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DecryptResponse>> AsyncDecrypt(::grpc::ClientContext* context, const ::grep11::DecryptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DecryptResponse>>(AsyncDecryptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DecryptResponse>> PrepareAsyncDecrypt(::grpc::ClientContext* context, const ::grep11::DecryptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DecryptResponse>>(PrepareAsyncDecryptRaw(context, request, cq));
    }
    ::grpc::Status EncryptFinal(::grpc::ClientContext* context, const ::grep11::EncryptFinalRequest& request, ::grep11::EncryptFinalResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::EncryptFinalResponse>> AsyncEncryptFinal(::grpc::ClientContext* context, const ::grep11::EncryptFinalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::EncryptFinalResponse>>(AsyncEncryptFinalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::EncryptFinalResponse>> PrepareAsyncEncryptFinal(::grpc::ClientContext* context, const ::grep11::EncryptFinalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::EncryptFinalResponse>>(PrepareAsyncEncryptFinalRaw(context, request, cq));
    }
    ::grpc::Status DecryptFinal(::grpc::ClientContext* context, const ::grep11::DecryptFinalRequest& request, ::grep11::DecryptFinalResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DecryptFinalResponse>> AsyncDecryptFinal(::grpc::ClientContext* context, const ::grep11::DecryptFinalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DecryptFinalResponse>>(AsyncDecryptFinalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DecryptFinalResponse>> PrepareAsyncDecryptFinal(::grpc::ClientContext* context, const ::grep11::DecryptFinalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DecryptFinalResponse>>(PrepareAsyncDecryptFinalRaw(context, request, cq));
    }
    ::grpc::Status EncryptSingle(::grpc::ClientContext* context, const ::grep11::EncryptSingleRequest& request, ::grep11::EncryptSingleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::EncryptSingleResponse>> AsyncEncryptSingle(::grpc::ClientContext* context, const ::grep11::EncryptSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::EncryptSingleResponse>>(AsyncEncryptSingleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::EncryptSingleResponse>> PrepareAsyncEncryptSingle(::grpc::ClientContext* context, const ::grep11::EncryptSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::EncryptSingleResponse>>(PrepareAsyncEncryptSingleRaw(context, request, cq));
    }
    ::grpc::Status DecryptSingle(::grpc::ClientContext* context, const ::grep11::DecryptSingleRequest& request, ::grep11::DecryptSingleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DecryptSingleResponse>> AsyncDecryptSingle(::grpc::ClientContext* context, const ::grep11::DecryptSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DecryptSingleResponse>>(AsyncDecryptSingleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DecryptSingleResponse>> PrepareAsyncDecryptSingle(::grpc::ClientContext* context, const ::grep11::DecryptSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DecryptSingleResponse>>(PrepareAsyncDecryptSingleRaw(context, request, cq));
    }
    ::grpc::Status SignInit(::grpc::ClientContext* context, const ::grep11::SignInitRequest& request, ::grep11::SignInitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SignInitResponse>> AsyncSignInit(::grpc::ClientContext* context, const ::grep11::SignInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SignInitResponse>>(AsyncSignInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SignInitResponse>> PrepareAsyncSignInit(::grpc::ClientContext* context, const ::grep11::SignInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SignInitResponse>>(PrepareAsyncSignInitRaw(context, request, cq));
    }
    ::grpc::Status VerifyInit(::grpc::ClientContext* context, const ::grep11::VerifyInitRequest& request, ::grep11::VerifyInitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::VerifyInitResponse>> AsyncVerifyInit(::grpc::ClientContext* context, const ::grep11::VerifyInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::VerifyInitResponse>>(AsyncVerifyInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::VerifyInitResponse>> PrepareAsyncVerifyInit(::grpc::ClientContext* context, const ::grep11::VerifyInitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::VerifyInitResponse>>(PrepareAsyncVerifyInitRaw(context, request, cq));
    }
    ::grpc::Status SignUpdate(::grpc::ClientContext* context, const ::grep11::SignUpdateRequest& request, ::grep11::SignUpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SignUpdateResponse>> AsyncSignUpdate(::grpc::ClientContext* context, const ::grep11::SignUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SignUpdateResponse>>(AsyncSignUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SignUpdateResponse>> PrepareAsyncSignUpdate(::grpc::ClientContext* context, const ::grep11::SignUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SignUpdateResponse>>(PrepareAsyncSignUpdateRaw(context, request, cq));
    }
    ::grpc::Status VerifyUpdate(::grpc::ClientContext* context, const ::grep11::VerifyUpdateRequest& request, ::grep11::VerifyUpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::VerifyUpdateResponse>> AsyncVerifyUpdate(::grpc::ClientContext* context, const ::grep11::VerifyUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::VerifyUpdateResponse>>(AsyncVerifyUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::VerifyUpdateResponse>> PrepareAsyncVerifyUpdate(::grpc::ClientContext* context, const ::grep11::VerifyUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::VerifyUpdateResponse>>(PrepareAsyncVerifyUpdateRaw(context, request, cq));
    }
    ::grpc::Status SignFinal(::grpc::ClientContext* context, const ::grep11::SignFinalRequest& request, ::grep11::SignFinalResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SignFinalResponse>> AsyncSignFinal(::grpc::ClientContext* context, const ::grep11::SignFinalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SignFinalResponse>>(AsyncSignFinalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SignFinalResponse>> PrepareAsyncSignFinal(::grpc::ClientContext* context, const ::grep11::SignFinalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SignFinalResponse>>(PrepareAsyncSignFinalRaw(context, request, cq));
    }
    ::grpc::Status VerifyFinal(::grpc::ClientContext* context, const ::grep11::VerifyFinalRequest& request, ::grep11::VerifyFinalResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::VerifyFinalResponse>> AsyncVerifyFinal(::grpc::ClientContext* context, const ::grep11::VerifyFinalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::VerifyFinalResponse>>(AsyncVerifyFinalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::VerifyFinalResponse>> PrepareAsyncVerifyFinal(::grpc::ClientContext* context, const ::grep11::VerifyFinalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::VerifyFinalResponse>>(PrepareAsyncVerifyFinalRaw(context, request, cq));
    }
    ::grpc::Status Sign(::grpc::ClientContext* context, const ::grep11::SignRequest& request, ::grep11::SignResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SignResponse>> AsyncSign(::grpc::ClientContext* context, const ::grep11::SignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SignResponse>>(AsyncSignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SignResponse>> PrepareAsyncSign(::grpc::ClientContext* context, const ::grep11::SignRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SignResponse>>(PrepareAsyncSignRaw(context, request, cq));
    }
    ::grpc::Status Verify(::grpc::ClientContext* context, const ::grep11::VerifyRequest& request, ::grep11::VerifyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::VerifyResponse>> AsyncVerify(::grpc::ClientContext* context, const ::grep11::VerifyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::VerifyResponse>>(AsyncVerifyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::VerifyResponse>> PrepareAsyncVerify(::grpc::ClientContext* context, const ::grep11::VerifyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::VerifyResponse>>(PrepareAsyncVerifyRaw(context, request, cq));
    }
    ::grpc::Status SignSingle(::grpc::ClientContext* context, const ::grep11::SignSingleRequest& request, ::grep11::SignSingleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SignSingleResponse>> AsyncSignSingle(::grpc::ClientContext* context, const ::grep11::SignSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SignSingleResponse>>(AsyncSignSingleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SignSingleResponse>> PrepareAsyncSignSingle(::grpc::ClientContext* context, const ::grep11::SignSingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SignSingleResponse>>(PrepareAsyncSignSingleRaw(context, request, cq));
    }
    ::grpc::Status VerifySingle(::grpc::ClientContext* context, const ::grep11::VerifySingleRequest& request, ::grep11::VerifySingleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::VerifySingleResponse>> AsyncVerifySingle(::grpc::ClientContext* context, const ::grep11::VerifySingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::VerifySingleResponse>>(AsyncVerifySingleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::VerifySingleResponse>> PrepareAsyncVerifySingle(::grpc::ClientContext* context, const ::grep11::VerifySingleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::VerifySingleResponse>>(PrepareAsyncVerifySingleRaw(context, request, cq));
    }
    ::grpc::Status GenerateKey(::grpc::ClientContext* context, const ::grep11::GenerateKeyRequest& request, ::grep11::GenerateKeyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GenerateKeyResponse>> AsyncGenerateKey(::grpc::ClientContext* context, const ::grep11::GenerateKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GenerateKeyResponse>>(AsyncGenerateKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GenerateKeyResponse>> PrepareAsyncGenerateKey(::grpc::ClientContext* context, const ::grep11::GenerateKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GenerateKeyResponse>>(PrepareAsyncGenerateKeyRaw(context, request, cq));
    }
    ::grpc::Status GenerateKeyPair(::grpc::ClientContext* context, const ::grep11::GenerateKeyPairRequest& request, ::grep11::GenerateKeyPairResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GenerateKeyPairResponse>> AsyncGenerateKeyPair(::grpc::ClientContext* context, const ::grep11::GenerateKeyPairRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GenerateKeyPairResponse>>(AsyncGenerateKeyPairRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GenerateKeyPairResponse>> PrepareAsyncGenerateKeyPair(::grpc::ClientContext* context, const ::grep11::GenerateKeyPairRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GenerateKeyPairResponse>>(PrepareAsyncGenerateKeyPairRaw(context, request, cq));
    }
    ::grpc::Status WrapKey(::grpc::ClientContext* context, const ::grep11::WrapKeyRequest& request, ::grep11::WrapKeyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::WrapKeyResponse>> AsyncWrapKey(::grpc::ClientContext* context, const ::grep11::WrapKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::WrapKeyResponse>>(AsyncWrapKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::WrapKeyResponse>> PrepareAsyncWrapKey(::grpc::ClientContext* context, const ::grep11::WrapKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::WrapKeyResponse>>(PrepareAsyncWrapKeyRaw(context, request, cq));
    }
    ::grpc::Status UnwrapKey(::grpc::ClientContext* context, const ::grep11::UnwrapKeyRequest& request, ::grep11::UnwrapKeyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::UnwrapKeyResponse>> AsyncUnwrapKey(::grpc::ClientContext* context, const ::grep11::UnwrapKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::UnwrapKeyResponse>>(AsyncUnwrapKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::UnwrapKeyResponse>> PrepareAsyncUnwrapKey(::grpc::ClientContext* context, const ::grep11::UnwrapKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::UnwrapKeyResponse>>(PrepareAsyncUnwrapKeyRaw(context, request, cq));
    }
    ::grpc::Status DeriveKey(::grpc::ClientContext* context, const ::grep11::DeriveKeyRequest& request, ::grep11::DeriveKeyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DeriveKeyResponse>> AsyncDeriveKey(::grpc::ClientContext* context, const ::grep11::DeriveKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DeriveKeyResponse>>(AsyncDeriveKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DeriveKeyResponse>> PrepareAsyncDeriveKey(::grpc::ClientContext* context, const ::grep11::DeriveKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::DeriveKeyResponse>>(PrepareAsyncDeriveKeyRaw(context, request, cq));
    }
    ::grpc::Status GetMechanismList(::grpc::ClientContext* context, const ::grep11::GetMechanismListRequest& request, ::grep11::GetMechanismListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GetMechanismListResponse>> AsyncGetMechanismList(::grpc::ClientContext* context, const ::grep11::GetMechanismListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GetMechanismListResponse>>(AsyncGetMechanismListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GetMechanismListResponse>> PrepareAsyncGetMechanismList(::grpc::ClientContext* context, const ::grep11::GetMechanismListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GetMechanismListResponse>>(PrepareAsyncGetMechanismListRaw(context, request, cq));
    }
    ::grpc::Status GetMechanismInfo(::grpc::ClientContext* context, const ::grep11::GetMechanismInfoRequest& request, ::grep11::GetMechanismInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GetMechanismInfoResponse>> AsyncGetMechanismInfo(::grpc::ClientContext* context, const ::grep11::GetMechanismInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GetMechanismInfoResponse>>(AsyncGetMechanismInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GetMechanismInfoResponse>> PrepareAsyncGetMechanismInfo(::grpc::ClientContext* context, const ::grep11::GetMechanismInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GetMechanismInfoResponse>>(PrepareAsyncGetMechanismInfoRaw(context, request, cq));
    }
    ::grpc::Status GetAttributeValue(::grpc::ClientContext* context, const ::grep11::GetAttributeValueRequest& request, ::grep11::GetAttributeValueResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GetAttributeValueResponse>> AsyncGetAttributeValue(::grpc::ClientContext* context, const ::grep11::GetAttributeValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GetAttributeValueResponse>>(AsyncGetAttributeValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GetAttributeValueResponse>> PrepareAsyncGetAttributeValue(::grpc::ClientContext* context, const ::grep11::GetAttributeValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::GetAttributeValueResponse>>(PrepareAsyncGetAttributeValueRaw(context, request, cq));
    }
    ::grpc::Status SetAttributeValue(::grpc::ClientContext* context, const ::grep11::SetAttributeValueRequest& request, ::grep11::SetAttributeValueResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SetAttributeValueResponse>> AsyncSetAttributeValue(::grpc::ClientContext* context, const ::grep11::SetAttributeValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SetAttributeValueResponse>>(AsyncSetAttributeValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SetAttributeValueResponse>> PrepareAsyncSetAttributeValue(::grpc::ClientContext* context, const ::grep11::SetAttributeValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::grep11::SetAttributeValueResponse>>(PrepareAsyncSetAttributeValueRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GenerateRandom(::grpc::ClientContext* context, const ::grep11::GenerateRandomRequest* request, ::grep11::GenerateRandomResponse* response, std::function<void(::grpc::Status)>) override;
      void GenerateRandom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GenerateRandomResponse* response, std::function<void(::grpc::Status)>) override;
      void GenerateRandom(::grpc::ClientContext* context, const ::grep11::GenerateRandomRequest* request, ::grep11::GenerateRandomResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GenerateRandom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GenerateRandomResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DigestInit(::grpc::ClientContext* context, const ::grep11::DigestInitRequest* request, ::grep11::DigestInitResponse* response, std::function<void(::grpc::Status)>) override;
      void DigestInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestInitResponse* response, std::function<void(::grpc::Status)>) override;
      void DigestInit(::grpc::ClientContext* context, const ::grep11::DigestInitRequest* request, ::grep11::DigestInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DigestInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Digest(::grpc::ClientContext* context, const ::grep11::DigestRequest* request, ::grep11::DigestResponse* response, std::function<void(::grpc::Status)>) override;
      void Digest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestResponse* response, std::function<void(::grpc::Status)>) override;
      void Digest(::grpc::ClientContext* context, const ::grep11::DigestRequest* request, ::grep11::DigestResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Digest(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DigestUpdate(::grpc::ClientContext* context, const ::grep11::DigestUpdateRequest* request, ::grep11::DigestUpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void DigestUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestUpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void DigestUpdate(::grpc::ClientContext* context, const ::grep11::DigestUpdateRequest* request, ::grep11::DigestUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DigestUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DigestKey(::grpc::ClientContext* context, const ::grep11::DigestKeyRequest* request, ::grep11::DigestKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void DigestKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void DigestKey(::grpc::ClientContext* context, const ::grep11::DigestKeyRequest* request, ::grep11::DigestKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DigestKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DigestFinal(::grpc::ClientContext* context, const ::grep11::DigestFinalRequest* request, ::grep11::DigestFinalResponse* response, std::function<void(::grpc::Status)>) override;
      void DigestFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestFinalResponse* response, std::function<void(::grpc::Status)>) override;
      void DigestFinal(::grpc::ClientContext* context, const ::grep11::DigestFinalRequest* request, ::grep11::DigestFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DigestFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DigestSingle(::grpc::ClientContext* context, const ::grep11::DigestSingleRequest* request, ::grep11::DigestSingleResponse* response, std::function<void(::grpc::Status)>) override;
      void DigestSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestSingleResponse* response, std::function<void(::grpc::Status)>) override;
      void DigestSingle(::grpc::ClientContext* context, const ::grep11::DigestSingleRequest* request, ::grep11::DigestSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DigestSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DigestSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void EncryptInit(::grpc::ClientContext* context, const ::grep11::EncryptInitRequest* request, ::grep11::EncryptInitResponse* response, std::function<void(::grpc::Status)>) override;
      void EncryptInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptInitResponse* response, std::function<void(::grpc::Status)>) override;
      void EncryptInit(::grpc::ClientContext* context, const ::grep11::EncryptInitRequest* request, ::grep11::EncryptInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void EncryptInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DecryptInit(::grpc::ClientContext* context, const ::grep11::DecryptInitRequest* request, ::grep11::DecryptInitResponse* response, std::function<void(::grpc::Status)>) override;
      void DecryptInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptInitResponse* response, std::function<void(::grpc::Status)>) override;
      void DecryptInit(::grpc::ClientContext* context, const ::grep11::DecryptInitRequest* request, ::grep11::DecryptInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DecryptInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void EncryptUpdate(::grpc::ClientContext* context, const ::grep11::EncryptUpdateRequest* request, ::grep11::EncryptUpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void EncryptUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptUpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void EncryptUpdate(::grpc::ClientContext* context, const ::grep11::EncryptUpdateRequest* request, ::grep11::EncryptUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void EncryptUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DecryptUpdate(::grpc::ClientContext* context, const ::grep11::DecryptUpdateRequest* request, ::grep11::DecryptUpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void DecryptUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptUpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void DecryptUpdate(::grpc::ClientContext* context, const ::grep11::DecryptUpdateRequest* request, ::grep11::DecryptUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DecryptUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Encrypt(::grpc::ClientContext* context, const ::grep11::EncryptRequest* request, ::grep11::EncryptResponse* response, std::function<void(::grpc::Status)>) override;
      void Encrypt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptResponse* response, std::function<void(::grpc::Status)>) override;
      void Encrypt(::grpc::ClientContext* context, const ::grep11::EncryptRequest* request, ::grep11::EncryptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Encrypt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Decrypt(::grpc::ClientContext* context, const ::grep11::DecryptRequest* request, ::grep11::DecryptResponse* response, std::function<void(::grpc::Status)>) override;
      void Decrypt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptResponse* response, std::function<void(::grpc::Status)>) override;
      void Decrypt(::grpc::ClientContext* context, const ::grep11::DecryptRequest* request, ::grep11::DecryptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Decrypt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void EncryptFinal(::grpc::ClientContext* context, const ::grep11::EncryptFinalRequest* request, ::grep11::EncryptFinalResponse* response, std::function<void(::grpc::Status)>) override;
      void EncryptFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptFinalResponse* response, std::function<void(::grpc::Status)>) override;
      void EncryptFinal(::grpc::ClientContext* context, const ::grep11::EncryptFinalRequest* request, ::grep11::EncryptFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void EncryptFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DecryptFinal(::grpc::ClientContext* context, const ::grep11::DecryptFinalRequest* request, ::grep11::DecryptFinalResponse* response, std::function<void(::grpc::Status)>) override;
      void DecryptFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptFinalResponse* response, std::function<void(::grpc::Status)>) override;
      void DecryptFinal(::grpc::ClientContext* context, const ::grep11::DecryptFinalRequest* request, ::grep11::DecryptFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DecryptFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void EncryptSingle(::grpc::ClientContext* context, const ::grep11::EncryptSingleRequest* request, ::grep11::EncryptSingleResponse* response, std::function<void(::grpc::Status)>) override;
      void EncryptSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptSingleResponse* response, std::function<void(::grpc::Status)>) override;
      void EncryptSingle(::grpc::ClientContext* context, const ::grep11::EncryptSingleRequest* request, ::grep11::EncryptSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void EncryptSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::EncryptSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DecryptSingle(::grpc::ClientContext* context, const ::grep11::DecryptSingleRequest* request, ::grep11::DecryptSingleResponse* response, std::function<void(::grpc::Status)>) override;
      void DecryptSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptSingleResponse* response, std::function<void(::grpc::Status)>) override;
      void DecryptSingle(::grpc::ClientContext* context, const ::grep11::DecryptSingleRequest* request, ::grep11::DecryptSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DecryptSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DecryptSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SignInit(::grpc::ClientContext* context, const ::grep11::SignInitRequest* request, ::grep11::SignInitResponse* response, std::function<void(::grpc::Status)>) override;
      void SignInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignInitResponse* response, std::function<void(::grpc::Status)>) override;
      void SignInit(::grpc::ClientContext* context, const ::grep11::SignInitRequest* request, ::grep11::SignInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SignInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void VerifyInit(::grpc::ClientContext* context, const ::grep11::VerifyInitRequest* request, ::grep11::VerifyInitResponse* response, std::function<void(::grpc::Status)>) override;
      void VerifyInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyInitResponse* response, std::function<void(::grpc::Status)>) override;
      void VerifyInit(::grpc::ClientContext* context, const ::grep11::VerifyInitRequest* request, ::grep11::VerifyInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void VerifyInit(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyInitResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SignUpdate(::grpc::ClientContext* context, const ::grep11::SignUpdateRequest* request, ::grep11::SignUpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void SignUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignUpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void SignUpdate(::grpc::ClientContext* context, const ::grep11::SignUpdateRequest* request, ::grep11::SignUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SignUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void VerifyUpdate(::grpc::ClientContext* context, const ::grep11::VerifyUpdateRequest* request, ::grep11::VerifyUpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void VerifyUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyUpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void VerifyUpdate(::grpc::ClientContext* context, const ::grep11::VerifyUpdateRequest* request, ::grep11::VerifyUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void VerifyUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SignFinal(::grpc::ClientContext* context, const ::grep11::SignFinalRequest* request, ::grep11::SignFinalResponse* response, std::function<void(::grpc::Status)>) override;
      void SignFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignFinalResponse* response, std::function<void(::grpc::Status)>) override;
      void SignFinal(::grpc::ClientContext* context, const ::grep11::SignFinalRequest* request, ::grep11::SignFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SignFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void VerifyFinal(::grpc::ClientContext* context, const ::grep11::VerifyFinalRequest* request, ::grep11::VerifyFinalResponse* response, std::function<void(::grpc::Status)>) override;
      void VerifyFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyFinalResponse* response, std::function<void(::grpc::Status)>) override;
      void VerifyFinal(::grpc::ClientContext* context, const ::grep11::VerifyFinalRequest* request, ::grep11::VerifyFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void VerifyFinal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyFinalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Sign(::grpc::ClientContext* context, const ::grep11::SignRequest* request, ::grep11::SignResponse* response, std::function<void(::grpc::Status)>) override;
      void Sign(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignResponse* response, std::function<void(::grpc::Status)>) override;
      void Sign(::grpc::ClientContext* context, const ::grep11::SignRequest* request, ::grep11::SignResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Sign(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Verify(::grpc::ClientContext* context, const ::grep11::VerifyRequest* request, ::grep11::VerifyResponse* response, std::function<void(::grpc::Status)>) override;
      void Verify(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyResponse* response, std::function<void(::grpc::Status)>) override;
      void Verify(::grpc::ClientContext* context, const ::grep11::VerifyRequest* request, ::grep11::VerifyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Verify(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SignSingle(::grpc::ClientContext* context, const ::grep11::SignSingleRequest* request, ::grep11::SignSingleResponse* response, std::function<void(::grpc::Status)>) override;
      void SignSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignSingleResponse* response, std::function<void(::grpc::Status)>) override;
      void SignSingle(::grpc::ClientContext* context, const ::grep11::SignSingleRequest* request, ::grep11::SignSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SignSingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SignSingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void VerifySingle(::grpc::ClientContext* context, const ::grep11::VerifySingleRequest* request, ::grep11::VerifySingleResponse* response, std::function<void(::grpc::Status)>) override;
      void VerifySingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifySingleResponse* response, std::function<void(::grpc::Status)>) override;
      void VerifySingle(::grpc::ClientContext* context, const ::grep11::VerifySingleRequest* request, ::grep11::VerifySingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void VerifySingle(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::VerifySingleResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GenerateKey(::grpc::ClientContext* context, const ::grep11::GenerateKeyRequest* request, ::grep11::GenerateKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void GenerateKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GenerateKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void GenerateKey(::grpc::ClientContext* context, const ::grep11::GenerateKeyRequest* request, ::grep11::GenerateKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GenerateKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GenerateKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GenerateKeyPair(::grpc::ClientContext* context, const ::grep11::GenerateKeyPairRequest* request, ::grep11::GenerateKeyPairResponse* response, std::function<void(::grpc::Status)>) override;
      void GenerateKeyPair(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GenerateKeyPairResponse* response, std::function<void(::grpc::Status)>) override;
      void GenerateKeyPair(::grpc::ClientContext* context, const ::grep11::GenerateKeyPairRequest* request, ::grep11::GenerateKeyPairResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GenerateKeyPair(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GenerateKeyPairResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void WrapKey(::grpc::ClientContext* context, const ::grep11::WrapKeyRequest* request, ::grep11::WrapKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void WrapKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::WrapKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void WrapKey(::grpc::ClientContext* context, const ::grep11::WrapKeyRequest* request, ::grep11::WrapKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void WrapKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::WrapKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UnwrapKey(::grpc::ClientContext* context, const ::grep11::UnwrapKeyRequest* request, ::grep11::UnwrapKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void UnwrapKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::UnwrapKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void UnwrapKey(::grpc::ClientContext* context, const ::grep11::UnwrapKeyRequest* request, ::grep11::UnwrapKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UnwrapKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::UnwrapKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeriveKey(::grpc::ClientContext* context, const ::grep11::DeriveKeyRequest* request, ::grep11::DeriveKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void DeriveKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DeriveKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void DeriveKey(::grpc::ClientContext* context, const ::grep11::DeriveKeyRequest* request, ::grep11::DeriveKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeriveKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::DeriveKeyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetMechanismList(::grpc::ClientContext* context, const ::grep11::GetMechanismListRequest* request, ::grep11::GetMechanismListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMechanismList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GetMechanismListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMechanismList(::grpc::ClientContext* context, const ::grep11::GetMechanismListRequest* request, ::grep11::GetMechanismListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetMechanismList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GetMechanismListResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetMechanismInfo(::grpc::ClientContext* context, const ::grep11::GetMechanismInfoRequest* request, ::grep11::GetMechanismInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMechanismInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GetMechanismInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMechanismInfo(::grpc::ClientContext* context, const ::grep11::GetMechanismInfoRequest* request, ::grep11::GetMechanismInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetMechanismInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GetMechanismInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetAttributeValue(::grpc::ClientContext* context, const ::grep11::GetAttributeValueRequest* request, ::grep11::GetAttributeValueResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAttributeValue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GetAttributeValueResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAttributeValue(::grpc::ClientContext* context, const ::grep11::GetAttributeValueRequest* request, ::grep11::GetAttributeValueResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetAttributeValue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::GetAttributeValueResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetAttributeValue(::grpc::ClientContext* context, const ::grep11::SetAttributeValueRequest* request, ::grep11::SetAttributeValueResponse* response, std::function<void(::grpc::Status)>) override;
      void SetAttributeValue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SetAttributeValueResponse* response, std::function<void(::grpc::Status)>) override;
      void SetAttributeValue(::grpc::ClientContext* context, const ::grep11::SetAttributeValueRequest* request, ::grep11::SetAttributeValueResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetAttributeValue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::grep11::SetAttributeValueResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::grep11::GenerateRandomResponse>* AsyncGenerateRandomRaw(::grpc::ClientContext* context, const ::grep11::GenerateRandomRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::GenerateRandomResponse>* PrepareAsyncGenerateRandomRaw(::grpc::ClientContext* context, const ::grep11::GenerateRandomRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DigestInitResponse>* AsyncDigestInitRaw(::grpc::ClientContext* context, const ::grep11::DigestInitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DigestInitResponse>* PrepareAsyncDigestInitRaw(::grpc::ClientContext* context, const ::grep11::DigestInitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DigestResponse>* AsyncDigestRaw(::grpc::ClientContext* context, const ::grep11::DigestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DigestResponse>* PrepareAsyncDigestRaw(::grpc::ClientContext* context, const ::grep11::DigestRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DigestUpdateResponse>* AsyncDigestUpdateRaw(::grpc::ClientContext* context, const ::grep11::DigestUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DigestUpdateResponse>* PrepareAsyncDigestUpdateRaw(::grpc::ClientContext* context, const ::grep11::DigestUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DigestKeyResponse>* AsyncDigestKeyRaw(::grpc::ClientContext* context, const ::grep11::DigestKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DigestKeyResponse>* PrepareAsyncDigestKeyRaw(::grpc::ClientContext* context, const ::grep11::DigestKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DigestFinalResponse>* AsyncDigestFinalRaw(::grpc::ClientContext* context, const ::grep11::DigestFinalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DigestFinalResponse>* PrepareAsyncDigestFinalRaw(::grpc::ClientContext* context, const ::grep11::DigestFinalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DigestSingleResponse>* AsyncDigestSingleRaw(::grpc::ClientContext* context, const ::grep11::DigestSingleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DigestSingleResponse>* PrepareAsyncDigestSingleRaw(::grpc::ClientContext* context, const ::grep11::DigestSingleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::EncryptInitResponse>* AsyncEncryptInitRaw(::grpc::ClientContext* context, const ::grep11::EncryptInitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::EncryptInitResponse>* PrepareAsyncEncryptInitRaw(::grpc::ClientContext* context, const ::grep11::EncryptInitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DecryptInitResponse>* AsyncDecryptInitRaw(::grpc::ClientContext* context, const ::grep11::DecryptInitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DecryptInitResponse>* PrepareAsyncDecryptInitRaw(::grpc::ClientContext* context, const ::grep11::DecryptInitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::EncryptUpdateResponse>* AsyncEncryptUpdateRaw(::grpc::ClientContext* context, const ::grep11::EncryptUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::EncryptUpdateResponse>* PrepareAsyncEncryptUpdateRaw(::grpc::ClientContext* context, const ::grep11::EncryptUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DecryptUpdateResponse>* AsyncDecryptUpdateRaw(::grpc::ClientContext* context, const ::grep11::DecryptUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DecryptUpdateResponse>* PrepareAsyncDecryptUpdateRaw(::grpc::ClientContext* context, const ::grep11::DecryptUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::EncryptResponse>* AsyncEncryptRaw(::grpc::ClientContext* context, const ::grep11::EncryptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::EncryptResponse>* PrepareAsyncEncryptRaw(::grpc::ClientContext* context, const ::grep11::EncryptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DecryptResponse>* AsyncDecryptRaw(::grpc::ClientContext* context, const ::grep11::DecryptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DecryptResponse>* PrepareAsyncDecryptRaw(::grpc::ClientContext* context, const ::grep11::DecryptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::EncryptFinalResponse>* AsyncEncryptFinalRaw(::grpc::ClientContext* context, const ::grep11::EncryptFinalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::EncryptFinalResponse>* PrepareAsyncEncryptFinalRaw(::grpc::ClientContext* context, const ::grep11::EncryptFinalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DecryptFinalResponse>* AsyncDecryptFinalRaw(::grpc::ClientContext* context, const ::grep11::DecryptFinalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DecryptFinalResponse>* PrepareAsyncDecryptFinalRaw(::grpc::ClientContext* context, const ::grep11::DecryptFinalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::EncryptSingleResponse>* AsyncEncryptSingleRaw(::grpc::ClientContext* context, const ::grep11::EncryptSingleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::EncryptSingleResponse>* PrepareAsyncEncryptSingleRaw(::grpc::ClientContext* context, const ::grep11::EncryptSingleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DecryptSingleResponse>* AsyncDecryptSingleRaw(::grpc::ClientContext* context, const ::grep11::DecryptSingleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DecryptSingleResponse>* PrepareAsyncDecryptSingleRaw(::grpc::ClientContext* context, const ::grep11::DecryptSingleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::SignInitResponse>* AsyncSignInitRaw(::grpc::ClientContext* context, const ::grep11::SignInitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::SignInitResponse>* PrepareAsyncSignInitRaw(::grpc::ClientContext* context, const ::grep11::SignInitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::VerifyInitResponse>* AsyncVerifyInitRaw(::grpc::ClientContext* context, const ::grep11::VerifyInitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::VerifyInitResponse>* PrepareAsyncVerifyInitRaw(::grpc::ClientContext* context, const ::grep11::VerifyInitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::SignUpdateResponse>* AsyncSignUpdateRaw(::grpc::ClientContext* context, const ::grep11::SignUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::SignUpdateResponse>* PrepareAsyncSignUpdateRaw(::grpc::ClientContext* context, const ::grep11::SignUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::VerifyUpdateResponse>* AsyncVerifyUpdateRaw(::grpc::ClientContext* context, const ::grep11::VerifyUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::VerifyUpdateResponse>* PrepareAsyncVerifyUpdateRaw(::grpc::ClientContext* context, const ::grep11::VerifyUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::SignFinalResponse>* AsyncSignFinalRaw(::grpc::ClientContext* context, const ::grep11::SignFinalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::SignFinalResponse>* PrepareAsyncSignFinalRaw(::grpc::ClientContext* context, const ::grep11::SignFinalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::VerifyFinalResponse>* AsyncVerifyFinalRaw(::grpc::ClientContext* context, const ::grep11::VerifyFinalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::VerifyFinalResponse>* PrepareAsyncVerifyFinalRaw(::grpc::ClientContext* context, const ::grep11::VerifyFinalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::SignResponse>* AsyncSignRaw(::grpc::ClientContext* context, const ::grep11::SignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::SignResponse>* PrepareAsyncSignRaw(::grpc::ClientContext* context, const ::grep11::SignRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::VerifyResponse>* AsyncVerifyRaw(::grpc::ClientContext* context, const ::grep11::VerifyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::VerifyResponse>* PrepareAsyncVerifyRaw(::grpc::ClientContext* context, const ::grep11::VerifyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::SignSingleResponse>* AsyncSignSingleRaw(::grpc::ClientContext* context, const ::grep11::SignSingleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::SignSingleResponse>* PrepareAsyncSignSingleRaw(::grpc::ClientContext* context, const ::grep11::SignSingleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::VerifySingleResponse>* AsyncVerifySingleRaw(::grpc::ClientContext* context, const ::grep11::VerifySingleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::VerifySingleResponse>* PrepareAsyncVerifySingleRaw(::grpc::ClientContext* context, const ::grep11::VerifySingleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::GenerateKeyResponse>* AsyncGenerateKeyRaw(::grpc::ClientContext* context, const ::grep11::GenerateKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::GenerateKeyResponse>* PrepareAsyncGenerateKeyRaw(::grpc::ClientContext* context, const ::grep11::GenerateKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::GenerateKeyPairResponse>* AsyncGenerateKeyPairRaw(::grpc::ClientContext* context, const ::grep11::GenerateKeyPairRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::GenerateKeyPairResponse>* PrepareAsyncGenerateKeyPairRaw(::grpc::ClientContext* context, const ::grep11::GenerateKeyPairRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::WrapKeyResponse>* AsyncWrapKeyRaw(::grpc::ClientContext* context, const ::grep11::WrapKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::WrapKeyResponse>* PrepareAsyncWrapKeyRaw(::grpc::ClientContext* context, const ::grep11::WrapKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::UnwrapKeyResponse>* AsyncUnwrapKeyRaw(::grpc::ClientContext* context, const ::grep11::UnwrapKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::UnwrapKeyResponse>* PrepareAsyncUnwrapKeyRaw(::grpc::ClientContext* context, const ::grep11::UnwrapKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DeriveKeyResponse>* AsyncDeriveKeyRaw(::grpc::ClientContext* context, const ::grep11::DeriveKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::DeriveKeyResponse>* PrepareAsyncDeriveKeyRaw(::grpc::ClientContext* context, const ::grep11::DeriveKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::GetMechanismListResponse>* AsyncGetMechanismListRaw(::grpc::ClientContext* context, const ::grep11::GetMechanismListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::GetMechanismListResponse>* PrepareAsyncGetMechanismListRaw(::grpc::ClientContext* context, const ::grep11::GetMechanismListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::GetMechanismInfoResponse>* AsyncGetMechanismInfoRaw(::grpc::ClientContext* context, const ::grep11::GetMechanismInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::GetMechanismInfoResponse>* PrepareAsyncGetMechanismInfoRaw(::grpc::ClientContext* context, const ::grep11::GetMechanismInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::GetAttributeValueResponse>* AsyncGetAttributeValueRaw(::grpc::ClientContext* context, const ::grep11::GetAttributeValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::GetAttributeValueResponse>* PrepareAsyncGetAttributeValueRaw(::grpc::ClientContext* context, const ::grep11::GetAttributeValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::SetAttributeValueResponse>* AsyncSetAttributeValueRaw(::grpc::ClientContext* context, const ::grep11::SetAttributeValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::grep11::SetAttributeValueResponse>* PrepareAsyncSetAttributeValueRaw(::grpc::ClientContext* context, const ::grep11::SetAttributeValueRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateRandom_;
    const ::grpc::internal::RpcMethod rpcmethod_DigestInit_;
    const ::grpc::internal::RpcMethod rpcmethod_Digest_;
    const ::grpc::internal::RpcMethod rpcmethod_DigestUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_DigestKey_;
    const ::grpc::internal::RpcMethod rpcmethod_DigestFinal_;
    const ::grpc::internal::RpcMethod rpcmethod_DigestSingle_;
    const ::grpc::internal::RpcMethod rpcmethod_EncryptInit_;
    const ::grpc::internal::RpcMethod rpcmethod_DecryptInit_;
    const ::grpc::internal::RpcMethod rpcmethod_EncryptUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_DecryptUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_Encrypt_;
    const ::grpc::internal::RpcMethod rpcmethod_Decrypt_;
    const ::grpc::internal::RpcMethod rpcmethod_EncryptFinal_;
    const ::grpc::internal::RpcMethod rpcmethod_DecryptFinal_;
    const ::grpc::internal::RpcMethod rpcmethod_EncryptSingle_;
    const ::grpc::internal::RpcMethod rpcmethod_DecryptSingle_;
    const ::grpc::internal::RpcMethod rpcmethod_SignInit_;
    const ::grpc::internal::RpcMethod rpcmethod_VerifyInit_;
    const ::grpc::internal::RpcMethod rpcmethod_SignUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_VerifyUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_SignFinal_;
    const ::grpc::internal::RpcMethod rpcmethod_VerifyFinal_;
    const ::grpc::internal::RpcMethod rpcmethod_Sign_;
    const ::grpc::internal::RpcMethod rpcmethod_Verify_;
    const ::grpc::internal::RpcMethod rpcmethod_SignSingle_;
    const ::grpc::internal::RpcMethod rpcmethod_VerifySingle_;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateKey_;
    const ::grpc::internal::RpcMethod rpcmethod_GenerateKeyPair_;
    const ::grpc::internal::RpcMethod rpcmethod_WrapKey_;
    const ::grpc::internal::RpcMethod rpcmethod_UnwrapKey_;
    const ::grpc::internal::RpcMethod rpcmethod_DeriveKey_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMechanismList_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMechanismInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAttributeValue_;
    const ::grpc::internal::RpcMethod rpcmethod_SetAttributeValue_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // CK_RV m_GenerateRandom (
    //     CK_BYTE_PTR rnd, CK_ULONG rndlen,
    //     target_t target) ;
    virtual ::grpc::Status GenerateRandom(::grpc::ServerContext* context, const ::grep11::GenerateRandomRequest* request, ::grep11::GenerateRandomResponse* response);
    // CK_RV m_DigestInit (
    //     unsigned char *state, size_t *statelen,
    //     const CK_MECHANISM_PTR mech,
    //     target_t target) ;
    virtual ::grpc::Status DigestInit(::grpc::ServerContext* context, const ::grep11::DigestInitRequest* request, ::grep11::DigestInitResponse* response);
    // CK_RV m_Digest (
    //     const unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR data, CK_ULONG datalen,
    //     CK_BYTE_PTR digest, CK_ULONG_PTR digestlen,
    //     target_t target) ;
    virtual ::grpc::Status Digest(::grpc::ServerContext* context, const ::grep11::DigestRequest* request, ::grep11::DigestResponse* response);
    // CK_RV m_DigestUpdate (
    //     unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR data, CK_ULONG datalen,
    //     target_t target) ;
    virtual ::grpc::Status DigestUpdate(::grpc::ServerContext* context, const ::grep11::DigestUpdateRequest* request, ::grep11::DigestUpdateResponse* response);
    // CK_RV m_DigestKey (
    //     unsigned char *state, size_t statelen,
    //     const unsigned char *key, size_t keylen,
    //     target_t target) ;
    virtual ::grpc::Status DigestKey(::grpc::ServerContext* context, const ::grep11::DigestKeyRequest* request, ::grep11::DigestKeyResponse* response);
    // CK_RV m_DigestFinal (
    //     const unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR digest, CK_ULONG_PTR digestlen,
    //     target_t target) ;
    virtual ::grpc::Status DigestFinal(::grpc::ServerContext* context, const ::grep11::DigestFinalRequest* request, ::grep11::DigestFinalResponse* response);
    // CK_RV m_DigestSingle (
    //     CK_MECHANISM_PTR mech,
    //     CK_BYTE_PTR data, CK_ULONG datalen,
    //     CK_BYTE_PTR digest, CK_ULONG_PTR digestlen,
    //     target_t target) ;
    virtual ::grpc::Status DigestSingle(::grpc::ServerContext* context, const ::grep11::DigestSingleRequest* request, ::grep11::DigestSingleResponse* response);
    // CK_RV m_EncryptInit (
    //     unsigned char *state, size_t *statelen,
    //     CK_MECHANISM_PTR mech,
    //     const unsigned char *key, size_t keylen,
    //     target_t target) ;
    virtual ::grpc::Status EncryptInit(::grpc::ServerContext* context, const ::grep11::EncryptInitRequest* request, ::grep11::EncryptInitResponse* response);
    // CK_RV m_DecryptInit (
    //     unsigned char *state, size_t *statelen,
    //     CK_MECHANISM_PTR mech,
    //     const unsigned char *key, size_t keylen,
    //     target_t target) ;
    virtual ::grpc::Status DecryptInit(::grpc::ServerContext* context, const ::grep11::DecryptInitRequest* request, ::grep11::DecryptInitResponse* response);
    // CK_RV m_EncryptUpdate (
    //     unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR plain, CK_ULONG plainlen,
    //     CK_BYTE_PTR ciphered, CK_ULONG_PTR cipheredlen,
    //     target_t target) ;
    virtual ::grpc::Status EncryptUpdate(::grpc::ServerContext* context, const ::grep11::EncryptUpdateRequest* request, ::grep11::EncryptUpdateResponse* response);
    // CK_RV m_DecryptUpdate (
    //     unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR ciphered, CK_ULONG cipheredlen,
    //     CK_BYTE_PTR plain, CK_ULONG_PTR plainlen,
    //     target_t target) ;
    virtual ::grpc::Status DecryptUpdate(::grpc::ServerContext* context, const ::grep11::DecryptUpdateRequest* request, ::grep11::DecryptUpdateResponse* response);
    // CK_RV m_Encrypt (
    //     const unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR plain, CK_ULONG plainlen,
    //     CK_BYTE_PTR ciphered, CK_ULONG_PTR cipheredlen,
    //     target_t target) ;
    virtual ::grpc::Status Encrypt(::grpc::ServerContext* context, const ::grep11::EncryptRequest* request, ::grep11::EncryptResponse* response);
    // CK_RV m_Decrypt (
    //     const unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR ciphered, CK_ULONG cipheredlen,
    //     CK_BYTE_PTR plain, CK_ULONG_PTR plainlen,
    //     target_t target) ;
    virtual ::grpc::Status Decrypt(::grpc::ServerContext* context, const ::grep11::DecryptRequest* request, ::grep11::DecryptResponse* response);
    // CK_RV m_EncryptFinal (
    //     const unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR ciphered, CK_ULONG_PTR cipheredlen,
    //     target_t target) ;
    virtual ::grpc::Status EncryptFinal(::grpc::ServerContext* context, const ::grep11::EncryptFinalRequest* request, ::grep11::EncryptFinalResponse* response);
    // CK_RV m_DecryptFinal (
    //     const unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR plain, CK_ULONG_PTR plainlen,
    //     target_t target) ;
    virtual ::grpc::Status DecryptFinal(::grpc::ServerContext* context, const ::grep11::DecryptFinalRequest* request, ::grep11::DecryptFinalResponse* response);
    // CK_RV m_EncryptSingle (
    //     const unsigned char *key, size_t keylen,
    //     CK_MECHANISM_PTR mech,
    //     CK_BYTE_PTR plain, CK_ULONG plainlen,
    //     CK_BYTE_PTR ciphered, CK_ULONG_PTR cipheredlen,
    //     target_t target) ;
    virtual ::grpc::Status EncryptSingle(::grpc::ServerContext* context, const ::grep11::EncryptSingleRequest* request, ::grep11::EncryptSingleResponse* response);
    // CK_RV m_DecryptSingle (
    //     const unsigned char *key, size_t keylen,
    //     CK_MECHANISM_PTR mech,
    //     CK_BYTE_PTR ciphered, CK_ULONG cipheredlen,
    //     CK_BYTE_PTR plain, CK_ULONG_PTR plainlen,
    //     target_t target) ;
    virtual ::grpc::Status DecryptSingle(::grpc::ServerContext* context, const ::grep11::DecryptSingleRequest* request, ::grep11::DecryptSingleResponse* response);
    // CK_RV m_SignInit (
    //     unsigned char *state, size_t *statelen,
    //     CK_MECHANISM_PTR mech,
    //     const unsigned char *privKey, size_t privKeylen,
    //     target_t target) ;
    virtual ::grpc::Status SignInit(::grpc::ServerContext* context, const ::grep11::SignInitRequest* request, ::grep11::SignInitResponse* response);
    // CK_RV m_VerifyInit (
    //     unsigned char *state, size_t *statelen,
    //     CK_MECHANISM_PTR mech,
    //     const unsigned char *pubKey, size_t pubKeylen,
    //     target_t target) ;
    virtual ::grpc::Status VerifyInit(::grpc::ServerContext* context, const ::grep11::VerifyInitRequest* request, ::grep11::VerifyInitResponse* response);
    // CK_RV m_SignUpdate (
    //     unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR data, CK_ULONG datalen,
    //     target_t target) ;
    virtual ::grpc::Status SignUpdate(::grpc::ServerContext* context, const ::grep11::SignUpdateRequest* request, ::grep11::SignUpdateResponse* response);
    // CK_RV m_VerifyUpdate (
    //     unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR data, CK_ULONG datalen,
    //     target_t target) ;
    virtual ::grpc::Status VerifyUpdate(::grpc::ServerContext* context, const ::grep11::VerifyUpdateRequest* request, ::grep11::VerifyUpdateResponse* response);
    // CK_RV m_SignFinal (
    //     const unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR signature, CK_ULONG_PTR signaturelen,
    //     target_t target) ;
    virtual ::grpc::Status SignFinal(::grpc::ServerContext* context, const ::grep11::SignFinalRequest* request, ::grep11::SignFinalResponse* response);
    // CK_RV m_VerifyFinal (
    //     const unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR signature, CK_ULONG signaturelen,
    //     target_t target) ;
    virtual ::grpc::Status VerifyFinal(::grpc::ServerContext* context, const ::grep11::VerifyFinalRequest* request, ::grep11::VerifyFinalResponse* response);
    // CK_RV m_Sign (
    //     const unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR data, CK_ULONG datalen,
    //     CK_BYTE_PTR signature, CK_ULONG_PTR signaturelen,
    //     target_t target) ;
    virtual ::grpc::Status Sign(::grpc::ServerContext* context, const ::grep11::SignRequest* request, ::grep11::SignResponse* response);
    // CK_RV m_Verify (
    //     const unsigned char *state, size_t statelen,
    //     CK_BYTE_PTR data, CK_ULONG datalen,
    //     CK_BYTE_PTR signature, CK_ULONG signaturelen,
    //     target_t target) ;
    virtual ::grpc::Status Verify(::grpc::ServerContext* context, const ::grep11::VerifyRequest* request, ::grep11::VerifyResponse* response);
    // CK_RV m_SignSingle (
    //     const unsigned char *privKey, size_t privKeylen,
    //     CK_MECHANISM_PTR mech,
    //     CK_BYTE_PTR data, CK_ULONG datalen,
    //     CK_BYTE_PTR signature, CK_ULONG_PTR signaturelen,
    //     target_t target) ;
    virtual ::grpc::Status SignSingle(::grpc::ServerContext* context, const ::grep11::SignSingleRequest* request, ::grep11::SignSingleResponse* response);
    // CK_RV m_VerifySingle (
    //     const unsigned char *pubKey, size_t pubKeylen,
    //     CK_MECHANISM_PTR mech,
    //     CK_BYTE_PTR data, CK_ULONG datalen,
    //     CK_BYTE_PTR signature, CK_ULONG signaturelen,
    //     target_t target) ;
    virtual ::grpc::Status VerifySingle(::grpc::ServerContext* context, const ::grep11::VerifySingleRequest* request, ::grep11::VerifySingleResponse* response);
    // CK_RV m_GenerateKey (
    //     CK_MECHANISM_PTR mech,
    //     CK_ATTRIBUTE_PTR template, CK_ULONG templatelen,
    //     const unsigned char *pin, size_t pinlen,
    //     unsigned char *key, size_t *keylen,
    //     unsigned char *checkSum, size_t *checkSumlen,
    //     target_t target) ;
    virtual ::grpc::Status GenerateKey(::grpc::ServerContext* context, const ::grep11::GenerateKeyRequest* request, ::grep11::GenerateKeyResponse* response);
    // CK_RV m_GenerateKeyPair (
    //     CK_MECHANISM_PTR mech,
    //     CK_ATTRIBUTE_PTR pubKeyTemplate, CK_ULONG pubKeyTemplatelen,
    //     CK_ATTRIBUTE_PTR privKeyTemplate, CK_ULONG privKeyTemplatelen,
    //     const unsigned char *pin, size_t pinlen,
    //     unsigned char *privKey, size_t *privKeylen,
    //     unsigned char *pubKey, size_t *pubKeylen,
    //     target_t target) ;
    virtual ::grpc::Status GenerateKeyPair(::grpc::ServerContext* context, const ::grep11::GenerateKeyPairRequest* request, ::grep11::GenerateKeyPairResponse* response);
    // CK_RV m_WrapKey (
    //     const unsigned char *key, size_t keylen,
    //     const unsigned char *keK, size_t keKlen,
    //     const unsigned char *macKey, size_t macKeylen,
    //     const CK_MECHANISM_PTR mech,
    //     CK_BYTE_PTR wrapped, CK_ULONG_PTR wrappedlen,
    //     target_t target) ;
    virtual ::grpc::Status WrapKey(::grpc::ServerContext* context, const ::grep11::WrapKeyRequest* request, ::grep11::WrapKeyResponse* response);
    // CK_RV m_UnwrapKey (
    //     const CK_BYTE_PTR wrapped, CK_ULONG wrappedlen,
    //     const unsigned char *keK, size_t keKlen,
    //     const unsigned char *macKey, size_t macKeylen,
    //     const unsigned char *pin, size_t pinlen,
    //     const CK_MECHANISM_PTR mech,
    //     const CK_ATTRIBUTE_PTR template, CK_ULONG templatelen,
    //     unsigned char *unwrapped, size_t *unwrappedlen,
    //     CK_BYTE_PTR checkSum, CK_ULONG *checkSumlen,
    //     target_t target) ;
    virtual ::grpc::Status UnwrapKey(::grpc::ServerContext* context, const ::grep11::UnwrapKeyRequest* request, ::grep11::UnwrapKeyResponse* response);
    // CK_RV m_DeriveKey (
    //     CK_MECHANISM_PTR mech,
    //     CK_ATTRIBUTE_PTR template, CK_ULONG templatelen,
    //     const unsigned char *baseKey, size_t baseKeylen,
    //     const unsigned char *data, size_t datalen,
    //     const unsigned char *pin, size_t pinlen,
    //     unsigned char *newKey, size_t *newKeylen,
    //     unsigned char *checkSum, size_t *checkSumlen,
    //     target_t target) ;
    virtual ::grpc::Status DeriveKey(::grpc::ServerContext* context, const ::grep11::DeriveKeyRequest* request, ::grep11::DeriveKeyResponse* response);
    // CK_RV m_GetMechanismList (
    //     CK_SLOT_ID slot,
    //     CK_MECHANISM_TYPE_PTR mechs, CK_ULONG_PTR mechslen,
    //     target_t target) ;
    virtual ::grpc::Status GetMechanismList(::grpc::ServerContext* context, const ::grep11::GetMechanismListRequest* request, ::grep11::GetMechanismListResponse* response);
    // CK_RV m_GetMechanismInfo (
    //     CK_SLOT_ID slot,
    //     CK_MECHANISM_TYPE mech,
    //     CK_MECHANISM_INFO_PTR mechInfo,
    //     target_t target) ;
    virtual ::grpc::Status GetMechanismInfo(::grpc::ServerContext* context, const ::grep11::GetMechanismInfoRequest* request, ::grep11::GetMechanismInfoResponse* response);
    // CK_RV m_GetAttributeValue (
    //     const unsigned char *object, size_t objectlen,
    //     CK_ATTRIBUTE_PTR attributes, CK_ULONG attributeslen,
    //     target_t target) ;
    virtual ::grpc::Status GetAttributeValue(::grpc::ServerContext* context, const ::grep11::GetAttributeValueRequest* request, ::grep11::GetAttributeValueResponse* response);
    // CK_RV m_SetAttributeValue (
    //     unsigned char *object, size_t objectlen,
    //     CK_ATTRIBUTE_PTR attributes, CK_ULONG attributeslen,
    //     target_t target) ;
    virtual ::grpc::Status SetAttributeValue(::grpc::ServerContext* context, const ::grep11::SetAttributeValueRequest* request, ::grep11::SetAttributeValueResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateRandom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GenerateRandom() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GenerateRandom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateRandom(::grpc::ServerContext* context, const ::grep11::GenerateRandomRequest* request, ::grep11::GenerateRandomResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateRandom(::grpc::ServerContext* context, ::grep11::GenerateRandomRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::GenerateRandomResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DigestInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DigestInit() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DigestInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestInit(::grpc::ServerContext* context, const ::grep11::DigestInitRequest* request, ::grep11::DigestInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDigestInit(::grpc::ServerContext* context, ::grep11::DigestInitRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::DigestInitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Digest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Digest() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Digest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Digest(::grpc::ServerContext* context, const ::grep11::DigestRequest* request, ::grep11::DigestResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDigest(::grpc::ServerContext* context, ::grep11::DigestRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::DigestResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DigestUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DigestUpdate() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DigestUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestUpdate(::grpc::ServerContext* context, const ::grep11::DigestUpdateRequest* request, ::grep11::DigestUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDigestUpdate(::grpc::ServerContext* context, ::grep11::DigestUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::DigestUpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DigestKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DigestKey() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DigestKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestKey(::grpc::ServerContext* context, const ::grep11::DigestKeyRequest* request, ::grep11::DigestKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDigestKey(::grpc::ServerContext* context, ::grep11::DigestKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::DigestKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DigestFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DigestFinal() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DigestFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestFinal(::grpc::ServerContext* context, const ::grep11::DigestFinalRequest* request, ::grep11::DigestFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDigestFinal(::grpc::ServerContext* context, ::grep11::DigestFinalRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::DigestFinalResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DigestSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DigestSingle() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DigestSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestSingle(::grpc::ServerContext* context, const ::grep11::DigestSingleRequest* request, ::grep11::DigestSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDigestSingle(::grpc::ServerContext* context, ::grep11::DigestSingleRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::DigestSingleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EncryptInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_EncryptInit() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_EncryptInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptInit(::grpc::ServerContext* context, const ::grep11::EncryptInitRequest* request, ::grep11::EncryptInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncryptInit(::grpc::ServerContext* context, ::grep11::EncryptInitRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::EncryptInitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DecryptInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DecryptInit() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_DecryptInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptInit(::grpc::ServerContext* context, const ::grep11::DecryptInitRequest* request, ::grep11::DecryptInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDecryptInit(::grpc::ServerContext* context, ::grep11::DecryptInitRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::DecryptInitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EncryptUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_EncryptUpdate() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_EncryptUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptUpdate(::grpc::ServerContext* context, const ::grep11::EncryptUpdateRequest* request, ::grep11::EncryptUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncryptUpdate(::grpc::ServerContext* context, ::grep11::EncryptUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::EncryptUpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DecryptUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DecryptUpdate() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_DecryptUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptUpdate(::grpc::ServerContext* context, const ::grep11::DecryptUpdateRequest* request, ::grep11::DecryptUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDecryptUpdate(::grpc::ServerContext* context, ::grep11::DecryptUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::DecryptUpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Encrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Encrypt() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_Encrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Encrypt(::grpc::ServerContext* context, const ::grep11::EncryptRequest* request, ::grep11::EncryptResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncrypt(::grpc::ServerContext* context, ::grep11::EncryptRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::EncryptResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Decrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Decrypt() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_Decrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Decrypt(::grpc::ServerContext* context, const ::grep11::DecryptRequest* request, ::grep11::DecryptResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDecrypt(::grpc::ServerContext* context, ::grep11::DecryptRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::DecryptResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EncryptFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_EncryptFinal() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_EncryptFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptFinal(::grpc::ServerContext* context, const ::grep11::EncryptFinalRequest* request, ::grep11::EncryptFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncryptFinal(::grpc::ServerContext* context, ::grep11::EncryptFinalRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::EncryptFinalResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DecryptFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DecryptFinal() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_DecryptFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptFinal(::grpc::ServerContext* context, const ::grep11::DecryptFinalRequest* request, ::grep11::DecryptFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDecryptFinal(::grpc::ServerContext* context, ::grep11::DecryptFinalRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::DecryptFinalResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EncryptSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_EncryptSingle() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_EncryptSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptSingle(::grpc::ServerContext* context, const ::grep11::EncryptSingleRequest* request, ::grep11::EncryptSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncryptSingle(::grpc::ServerContext* context, ::grep11::EncryptSingleRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::EncryptSingleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DecryptSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DecryptSingle() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_DecryptSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptSingle(::grpc::ServerContext* context, const ::grep11::DecryptSingleRequest* request, ::grep11::DecryptSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDecryptSingle(::grpc::ServerContext* context, ::grep11::DecryptSingleRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::DecryptSingleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SignInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SignInit() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_SignInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignInit(::grpc::ServerContext* context, const ::grep11::SignInitRequest* request, ::grep11::SignInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignInit(::grpc::ServerContext* context, ::grep11::SignInitRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::SignInitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifyInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VerifyInit() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_VerifyInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyInit(::grpc::ServerContext* context, const ::grep11::VerifyInitRequest* request, ::grep11::VerifyInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyInit(::grpc::ServerContext* context, ::grep11::VerifyInitRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::VerifyInitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SignUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SignUpdate() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_SignUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignUpdate(::grpc::ServerContext* context, const ::grep11::SignUpdateRequest* request, ::grep11::SignUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignUpdate(::grpc::ServerContext* context, ::grep11::SignUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::SignUpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifyUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VerifyUpdate() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_VerifyUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyUpdate(::grpc::ServerContext* context, const ::grep11::VerifyUpdateRequest* request, ::grep11::VerifyUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyUpdate(::grpc::ServerContext* context, ::grep11::VerifyUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::VerifyUpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SignFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SignFinal() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_SignFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignFinal(::grpc::ServerContext* context, const ::grep11::SignFinalRequest* request, ::grep11::SignFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignFinal(::grpc::ServerContext* context, ::grep11::SignFinalRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::SignFinalResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifyFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VerifyFinal() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_VerifyFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyFinal(::grpc::ServerContext* context, const ::grep11::VerifyFinalRequest* request, ::grep11::VerifyFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyFinal(::grpc::ServerContext* context, ::grep11::VerifyFinalRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::VerifyFinalResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Sign() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sign(::grpc::ServerContext* context, const ::grep11::SignRequest* request, ::grep11::SignResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSign(::grpc::ServerContext* context, ::grep11::SignRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::SignResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Verify() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* context, const ::grep11::VerifyRequest* request, ::grep11::VerifyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerify(::grpc::ServerContext* context, ::grep11::VerifyRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::VerifyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SignSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SignSingle() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_SignSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignSingle(::grpc::ServerContext* context, const ::grep11::SignSingleRequest* request, ::grep11::SignSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignSingle(::grpc::ServerContext* context, ::grep11::SignSingleRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::SignSingleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifySingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VerifySingle() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_VerifySingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifySingle(::grpc::ServerContext* context, const ::grep11::VerifySingleRequest* request, ::grep11::VerifySingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifySingle(::grpc::ServerContext* context, ::grep11::VerifySingleRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::VerifySingleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GenerateKey() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_GenerateKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateKey(::grpc::ServerContext* context, const ::grep11::GenerateKeyRequest* request, ::grep11::GenerateKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateKey(::grpc::ServerContext* context, ::grep11::GenerateKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::GenerateKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GenerateKeyPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GenerateKeyPair() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_GenerateKeyPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateKeyPair(::grpc::ServerContext* context, const ::grep11::GenerateKeyPairRequest* request, ::grep11::GenerateKeyPairResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateKeyPair(::grpc::ServerContext* context, ::grep11::GenerateKeyPairRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::GenerateKeyPairResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WrapKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_WrapKey() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_WrapKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WrapKey(::grpc::ServerContext* context, const ::grep11::WrapKeyRequest* request, ::grep11::WrapKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrapKey(::grpc::ServerContext* context, ::grep11::WrapKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::WrapKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnwrapKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UnwrapKey() {
      ::grpc::Service::MarkMethodAsync(30);
    }
    ~WithAsyncMethod_UnwrapKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnwrapKey(::grpc::ServerContext* context, const ::grep11::UnwrapKeyRequest* request, ::grep11::UnwrapKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnwrapKey(::grpc::ServerContext* context, ::grep11::UnwrapKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::UnwrapKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeriveKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeriveKey() {
      ::grpc::Service::MarkMethodAsync(31);
    }
    ~WithAsyncMethod_DeriveKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeriveKey(::grpc::ServerContext* context, const ::grep11::DeriveKeyRequest* request, ::grep11::DeriveKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeriveKey(::grpc::ServerContext* context, ::grep11::DeriveKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::DeriveKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMechanismList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetMechanismList() {
      ::grpc::Service::MarkMethodAsync(32);
    }
    ~WithAsyncMethod_GetMechanismList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMechanismList(::grpc::ServerContext* context, const ::grep11::GetMechanismListRequest* request, ::grep11::GetMechanismListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMechanismList(::grpc::ServerContext* context, ::grep11::GetMechanismListRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::GetMechanismListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMechanismInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetMechanismInfo() {
      ::grpc::Service::MarkMethodAsync(33);
    }
    ~WithAsyncMethod_GetMechanismInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMechanismInfo(::grpc::ServerContext* context, const ::grep11::GetMechanismInfoRequest* request, ::grep11::GetMechanismInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMechanismInfo(::grpc::ServerContext* context, ::grep11::GetMechanismInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::GetMechanismInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAttributeValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAttributeValue() {
      ::grpc::Service::MarkMethodAsync(34);
    }
    ~WithAsyncMethod_GetAttributeValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAttributeValue(::grpc::ServerContext* context, const ::grep11::GetAttributeValueRequest* request, ::grep11::GetAttributeValueResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAttributeValue(::grpc::ServerContext* context, ::grep11::GetAttributeValueRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::GetAttributeValueResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAttributeValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SetAttributeValue() {
      ::grpc::Service::MarkMethodAsync(35);
    }
    ~WithAsyncMethod_SetAttributeValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAttributeValue(::grpc::ServerContext* context, const ::grep11::SetAttributeValueRequest* request, ::grep11::SetAttributeValueResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAttributeValue(::grpc::ServerContext* context, ::grep11::SetAttributeValueRequest* request, ::grpc::ServerAsyncResponseWriter< ::grep11::SetAttributeValueResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GenerateRandom<WithAsyncMethod_DigestInit<WithAsyncMethod_Digest<WithAsyncMethod_DigestUpdate<WithAsyncMethod_DigestKey<WithAsyncMethod_DigestFinal<WithAsyncMethod_DigestSingle<WithAsyncMethod_EncryptInit<WithAsyncMethod_DecryptInit<WithAsyncMethod_EncryptUpdate<WithAsyncMethod_DecryptUpdate<WithAsyncMethod_Encrypt<WithAsyncMethod_Decrypt<WithAsyncMethod_EncryptFinal<WithAsyncMethod_DecryptFinal<WithAsyncMethod_EncryptSingle<WithAsyncMethod_DecryptSingle<WithAsyncMethod_SignInit<WithAsyncMethod_VerifyInit<WithAsyncMethod_SignUpdate<WithAsyncMethod_VerifyUpdate<WithAsyncMethod_SignFinal<WithAsyncMethod_VerifyFinal<WithAsyncMethod_Sign<WithAsyncMethod_Verify<WithAsyncMethod_SignSingle<WithAsyncMethod_VerifySingle<WithAsyncMethod_GenerateKey<WithAsyncMethod_GenerateKeyPair<WithAsyncMethod_WrapKey<WithAsyncMethod_UnwrapKey<WithAsyncMethod_DeriveKey<WithAsyncMethod_GetMechanismList<WithAsyncMethod_GetMechanismInfo<WithAsyncMethod_GetAttributeValue<WithAsyncMethod_SetAttributeValue<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GenerateRandom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GenerateRandom() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::GenerateRandomRequest, ::grep11::GenerateRandomResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::GenerateRandomRequest* request,
                 ::grep11::GenerateRandomResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GenerateRandom(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GenerateRandom(
        ::grpc::experimental::MessageAllocator< ::grep11::GenerateRandomRequest, ::grep11::GenerateRandomResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::GenerateRandomRequest, ::grep11::GenerateRandomResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GenerateRandom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateRandom(::grpc::ServerContext* context, const ::grep11::GenerateRandomRequest* request, ::grep11::GenerateRandomResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GenerateRandom(::grpc::ServerContext* context, const ::grep11::GenerateRandomRequest* request, ::grep11::GenerateRandomResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DigestInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DigestInit() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::DigestInitRequest, ::grep11::DigestInitResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::DigestInitRequest* request,
                 ::grep11::DigestInitResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DigestInit(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DigestInit(
        ::grpc::experimental::MessageAllocator< ::grep11::DigestInitRequest, ::grep11::DigestInitResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::DigestInitRequest, ::grep11::DigestInitResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DigestInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestInit(::grpc::ServerContext* context, const ::grep11::DigestInitRequest* request, ::grep11::DigestInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DigestInit(::grpc::ServerContext* context, const ::grep11::DigestInitRequest* request, ::grep11::DigestInitResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Digest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Digest() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::DigestRequest, ::grep11::DigestResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::DigestRequest* request,
                 ::grep11::DigestResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Digest(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Digest(
        ::grpc::experimental::MessageAllocator< ::grep11::DigestRequest, ::grep11::DigestResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::DigestRequest, ::grep11::DigestResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Digest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Digest(::grpc::ServerContext* context, const ::grep11::DigestRequest* request, ::grep11::DigestResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Digest(::grpc::ServerContext* context, const ::grep11::DigestRequest* request, ::grep11::DigestResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DigestUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DigestUpdate() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::DigestUpdateRequest, ::grep11::DigestUpdateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::DigestUpdateRequest* request,
                 ::grep11::DigestUpdateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DigestUpdate(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DigestUpdate(
        ::grpc::experimental::MessageAllocator< ::grep11::DigestUpdateRequest, ::grep11::DigestUpdateResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::DigestUpdateRequest, ::grep11::DigestUpdateResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DigestUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestUpdate(::grpc::ServerContext* context, const ::grep11::DigestUpdateRequest* request, ::grep11::DigestUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DigestUpdate(::grpc::ServerContext* context, const ::grep11::DigestUpdateRequest* request, ::grep11::DigestUpdateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DigestKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DigestKey() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::DigestKeyRequest, ::grep11::DigestKeyResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::DigestKeyRequest* request,
                 ::grep11::DigestKeyResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DigestKey(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DigestKey(
        ::grpc::experimental::MessageAllocator< ::grep11::DigestKeyRequest, ::grep11::DigestKeyResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::DigestKeyRequest, ::grep11::DigestKeyResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DigestKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestKey(::grpc::ServerContext* context, const ::grep11::DigestKeyRequest* request, ::grep11::DigestKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DigestKey(::grpc::ServerContext* context, const ::grep11::DigestKeyRequest* request, ::grep11::DigestKeyResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DigestFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DigestFinal() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::DigestFinalRequest, ::grep11::DigestFinalResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::DigestFinalRequest* request,
                 ::grep11::DigestFinalResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DigestFinal(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DigestFinal(
        ::grpc::experimental::MessageAllocator< ::grep11::DigestFinalRequest, ::grep11::DigestFinalResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::DigestFinalRequest, ::grep11::DigestFinalResponse>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DigestFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestFinal(::grpc::ServerContext* context, const ::grep11::DigestFinalRequest* request, ::grep11::DigestFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DigestFinal(::grpc::ServerContext* context, const ::grep11::DigestFinalRequest* request, ::grep11::DigestFinalResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DigestSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DigestSingle() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::DigestSingleRequest, ::grep11::DigestSingleResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::DigestSingleRequest* request,
                 ::grep11::DigestSingleResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DigestSingle(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DigestSingle(
        ::grpc::experimental::MessageAllocator< ::grep11::DigestSingleRequest, ::grep11::DigestSingleResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::DigestSingleRequest, ::grep11::DigestSingleResponse>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DigestSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestSingle(::grpc::ServerContext* context, const ::grep11::DigestSingleRequest* request, ::grep11::DigestSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DigestSingle(::grpc::ServerContext* context, const ::grep11::DigestSingleRequest* request, ::grep11::DigestSingleResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_EncryptInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_EncryptInit() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::EncryptInitRequest, ::grep11::EncryptInitResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::EncryptInitRequest* request,
                 ::grep11::EncryptInitResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->EncryptInit(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_EncryptInit(
        ::grpc::experimental::MessageAllocator< ::grep11::EncryptInitRequest, ::grep11::EncryptInitResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::EncryptInitRequest, ::grep11::EncryptInitResponse>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_EncryptInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptInit(::grpc::ServerContext* context, const ::grep11::EncryptInitRequest* request, ::grep11::EncryptInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void EncryptInit(::grpc::ServerContext* context, const ::grep11::EncryptInitRequest* request, ::grep11::EncryptInitResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DecryptInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DecryptInit() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::DecryptInitRequest, ::grep11::DecryptInitResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::DecryptInitRequest* request,
                 ::grep11::DecryptInitResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DecryptInit(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DecryptInit(
        ::grpc::experimental::MessageAllocator< ::grep11::DecryptInitRequest, ::grep11::DecryptInitResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::DecryptInitRequest, ::grep11::DecryptInitResponse>*>(
          ::grpc::Service::experimental().GetHandler(8))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DecryptInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptInit(::grpc::ServerContext* context, const ::grep11::DecryptInitRequest* request, ::grep11::DecryptInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DecryptInit(::grpc::ServerContext* context, const ::grep11::DecryptInitRequest* request, ::grep11::DecryptInitResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_EncryptUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_EncryptUpdate() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::EncryptUpdateRequest, ::grep11::EncryptUpdateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::EncryptUpdateRequest* request,
                 ::grep11::EncryptUpdateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->EncryptUpdate(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_EncryptUpdate(
        ::grpc::experimental::MessageAllocator< ::grep11::EncryptUpdateRequest, ::grep11::EncryptUpdateResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::EncryptUpdateRequest, ::grep11::EncryptUpdateResponse>*>(
          ::grpc::Service::experimental().GetHandler(9))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_EncryptUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptUpdate(::grpc::ServerContext* context, const ::grep11::EncryptUpdateRequest* request, ::grep11::EncryptUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void EncryptUpdate(::grpc::ServerContext* context, const ::grep11::EncryptUpdateRequest* request, ::grep11::EncryptUpdateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DecryptUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DecryptUpdate() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::DecryptUpdateRequest, ::grep11::DecryptUpdateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::DecryptUpdateRequest* request,
                 ::grep11::DecryptUpdateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DecryptUpdate(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DecryptUpdate(
        ::grpc::experimental::MessageAllocator< ::grep11::DecryptUpdateRequest, ::grep11::DecryptUpdateResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::DecryptUpdateRequest, ::grep11::DecryptUpdateResponse>*>(
          ::grpc::Service::experimental().GetHandler(10))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DecryptUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptUpdate(::grpc::ServerContext* context, const ::grep11::DecryptUpdateRequest* request, ::grep11::DecryptUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DecryptUpdate(::grpc::ServerContext* context, const ::grep11::DecryptUpdateRequest* request, ::grep11::DecryptUpdateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Encrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Encrypt() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::EncryptRequest, ::grep11::EncryptResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::EncryptRequest* request,
                 ::grep11::EncryptResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Encrypt(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Encrypt(
        ::grpc::experimental::MessageAllocator< ::grep11::EncryptRequest, ::grep11::EncryptResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::EncryptRequest, ::grep11::EncryptResponse>*>(
          ::grpc::Service::experimental().GetHandler(11))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Encrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Encrypt(::grpc::ServerContext* context, const ::grep11::EncryptRequest* request, ::grep11::EncryptResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Encrypt(::grpc::ServerContext* context, const ::grep11::EncryptRequest* request, ::grep11::EncryptResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Decrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Decrypt() {
      ::grpc::Service::experimental().MarkMethodCallback(12,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::DecryptRequest, ::grep11::DecryptResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::DecryptRequest* request,
                 ::grep11::DecryptResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Decrypt(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Decrypt(
        ::grpc::experimental::MessageAllocator< ::grep11::DecryptRequest, ::grep11::DecryptResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::DecryptRequest, ::grep11::DecryptResponse>*>(
          ::grpc::Service::experimental().GetHandler(12))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Decrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Decrypt(::grpc::ServerContext* context, const ::grep11::DecryptRequest* request, ::grep11::DecryptResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Decrypt(::grpc::ServerContext* context, const ::grep11::DecryptRequest* request, ::grep11::DecryptResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_EncryptFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_EncryptFinal() {
      ::grpc::Service::experimental().MarkMethodCallback(13,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::EncryptFinalRequest, ::grep11::EncryptFinalResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::EncryptFinalRequest* request,
                 ::grep11::EncryptFinalResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->EncryptFinal(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_EncryptFinal(
        ::grpc::experimental::MessageAllocator< ::grep11::EncryptFinalRequest, ::grep11::EncryptFinalResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::EncryptFinalRequest, ::grep11::EncryptFinalResponse>*>(
          ::grpc::Service::experimental().GetHandler(13))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_EncryptFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptFinal(::grpc::ServerContext* context, const ::grep11::EncryptFinalRequest* request, ::grep11::EncryptFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void EncryptFinal(::grpc::ServerContext* context, const ::grep11::EncryptFinalRequest* request, ::grep11::EncryptFinalResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DecryptFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DecryptFinal() {
      ::grpc::Service::experimental().MarkMethodCallback(14,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::DecryptFinalRequest, ::grep11::DecryptFinalResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::DecryptFinalRequest* request,
                 ::grep11::DecryptFinalResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DecryptFinal(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DecryptFinal(
        ::grpc::experimental::MessageAllocator< ::grep11::DecryptFinalRequest, ::grep11::DecryptFinalResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::DecryptFinalRequest, ::grep11::DecryptFinalResponse>*>(
          ::grpc::Service::experimental().GetHandler(14))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DecryptFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptFinal(::grpc::ServerContext* context, const ::grep11::DecryptFinalRequest* request, ::grep11::DecryptFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DecryptFinal(::grpc::ServerContext* context, const ::grep11::DecryptFinalRequest* request, ::grep11::DecryptFinalResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_EncryptSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_EncryptSingle() {
      ::grpc::Service::experimental().MarkMethodCallback(15,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::EncryptSingleRequest, ::grep11::EncryptSingleResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::EncryptSingleRequest* request,
                 ::grep11::EncryptSingleResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->EncryptSingle(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_EncryptSingle(
        ::grpc::experimental::MessageAllocator< ::grep11::EncryptSingleRequest, ::grep11::EncryptSingleResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::EncryptSingleRequest, ::grep11::EncryptSingleResponse>*>(
          ::grpc::Service::experimental().GetHandler(15))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_EncryptSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptSingle(::grpc::ServerContext* context, const ::grep11::EncryptSingleRequest* request, ::grep11::EncryptSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void EncryptSingle(::grpc::ServerContext* context, const ::grep11::EncryptSingleRequest* request, ::grep11::EncryptSingleResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DecryptSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DecryptSingle() {
      ::grpc::Service::experimental().MarkMethodCallback(16,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::DecryptSingleRequest, ::grep11::DecryptSingleResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::DecryptSingleRequest* request,
                 ::grep11::DecryptSingleResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DecryptSingle(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DecryptSingle(
        ::grpc::experimental::MessageAllocator< ::grep11::DecryptSingleRequest, ::grep11::DecryptSingleResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::DecryptSingleRequest, ::grep11::DecryptSingleResponse>*>(
          ::grpc::Service::experimental().GetHandler(16))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DecryptSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptSingle(::grpc::ServerContext* context, const ::grep11::DecryptSingleRequest* request, ::grep11::DecryptSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DecryptSingle(::grpc::ServerContext* context, const ::grep11::DecryptSingleRequest* request, ::grep11::DecryptSingleResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SignInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SignInit() {
      ::grpc::Service::experimental().MarkMethodCallback(17,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::SignInitRequest, ::grep11::SignInitResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::SignInitRequest* request,
                 ::grep11::SignInitResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SignInit(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SignInit(
        ::grpc::experimental::MessageAllocator< ::grep11::SignInitRequest, ::grep11::SignInitResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::SignInitRequest, ::grep11::SignInitResponse>*>(
          ::grpc::Service::experimental().GetHandler(17))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SignInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignInit(::grpc::ServerContext* context, const ::grep11::SignInitRequest* request, ::grep11::SignInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SignInit(::grpc::ServerContext* context, const ::grep11::SignInitRequest* request, ::grep11::SignInitResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_VerifyInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_VerifyInit() {
      ::grpc::Service::experimental().MarkMethodCallback(18,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::VerifyInitRequest, ::grep11::VerifyInitResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::VerifyInitRequest* request,
                 ::grep11::VerifyInitResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->VerifyInit(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_VerifyInit(
        ::grpc::experimental::MessageAllocator< ::grep11::VerifyInitRequest, ::grep11::VerifyInitResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::VerifyInitRequest, ::grep11::VerifyInitResponse>*>(
          ::grpc::Service::experimental().GetHandler(18))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_VerifyInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyInit(::grpc::ServerContext* context, const ::grep11::VerifyInitRequest* request, ::grep11::VerifyInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifyInit(::grpc::ServerContext* context, const ::grep11::VerifyInitRequest* request, ::grep11::VerifyInitResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SignUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SignUpdate() {
      ::grpc::Service::experimental().MarkMethodCallback(19,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::SignUpdateRequest, ::grep11::SignUpdateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::SignUpdateRequest* request,
                 ::grep11::SignUpdateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SignUpdate(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SignUpdate(
        ::grpc::experimental::MessageAllocator< ::grep11::SignUpdateRequest, ::grep11::SignUpdateResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::SignUpdateRequest, ::grep11::SignUpdateResponse>*>(
          ::grpc::Service::experimental().GetHandler(19))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SignUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignUpdate(::grpc::ServerContext* context, const ::grep11::SignUpdateRequest* request, ::grep11::SignUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SignUpdate(::grpc::ServerContext* context, const ::grep11::SignUpdateRequest* request, ::grep11::SignUpdateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_VerifyUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_VerifyUpdate() {
      ::grpc::Service::experimental().MarkMethodCallback(20,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::VerifyUpdateRequest, ::grep11::VerifyUpdateResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::VerifyUpdateRequest* request,
                 ::grep11::VerifyUpdateResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->VerifyUpdate(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_VerifyUpdate(
        ::grpc::experimental::MessageAllocator< ::grep11::VerifyUpdateRequest, ::grep11::VerifyUpdateResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::VerifyUpdateRequest, ::grep11::VerifyUpdateResponse>*>(
          ::grpc::Service::experimental().GetHandler(20))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_VerifyUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyUpdate(::grpc::ServerContext* context, const ::grep11::VerifyUpdateRequest* request, ::grep11::VerifyUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifyUpdate(::grpc::ServerContext* context, const ::grep11::VerifyUpdateRequest* request, ::grep11::VerifyUpdateResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SignFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SignFinal() {
      ::grpc::Service::experimental().MarkMethodCallback(21,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::SignFinalRequest, ::grep11::SignFinalResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::SignFinalRequest* request,
                 ::grep11::SignFinalResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SignFinal(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SignFinal(
        ::grpc::experimental::MessageAllocator< ::grep11::SignFinalRequest, ::grep11::SignFinalResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::SignFinalRequest, ::grep11::SignFinalResponse>*>(
          ::grpc::Service::experimental().GetHandler(21))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SignFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignFinal(::grpc::ServerContext* context, const ::grep11::SignFinalRequest* request, ::grep11::SignFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SignFinal(::grpc::ServerContext* context, const ::grep11::SignFinalRequest* request, ::grep11::SignFinalResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_VerifyFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_VerifyFinal() {
      ::grpc::Service::experimental().MarkMethodCallback(22,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::VerifyFinalRequest, ::grep11::VerifyFinalResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::VerifyFinalRequest* request,
                 ::grep11::VerifyFinalResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->VerifyFinal(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_VerifyFinal(
        ::grpc::experimental::MessageAllocator< ::grep11::VerifyFinalRequest, ::grep11::VerifyFinalResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::VerifyFinalRequest, ::grep11::VerifyFinalResponse>*>(
          ::grpc::Service::experimental().GetHandler(22))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_VerifyFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyFinal(::grpc::ServerContext* context, const ::grep11::VerifyFinalRequest* request, ::grep11::VerifyFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifyFinal(::grpc::ServerContext* context, const ::grep11::VerifyFinalRequest* request, ::grep11::VerifyFinalResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Sign() {
      ::grpc::Service::experimental().MarkMethodCallback(23,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::SignRequest, ::grep11::SignResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::SignRequest* request,
                 ::grep11::SignResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Sign(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Sign(
        ::grpc::experimental::MessageAllocator< ::grep11::SignRequest, ::grep11::SignResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::SignRequest, ::grep11::SignResponse>*>(
          ::grpc::Service::experimental().GetHandler(23))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sign(::grpc::ServerContext* context, const ::grep11::SignRequest* request, ::grep11::SignResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Sign(::grpc::ServerContext* context, const ::grep11::SignRequest* request, ::grep11::SignResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Verify() {
      ::grpc::Service::experimental().MarkMethodCallback(24,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::VerifyRequest, ::grep11::VerifyResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::VerifyRequest* request,
                 ::grep11::VerifyResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Verify(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Verify(
        ::grpc::experimental::MessageAllocator< ::grep11::VerifyRequest, ::grep11::VerifyResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::VerifyRequest, ::grep11::VerifyResponse>*>(
          ::grpc::Service::experimental().GetHandler(24))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* context, const ::grep11::VerifyRequest* request, ::grep11::VerifyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Verify(::grpc::ServerContext* context, const ::grep11::VerifyRequest* request, ::grep11::VerifyResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SignSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SignSingle() {
      ::grpc::Service::experimental().MarkMethodCallback(25,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::SignSingleRequest, ::grep11::SignSingleResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::SignSingleRequest* request,
                 ::grep11::SignSingleResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SignSingle(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SignSingle(
        ::grpc::experimental::MessageAllocator< ::grep11::SignSingleRequest, ::grep11::SignSingleResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::SignSingleRequest, ::grep11::SignSingleResponse>*>(
          ::grpc::Service::experimental().GetHandler(25))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SignSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignSingle(::grpc::ServerContext* context, const ::grep11::SignSingleRequest* request, ::grep11::SignSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SignSingle(::grpc::ServerContext* context, const ::grep11::SignSingleRequest* request, ::grep11::SignSingleResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_VerifySingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_VerifySingle() {
      ::grpc::Service::experimental().MarkMethodCallback(26,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::VerifySingleRequest, ::grep11::VerifySingleResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::VerifySingleRequest* request,
                 ::grep11::VerifySingleResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->VerifySingle(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_VerifySingle(
        ::grpc::experimental::MessageAllocator< ::grep11::VerifySingleRequest, ::grep11::VerifySingleResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::VerifySingleRequest, ::grep11::VerifySingleResponse>*>(
          ::grpc::Service::experimental().GetHandler(26))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_VerifySingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifySingle(::grpc::ServerContext* context, const ::grep11::VerifySingleRequest* request, ::grep11::VerifySingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifySingle(::grpc::ServerContext* context, const ::grep11::VerifySingleRequest* request, ::grep11::VerifySingleResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GenerateKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GenerateKey() {
      ::grpc::Service::experimental().MarkMethodCallback(27,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::GenerateKeyRequest, ::grep11::GenerateKeyResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::GenerateKeyRequest* request,
                 ::grep11::GenerateKeyResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GenerateKey(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GenerateKey(
        ::grpc::experimental::MessageAllocator< ::grep11::GenerateKeyRequest, ::grep11::GenerateKeyResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::GenerateKeyRequest, ::grep11::GenerateKeyResponse>*>(
          ::grpc::Service::experimental().GetHandler(27))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GenerateKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateKey(::grpc::ServerContext* context, const ::grep11::GenerateKeyRequest* request, ::grep11::GenerateKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GenerateKey(::grpc::ServerContext* context, const ::grep11::GenerateKeyRequest* request, ::grep11::GenerateKeyResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GenerateKeyPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GenerateKeyPair() {
      ::grpc::Service::experimental().MarkMethodCallback(28,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::GenerateKeyPairRequest, ::grep11::GenerateKeyPairResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::GenerateKeyPairRequest* request,
                 ::grep11::GenerateKeyPairResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GenerateKeyPair(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GenerateKeyPair(
        ::grpc::experimental::MessageAllocator< ::grep11::GenerateKeyPairRequest, ::grep11::GenerateKeyPairResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::GenerateKeyPairRequest, ::grep11::GenerateKeyPairResponse>*>(
          ::grpc::Service::experimental().GetHandler(28))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GenerateKeyPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateKeyPair(::grpc::ServerContext* context, const ::grep11::GenerateKeyPairRequest* request, ::grep11::GenerateKeyPairResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GenerateKeyPair(::grpc::ServerContext* context, const ::grep11::GenerateKeyPairRequest* request, ::grep11::GenerateKeyPairResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_WrapKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_WrapKey() {
      ::grpc::Service::experimental().MarkMethodCallback(29,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::WrapKeyRequest, ::grep11::WrapKeyResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::WrapKeyRequest* request,
                 ::grep11::WrapKeyResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->WrapKey(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_WrapKey(
        ::grpc::experimental::MessageAllocator< ::grep11::WrapKeyRequest, ::grep11::WrapKeyResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::WrapKeyRequest, ::grep11::WrapKeyResponse>*>(
          ::grpc::Service::experimental().GetHandler(29))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_WrapKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WrapKey(::grpc::ServerContext* context, const ::grep11::WrapKeyRequest* request, ::grep11::WrapKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void WrapKey(::grpc::ServerContext* context, const ::grep11::WrapKeyRequest* request, ::grep11::WrapKeyResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UnwrapKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_UnwrapKey() {
      ::grpc::Service::experimental().MarkMethodCallback(30,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::UnwrapKeyRequest, ::grep11::UnwrapKeyResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::UnwrapKeyRequest* request,
                 ::grep11::UnwrapKeyResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->UnwrapKey(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_UnwrapKey(
        ::grpc::experimental::MessageAllocator< ::grep11::UnwrapKeyRequest, ::grep11::UnwrapKeyResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::UnwrapKeyRequest, ::grep11::UnwrapKeyResponse>*>(
          ::grpc::Service::experimental().GetHandler(30))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UnwrapKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnwrapKey(::grpc::ServerContext* context, const ::grep11::UnwrapKeyRequest* request, ::grep11::UnwrapKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UnwrapKey(::grpc::ServerContext* context, const ::grep11::UnwrapKeyRequest* request, ::grep11::UnwrapKeyResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeriveKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DeriveKey() {
      ::grpc::Service::experimental().MarkMethodCallback(31,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::DeriveKeyRequest, ::grep11::DeriveKeyResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::DeriveKeyRequest* request,
                 ::grep11::DeriveKeyResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DeriveKey(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DeriveKey(
        ::grpc::experimental::MessageAllocator< ::grep11::DeriveKeyRequest, ::grep11::DeriveKeyResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::DeriveKeyRequest, ::grep11::DeriveKeyResponse>*>(
          ::grpc::Service::experimental().GetHandler(31))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeriveKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeriveKey(::grpc::ServerContext* context, const ::grep11::DeriveKeyRequest* request, ::grep11::DeriveKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeriveKey(::grpc::ServerContext* context, const ::grep11::DeriveKeyRequest* request, ::grep11::DeriveKeyResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMechanismList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetMechanismList() {
      ::grpc::Service::experimental().MarkMethodCallback(32,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::GetMechanismListRequest, ::grep11::GetMechanismListResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::GetMechanismListRequest* request,
                 ::grep11::GetMechanismListResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetMechanismList(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetMechanismList(
        ::grpc::experimental::MessageAllocator< ::grep11::GetMechanismListRequest, ::grep11::GetMechanismListResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::GetMechanismListRequest, ::grep11::GetMechanismListResponse>*>(
          ::grpc::Service::experimental().GetHandler(32))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetMechanismList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMechanismList(::grpc::ServerContext* context, const ::grep11::GetMechanismListRequest* request, ::grep11::GetMechanismListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMechanismList(::grpc::ServerContext* context, const ::grep11::GetMechanismListRequest* request, ::grep11::GetMechanismListResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMechanismInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetMechanismInfo() {
      ::grpc::Service::experimental().MarkMethodCallback(33,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::GetMechanismInfoRequest, ::grep11::GetMechanismInfoResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::GetMechanismInfoRequest* request,
                 ::grep11::GetMechanismInfoResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetMechanismInfo(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetMechanismInfo(
        ::grpc::experimental::MessageAllocator< ::grep11::GetMechanismInfoRequest, ::grep11::GetMechanismInfoResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::GetMechanismInfoRequest, ::grep11::GetMechanismInfoResponse>*>(
          ::grpc::Service::experimental().GetHandler(33))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetMechanismInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMechanismInfo(::grpc::ServerContext* context, const ::grep11::GetMechanismInfoRequest* request, ::grep11::GetMechanismInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMechanismInfo(::grpc::ServerContext* context, const ::grep11::GetMechanismInfoRequest* request, ::grep11::GetMechanismInfoResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAttributeValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetAttributeValue() {
      ::grpc::Service::experimental().MarkMethodCallback(34,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::GetAttributeValueRequest, ::grep11::GetAttributeValueResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::GetAttributeValueRequest* request,
                 ::grep11::GetAttributeValueResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetAttributeValue(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetAttributeValue(
        ::grpc::experimental::MessageAllocator< ::grep11::GetAttributeValueRequest, ::grep11::GetAttributeValueResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::GetAttributeValueRequest, ::grep11::GetAttributeValueResponse>*>(
          ::grpc::Service::experimental().GetHandler(34))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAttributeValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAttributeValue(::grpc::ServerContext* context, const ::grep11::GetAttributeValueRequest* request, ::grep11::GetAttributeValueResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAttributeValue(::grpc::ServerContext* context, const ::grep11::GetAttributeValueRequest* request, ::grep11::GetAttributeValueResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetAttributeValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SetAttributeValue() {
      ::grpc::Service::experimental().MarkMethodCallback(35,
        new ::grpc::internal::CallbackUnaryHandler< ::grep11::SetAttributeValueRequest, ::grep11::SetAttributeValueResponse>(
          [this](::grpc::ServerContext* context,
                 const ::grep11::SetAttributeValueRequest* request,
                 ::grep11::SetAttributeValueResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetAttributeValue(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetAttributeValue(
        ::grpc::experimental::MessageAllocator< ::grep11::SetAttributeValueRequest, ::grep11::SetAttributeValueResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::grep11::SetAttributeValueRequest, ::grep11::SetAttributeValueResponse>*>(
          ::grpc::Service::experimental().GetHandler(35))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetAttributeValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAttributeValue(::grpc::ServerContext* context, const ::grep11::SetAttributeValueRequest* request, ::grep11::SetAttributeValueResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetAttributeValue(::grpc::ServerContext* context, const ::grep11::SetAttributeValueRequest* request, ::grep11::SetAttributeValueResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_GenerateRandom<ExperimentalWithCallbackMethod_DigestInit<ExperimentalWithCallbackMethod_Digest<ExperimentalWithCallbackMethod_DigestUpdate<ExperimentalWithCallbackMethod_DigestKey<ExperimentalWithCallbackMethod_DigestFinal<ExperimentalWithCallbackMethod_DigestSingle<ExperimentalWithCallbackMethod_EncryptInit<ExperimentalWithCallbackMethod_DecryptInit<ExperimentalWithCallbackMethod_EncryptUpdate<ExperimentalWithCallbackMethod_DecryptUpdate<ExperimentalWithCallbackMethod_Encrypt<ExperimentalWithCallbackMethod_Decrypt<ExperimentalWithCallbackMethod_EncryptFinal<ExperimentalWithCallbackMethod_DecryptFinal<ExperimentalWithCallbackMethod_EncryptSingle<ExperimentalWithCallbackMethod_DecryptSingle<ExperimentalWithCallbackMethod_SignInit<ExperimentalWithCallbackMethod_VerifyInit<ExperimentalWithCallbackMethod_SignUpdate<ExperimentalWithCallbackMethod_VerifyUpdate<ExperimentalWithCallbackMethod_SignFinal<ExperimentalWithCallbackMethod_VerifyFinal<ExperimentalWithCallbackMethod_Sign<ExperimentalWithCallbackMethod_Verify<ExperimentalWithCallbackMethod_SignSingle<ExperimentalWithCallbackMethod_VerifySingle<ExperimentalWithCallbackMethod_GenerateKey<ExperimentalWithCallbackMethod_GenerateKeyPair<ExperimentalWithCallbackMethod_WrapKey<ExperimentalWithCallbackMethod_UnwrapKey<ExperimentalWithCallbackMethod_DeriveKey<ExperimentalWithCallbackMethod_GetMechanismList<ExperimentalWithCallbackMethod_GetMechanismInfo<ExperimentalWithCallbackMethod_GetAttributeValue<ExperimentalWithCallbackMethod_SetAttributeValue<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GenerateRandom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GenerateRandom() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GenerateRandom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateRandom(::grpc::ServerContext* context, const ::grep11::GenerateRandomRequest* request, ::grep11::GenerateRandomResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DigestInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DigestInit() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DigestInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestInit(::grpc::ServerContext* context, const ::grep11::DigestInitRequest* request, ::grep11::DigestInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Digest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Digest() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Digest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Digest(::grpc::ServerContext* context, const ::grep11::DigestRequest* request, ::grep11::DigestResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DigestUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DigestUpdate() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DigestUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestUpdate(::grpc::ServerContext* context, const ::grep11::DigestUpdateRequest* request, ::grep11::DigestUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DigestKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DigestKey() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DigestKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestKey(::grpc::ServerContext* context, const ::grep11::DigestKeyRequest* request, ::grep11::DigestKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DigestFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DigestFinal() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DigestFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestFinal(::grpc::ServerContext* context, const ::grep11::DigestFinalRequest* request, ::grep11::DigestFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DigestSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DigestSingle() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DigestSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestSingle(::grpc::ServerContext* context, const ::grep11::DigestSingleRequest* request, ::grep11::DigestSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EncryptInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_EncryptInit() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_EncryptInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptInit(::grpc::ServerContext* context, const ::grep11::EncryptInitRequest* request, ::grep11::EncryptInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DecryptInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DecryptInit() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_DecryptInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptInit(::grpc::ServerContext* context, const ::grep11::DecryptInitRequest* request, ::grep11::DecryptInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EncryptUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_EncryptUpdate() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_EncryptUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptUpdate(::grpc::ServerContext* context, const ::grep11::EncryptUpdateRequest* request, ::grep11::EncryptUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DecryptUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DecryptUpdate() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_DecryptUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptUpdate(::grpc::ServerContext* context, const ::grep11::DecryptUpdateRequest* request, ::grep11::DecryptUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Encrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Encrypt() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_Encrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Encrypt(::grpc::ServerContext* context, const ::grep11::EncryptRequest* request, ::grep11::EncryptResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Decrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Decrypt() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_Decrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Decrypt(::grpc::ServerContext* context, const ::grep11::DecryptRequest* request, ::grep11::DecryptResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EncryptFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_EncryptFinal() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_EncryptFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptFinal(::grpc::ServerContext* context, const ::grep11::EncryptFinalRequest* request, ::grep11::EncryptFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DecryptFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DecryptFinal() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_DecryptFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptFinal(::grpc::ServerContext* context, const ::grep11::DecryptFinalRequest* request, ::grep11::DecryptFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EncryptSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_EncryptSingle() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_EncryptSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptSingle(::grpc::ServerContext* context, const ::grep11::EncryptSingleRequest* request, ::grep11::EncryptSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DecryptSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DecryptSingle() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_DecryptSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptSingle(::grpc::ServerContext* context, const ::grep11::DecryptSingleRequest* request, ::grep11::DecryptSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SignInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SignInit() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_SignInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignInit(::grpc::ServerContext* context, const ::grep11::SignInitRequest* request, ::grep11::SignInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VerifyInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VerifyInit() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_VerifyInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyInit(::grpc::ServerContext* context, const ::grep11::VerifyInitRequest* request, ::grep11::VerifyInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SignUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SignUpdate() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_SignUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignUpdate(::grpc::ServerContext* context, const ::grep11::SignUpdateRequest* request, ::grep11::SignUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VerifyUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VerifyUpdate() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_VerifyUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyUpdate(::grpc::ServerContext* context, const ::grep11::VerifyUpdateRequest* request, ::grep11::VerifyUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SignFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SignFinal() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_SignFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignFinal(::grpc::ServerContext* context, const ::grep11::SignFinalRequest* request, ::grep11::SignFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VerifyFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VerifyFinal() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_VerifyFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyFinal(::grpc::ServerContext* context, const ::grep11::VerifyFinalRequest* request, ::grep11::VerifyFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Sign() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sign(::grpc::ServerContext* context, const ::grep11::SignRequest* request, ::grep11::SignResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Verify() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* context, const ::grep11::VerifyRequest* request, ::grep11::VerifyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SignSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SignSingle() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_SignSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignSingle(::grpc::ServerContext* context, const ::grep11::SignSingleRequest* request, ::grep11::SignSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VerifySingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VerifySingle() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_VerifySingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifySingle(::grpc::ServerContext* context, const ::grep11::VerifySingleRequest* request, ::grep11::VerifySingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GenerateKey() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_GenerateKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateKey(::grpc::ServerContext* context, const ::grep11::GenerateKeyRequest* request, ::grep11::GenerateKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GenerateKeyPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GenerateKeyPair() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_GenerateKeyPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateKeyPair(::grpc::ServerContext* context, const ::grep11::GenerateKeyPairRequest* request, ::grep11::GenerateKeyPairResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WrapKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_WrapKey() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_WrapKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WrapKey(::grpc::ServerContext* context, const ::grep11::WrapKeyRequest* request, ::grep11::WrapKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnwrapKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UnwrapKey() {
      ::grpc::Service::MarkMethodGeneric(30);
    }
    ~WithGenericMethod_UnwrapKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnwrapKey(::grpc::ServerContext* context, const ::grep11::UnwrapKeyRequest* request, ::grep11::UnwrapKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeriveKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeriveKey() {
      ::grpc::Service::MarkMethodGeneric(31);
    }
    ~WithGenericMethod_DeriveKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeriveKey(::grpc::ServerContext* context, const ::grep11::DeriveKeyRequest* request, ::grep11::DeriveKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMechanismList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetMechanismList() {
      ::grpc::Service::MarkMethodGeneric(32);
    }
    ~WithGenericMethod_GetMechanismList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMechanismList(::grpc::ServerContext* context, const ::grep11::GetMechanismListRequest* request, ::grep11::GetMechanismListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMechanismInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetMechanismInfo() {
      ::grpc::Service::MarkMethodGeneric(33);
    }
    ~WithGenericMethod_GetMechanismInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMechanismInfo(::grpc::ServerContext* context, const ::grep11::GetMechanismInfoRequest* request, ::grep11::GetMechanismInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAttributeValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAttributeValue() {
      ::grpc::Service::MarkMethodGeneric(34);
    }
    ~WithGenericMethod_GetAttributeValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAttributeValue(::grpc::ServerContext* context, const ::grep11::GetAttributeValueRequest* request, ::grep11::GetAttributeValueResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAttributeValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SetAttributeValue() {
      ::grpc::Service::MarkMethodGeneric(35);
    }
    ~WithGenericMethod_SetAttributeValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAttributeValue(::grpc::ServerContext* context, const ::grep11::SetAttributeValueRequest* request, ::grep11::SetAttributeValueResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateRandom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GenerateRandom() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GenerateRandom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateRandom(::grpc::ServerContext* context, const ::grep11::GenerateRandomRequest* request, ::grep11::GenerateRandomResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateRandom(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DigestInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DigestInit() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DigestInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestInit(::grpc::ServerContext* context, const ::grep11::DigestInitRequest* request, ::grep11::DigestInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDigestInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Digest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Digest() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Digest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Digest(::grpc::ServerContext* context, const ::grep11::DigestRequest* request, ::grep11::DigestResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDigest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DigestUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DigestUpdate() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DigestUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestUpdate(::grpc::ServerContext* context, const ::grep11::DigestUpdateRequest* request, ::grep11::DigestUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDigestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DigestKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DigestKey() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DigestKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestKey(::grpc::ServerContext* context, const ::grep11::DigestKeyRequest* request, ::grep11::DigestKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDigestKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DigestFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DigestFinal() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DigestFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestFinal(::grpc::ServerContext* context, const ::grep11::DigestFinalRequest* request, ::grep11::DigestFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDigestFinal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DigestSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DigestSingle() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DigestSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestSingle(::grpc::ServerContext* context, const ::grep11::DigestSingleRequest* request, ::grep11::DigestSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDigestSingle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EncryptInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_EncryptInit() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_EncryptInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptInit(::grpc::ServerContext* context, const ::grep11::EncryptInitRequest* request, ::grep11::EncryptInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncryptInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DecryptInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DecryptInit() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_DecryptInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptInit(::grpc::ServerContext* context, const ::grep11::DecryptInitRequest* request, ::grep11::DecryptInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDecryptInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EncryptUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_EncryptUpdate() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_EncryptUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptUpdate(::grpc::ServerContext* context, const ::grep11::EncryptUpdateRequest* request, ::grep11::EncryptUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncryptUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DecryptUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DecryptUpdate() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_DecryptUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptUpdate(::grpc::ServerContext* context, const ::grep11::DecryptUpdateRequest* request, ::grep11::DecryptUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDecryptUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Encrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Encrypt() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_Encrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Encrypt(::grpc::ServerContext* context, const ::grep11::EncryptRequest* request, ::grep11::EncryptResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncrypt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Decrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Decrypt() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_Decrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Decrypt(::grpc::ServerContext* context, const ::grep11::DecryptRequest* request, ::grep11::DecryptResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDecrypt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EncryptFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_EncryptFinal() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_EncryptFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptFinal(::grpc::ServerContext* context, const ::grep11::EncryptFinalRequest* request, ::grep11::EncryptFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncryptFinal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DecryptFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DecryptFinal() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_DecryptFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptFinal(::grpc::ServerContext* context, const ::grep11::DecryptFinalRequest* request, ::grep11::DecryptFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDecryptFinal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EncryptSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_EncryptSingle() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_EncryptSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptSingle(::grpc::ServerContext* context, const ::grep11::EncryptSingleRequest* request, ::grep11::EncryptSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncryptSingle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DecryptSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DecryptSingle() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_DecryptSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptSingle(::grpc::ServerContext* context, const ::grep11::DecryptSingleRequest* request, ::grep11::DecryptSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDecryptSingle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SignInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SignInit() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_SignInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignInit(::grpc::ServerContext* context, const ::grep11::SignInitRequest* request, ::grep11::SignInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VerifyInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_VerifyInit() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_VerifyInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyInit(::grpc::ServerContext* context, const ::grep11::VerifyInitRequest* request, ::grep11::VerifyInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SignUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SignUpdate() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_SignUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignUpdate(::grpc::ServerContext* context, const ::grep11::SignUpdateRequest* request, ::grep11::SignUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VerifyUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_VerifyUpdate() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_VerifyUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyUpdate(::grpc::ServerContext* context, const ::grep11::VerifyUpdateRequest* request, ::grep11::VerifyUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SignFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SignFinal() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_SignFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignFinal(::grpc::ServerContext* context, const ::grep11::SignFinalRequest* request, ::grep11::SignFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignFinal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VerifyFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_VerifyFinal() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_VerifyFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyFinal(::grpc::ServerContext* context, const ::grep11::VerifyFinalRequest* request, ::grep11::VerifyFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyFinal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Sign() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sign(::grpc::ServerContext* context, const ::grep11::SignRequest* request, ::grep11::SignResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSign(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Verify() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* context, const ::grep11::VerifyRequest* request, ::grep11::VerifyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerify(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SignSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SignSingle() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_SignSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignSingle(::grpc::ServerContext* context, const ::grep11::SignSingleRequest* request, ::grep11::SignSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSignSingle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VerifySingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_VerifySingle() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_VerifySingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifySingle(::grpc::ServerContext* context, const ::grep11::VerifySingleRequest* request, ::grep11::VerifySingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifySingle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GenerateKey() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_GenerateKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateKey(::grpc::ServerContext* context, const ::grep11::GenerateKeyRequest* request, ::grep11::GenerateKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GenerateKeyPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GenerateKeyPair() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_GenerateKeyPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateKeyPair(::grpc::ServerContext* context, const ::grep11::GenerateKeyPairRequest* request, ::grep11::GenerateKeyPairResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenerateKeyPair(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WrapKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_WrapKey() {
      ::grpc::Service::MarkMethodRaw(29);
    }
    ~WithRawMethod_WrapKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WrapKey(::grpc::ServerContext* context, const ::grep11::WrapKeyRequest* request, ::grep11::WrapKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrapKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnwrapKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UnwrapKey() {
      ::grpc::Service::MarkMethodRaw(30);
    }
    ~WithRawMethod_UnwrapKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnwrapKey(::grpc::ServerContext* context, const ::grep11::UnwrapKeyRequest* request, ::grep11::UnwrapKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnwrapKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeriveKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeriveKey() {
      ::grpc::Service::MarkMethodRaw(31);
    }
    ~WithRawMethod_DeriveKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeriveKey(::grpc::ServerContext* context, const ::grep11::DeriveKeyRequest* request, ::grep11::DeriveKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeriveKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMechanismList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetMechanismList() {
      ::grpc::Service::MarkMethodRaw(32);
    }
    ~WithRawMethod_GetMechanismList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMechanismList(::grpc::ServerContext* context, const ::grep11::GetMechanismListRequest* request, ::grep11::GetMechanismListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMechanismList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMechanismInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetMechanismInfo() {
      ::grpc::Service::MarkMethodRaw(33);
    }
    ~WithRawMethod_GetMechanismInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMechanismInfo(::grpc::ServerContext* context, const ::grep11::GetMechanismInfoRequest* request, ::grep11::GetMechanismInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMechanismInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAttributeValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetAttributeValue() {
      ::grpc::Service::MarkMethodRaw(34);
    }
    ~WithRawMethod_GetAttributeValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAttributeValue(::grpc::ServerContext* context, const ::grep11::GetAttributeValueRequest* request, ::grep11::GetAttributeValueResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAttributeValue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAttributeValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SetAttributeValue() {
      ::grpc::Service::MarkMethodRaw(35);
    }
    ~WithRawMethod_SetAttributeValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAttributeValue(::grpc::ServerContext* context, const ::grep11::SetAttributeValueRequest* request, ::grep11::SetAttributeValueResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAttributeValue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GenerateRandom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GenerateRandom() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GenerateRandom(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GenerateRandom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateRandom(::grpc::ServerContext* context, const ::grep11::GenerateRandomRequest* request, ::grep11::GenerateRandomResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GenerateRandom(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DigestInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DigestInit() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DigestInit(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DigestInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestInit(::grpc::ServerContext* context, const ::grep11::DigestInitRequest* request, ::grep11::DigestInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DigestInit(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Digest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Digest() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Digest(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Digest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Digest(::grpc::ServerContext* context, const ::grep11::DigestRequest* request, ::grep11::DigestResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Digest(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DigestUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DigestUpdate() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DigestUpdate(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DigestUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestUpdate(::grpc::ServerContext* context, const ::grep11::DigestUpdateRequest* request, ::grep11::DigestUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DigestUpdate(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DigestKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DigestKey() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DigestKey(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DigestKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestKey(::grpc::ServerContext* context, const ::grep11::DigestKeyRequest* request, ::grep11::DigestKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DigestKey(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DigestFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DigestFinal() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DigestFinal(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DigestFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestFinal(::grpc::ServerContext* context, const ::grep11::DigestFinalRequest* request, ::grep11::DigestFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DigestFinal(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DigestSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DigestSingle() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DigestSingle(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DigestSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DigestSingle(::grpc::ServerContext* context, const ::grep11::DigestSingleRequest* request, ::grep11::DigestSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DigestSingle(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_EncryptInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_EncryptInit() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->EncryptInit(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_EncryptInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptInit(::grpc::ServerContext* context, const ::grep11::EncryptInitRequest* request, ::grep11::EncryptInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void EncryptInit(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DecryptInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DecryptInit() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DecryptInit(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DecryptInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptInit(::grpc::ServerContext* context, const ::grep11::DecryptInitRequest* request, ::grep11::DecryptInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DecryptInit(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_EncryptUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_EncryptUpdate() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->EncryptUpdate(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_EncryptUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptUpdate(::grpc::ServerContext* context, const ::grep11::EncryptUpdateRequest* request, ::grep11::EncryptUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void EncryptUpdate(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DecryptUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DecryptUpdate() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DecryptUpdate(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DecryptUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptUpdate(::grpc::ServerContext* context, const ::grep11::DecryptUpdateRequest* request, ::grep11::DecryptUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DecryptUpdate(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Encrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Encrypt() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Encrypt(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Encrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Encrypt(::grpc::ServerContext* context, const ::grep11::EncryptRequest* request, ::grep11::EncryptResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Encrypt(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Decrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Decrypt() {
      ::grpc::Service::experimental().MarkMethodRawCallback(12,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Decrypt(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Decrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Decrypt(::grpc::ServerContext* context, const ::grep11::DecryptRequest* request, ::grep11::DecryptResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Decrypt(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_EncryptFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_EncryptFinal() {
      ::grpc::Service::experimental().MarkMethodRawCallback(13,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->EncryptFinal(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_EncryptFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptFinal(::grpc::ServerContext* context, const ::grep11::EncryptFinalRequest* request, ::grep11::EncryptFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void EncryptFinal(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DecryptFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DecryptFinal() {
      ::grpc::Service::experimental().MarkMethodRawCallback(14,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DecryptFinal(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DecryptFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptFinal(::grpc::ServerContext* context, const ::grep11::DecryptFinalRequest* request, ::grep11::DecryptFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DecryptFinal(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_EncryptSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_EncryptSingle() {
      ::grpc::Service::experimental().MarkMethodRawCallback(15,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->EncryptSingle(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_EncryptSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncryptSingle(::grpc::ServerContext* context, const ::grep11::EncryptSingleRequest* request, ::grep11::EncryptSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void EncryptSingle(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DecryptSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DecryptSingle() {
      ::grpc::Service::experimental().MarkMethodRawCallback(16,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DecryptSingle(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DecryptSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DecryptSingle(::grpc::ServerContext* context, const ::grep11::DecryptSingleRequest* request, ::grep11::DecryptSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DecryptSingle(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SignInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SignInit() {
      ::grpc::Service::experimental().MarkMethodRawCallback(17,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SignInit(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SignInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignInit(::grpc::ServerContext* context, const ::grep11::SignInitRequest* request, ::grep11::SignInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SignInit(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_VerifyInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_VerifyInit() {
      ::grpc::Service::experimental().MarkMethodRawCallback(18,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->VerifyInit(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_VerifyInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyInit(::grpc::ServerContext* context, const ::grep11::VerifyInitRequest* request, ::grep11::VerifyInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifyInit(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SignUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SignUpdate() {
      ::grpc::Service::experimental().MarkMethodRawCallback(19,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SignUpdate(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SignUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignUpdate(::grpc::ServerContext* context, const ::grep11::SignUpdateRequest* request, ::grep11::SignUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SignUpdate(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_VerifyUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_VerifyUpdate() {
      ::grpc::Service::experimental().MarkMethodRawCallback(20,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->VerifyUpdate(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_VerifyUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyUpdate(::grpc::ServerContext* context, const ::grep11::VerifyUpdateRequest* request, ::grep11::VerifyUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifyUpdate(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SignFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SignFinal() {
      ::grpc::Service::experimental().MarkMethodRawCallback(21,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SignFinal(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SignFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignFinal(::grpc::ServerContext* context, const ::grep11::SignFinalRequest* request, ::grep11::SignFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SignFinal(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_VerifyFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_VerifyFinal() {
      ::grpc::Service::experimental().MarkMethodRawCallback(22,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->VerifyFinal(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_VerifyFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyFinal(::grpc::ServerContext* context, const ::grep11::VerifyFinalRequest* request, ::grep11::VerifyFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifyFinal(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Sign() {
      ::grpc::Service::experimental().MarkMethodRawCallback(23,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Sign(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Sign(::grpc::ServerContext* context, const ::grep11::SignRequest* request, ::grep11::SignResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Sign(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Verify() {
      ::grpc::Service::experimental().MarkMethodRawCallback(24,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Verify(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Verify(::grpc::ServerContext* context, const ::grep11::VerifyRequest* request, ::grep11::VerifyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Verify(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SignSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SignSingle() {
      ::grpc::Service::experimental().MarkMethodRawCallback(25,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SignSingle(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SignSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SignSingle(::grpc::ServerContext* context, const ::grep11::SignSingleRequest* request, ::grep11::SignSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SignSingle(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_VerifySingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_VerifySingle() {
      ::grpc::Service::experimental().MarkMethodRawCallback(26,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->VerifySingle(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_VerifySingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifySingle(::grpc::ServerContext* context, const ::grep11::VerifySingleRequest* request, ::grep11::VerifySingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void VerifySingle(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GenerateKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GenerateKey() {
      ::grpc::Service::experimental().MarkMethodRawCallback(27,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GenerateKey(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GenerateKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateKey(::grpc::ServerContext* context, const ::grep11::GenerateKeyRequest* request, ::grep11::GenerateKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GenerateKey(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GenerateKeyPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GenerateKeyPair() {
      ::grpc::Service::experimental().MarkMethodRawCallback(28,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GenerateKeyPair(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GenerateKeyPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenerateKeyPair(::grpc::ServerContext* context, const ::grep11::GenerateKeyPairRequest* request, ::grep11::GenerateKeyPairResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GenerateKeyPair(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_WrapKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_WrapKey() {
      ::grpc::Service::experimental().MarkMethodRawCallback(29,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->WrapKey(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_WrapKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WrapKey(::grpc::ServerContext* context, const ::grep11::WrapKeyRequest* request, ::grep11::WrapKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void WrapKey(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UnwrapKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_UnwrapKey() {
      ::grpc::Service::experimental().MarkMethodRawCallback(30,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->UnwrapKey(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_UnwrapKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnwrapKey(::grpc::ServerContext* context, const ::grep11::UnwrapKeyRequest* request, ::grep11::UnwrapKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UnwrapKey(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeriveKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DeriveKey() {
      ::grpc::Service::experimental().MarkMethodRawCallback(31,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DeriveKey(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DeriveKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeriveKey(::grpc::ServerContext* context, const ::grep11::DeriveKeyRequest* request, ::grep11::DeriveKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeriveKey(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMechanismList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMechanismList() {
      ::grpc::Service::experimental().MarkMethodRawCallback(32,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetMechanismList(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMechanismList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMechanismList(::grpc::ServerContext* context, const ::grep11::GetMechanismListRequest* request, ::grep11::GetMechanismListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMechanismList(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMechanismInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMechanismInfo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(33,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetMechanismInfo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMechanismInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMechanismInfo(::grpc::ServerContext* context, const ::grep11::GetMechanismInfoRequest* request, ::grep11::GetMechanismInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMechanismInfo(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAttributeValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAttributeValue() {
      ::grpc::Service::experimental().MarkMethodRawCallback(34,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetAttributeValue(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAttributeValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAttributeValue(::grpc::ServerContext* context, const ::grep11::GetAttributeValueRequest* request, ::grep11::GetAttributeValueResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAttributeValue(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetAttributeValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SetAttributeValue() {
      ::grpc::Service::experimental().MarkMethodRawCallback(35,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetAttributeValue(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetAttributeValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAttributeValue(::grpc::ServerContext* context, const ::grep11::SetAttributeValueRequest* request, ::grep11::SetAttributeValueResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetAttributeValue(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GenerateRandom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GenerateRandom() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::GenerateRandomRequest, ::grep11::GenerateRandomResponse>(std::bind(&WithStreamedUnaryMethod_GenerateRandom<BaseClass>::StreamedGenerateRandom, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GenerateRandom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateRandom(::grpc::ServerContext* context, const ::grep11::GenerateRandomRequest* request, ::grep11::GenerateRandomResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGenerateRandom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::GenerateRandomRequest,::grep11::GenerateRandomResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DigestInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DigestInit() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::DigestInitRequest, ::grep11::DigestInitResponse>(std::bind(&WithStreamedUnaryMethod_DigestInit<BaseClass>::StreamedDigestInit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DigestInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DigestInit(::grpc::ServerContext* context, const ::grep11::DigestInitRequest* request, ::grep11::DigestInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDigestInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::DigestInitRequest,::grep11::DigestInitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Digest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Digest() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::DigestRequest, ::grep11::DigestResponse>(std::bind(&WithStreamedUnaryMethod_Digest<BaseClass>::StreamedDigest, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Digest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Digest(::grpc::ServerContext* context, const ::grep11::DigestRequest* request, ::grep11::DigestResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDigest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::DigestRequest,::grep11::DigestResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DigestUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DigestUpdate() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::DigestUpdateRequest, ::grep11::DigestUpdateResponse>(std::bind(&WithStreamedUnaryMethod_DigestUpdate<BaseClass>::StreamedDigestUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DigestUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DigestUpdate(::grpc::ServerContext* context, const ::grep11::DigestUpdateRequest* request, ::grep11::DigestUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDigestUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::DigestUpdateRequest,::grep11::DigestUpdateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DigestKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DigestKey() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::DigestKeyRequest, ::grep11::DigestKeyResponse>(std::bind(&WithStreamedUnaryMethod_DigestKey<BaseClass>::StreamedDigestKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DigestKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DigestKey(::grpc::ServerContext* context, const ::grep11::DigestKeyRequest* request, ::grep11::DigestKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDigestKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::DigestKeyRequest,::grep11::DigestKeyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DigestFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DigestFinal() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::DigestFinalRequest, ::grep11::DigestFinalResponse>(std::bind(&WithStreamedUnaryMethod_DigestFinal<BaseClass>::StreamedDigestFinal, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DigestFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DigestFinal(::grpc::ServerContext* context, const ::grep11::DigestFinalRequest* request, ::grep11::DigestFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDigestFinal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::DigestFinalRequest,::grep11::DigestFinalResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DigestSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DigestSingle() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::DigestSingleRequest, ::grep11::DigestSingleResponse>(std::bind(&WithStreamedUnaryMethod_DigestSingle<BaseClass>::StreamedDigestSingle, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DigestSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DigestSingle(::grpc::ServerContext* context, const ::grep11::DigestSingleRequest* request, ::grep11::DigestSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDigestSingle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::DigestSingleRequest,::grep11::DigestSingleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EncryptInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_EncryptInit() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::EncryptInitRequest, ::grep11::EncryptInitResponse>(std::bind(&WithStreamedUnaryMethod_EncryptInit<BaseClass>::StreamedEncryptInit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_EncryptInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EncryptInit(::grpc::ServerContext* context, const ::grep11::EncryptInitRequest* request, ::grep11::EncryptInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEncryptInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::EncryptInitRequest,::grep11::EncryptInitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DecryptInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DecryptInit() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::DecryptInitRequest, ::grep11::DecryptInitResponse>(std::bind(&WithStreamedUnaryMethod_DecryptInit<BaseClass>::StreamedDecryptInit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DecryptInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DecryptInit(::grpc::ServerContext* context, const ::grep11::DecryptInitRequest* request, ::grep11::DecryptInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDecryptInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::DecryptInitRequest,::grep11::DecryptInitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EncryptUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_EncryptUpdate() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::EncryptUpdateRequest, ::grep11::EncryptUpdateResponse>(std::bind(&WithStreamedUnaryMethod_EncryptUpdate<BaseClass>::StreamedEncryptUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_EncryptUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EncryptUpdate(::grpc::ServerContext* context, const ::grep11::EncryptUpdateRequest* request, ::grep11::EncryptUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEncryptUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::EncryptUpdateRequest,::grep11::EncryptUpdateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DecryptUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DecryptUpdate() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::DecryptUpdateRequest, ::grep11::DecryptUpdateResponse>(std::bind(&WithStreamedUnaryMethod_DecryptUpdate<BaseClass>::StreamedDecryptUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DecryptUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DecryptUpdate(::grpc::ServerContext* context, const ::grep11::DecryptUpdateRequest* request, ::grep11::DecryptUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDecryptUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::DecryptUpdateRequest,::grep11::DecryptUpdateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Encrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Encrypt() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::EncryptRequest, ::grep11::EncryptResponse>(std::bind(&WithStreamedUnaryMethod_Encrypt<BaseClass>::StreamedEncrypt, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Encrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Encrypt(::grpc::ServerContext* context, const ::grep11::EncryptRequest* request, ::grep11::EncryptResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEncrypt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::EncryptRequest,::grep11::EncryptResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Decrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Decrypt() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::DecryptRequest, ::grep11::DecryptResponse>(std::bind(&WithStreamedUnaryMethod_Decrypt<BaseClass>::StreamedDecrypt, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Decrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Decrypt(::grpc::ServerContext* context, const ::grep11::DecryptRequest* request, ::grep11::DecryptResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDecrypt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::DecryptRequest,::grep11::DecryptResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EncryptFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_EncryptFinal() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::EncryptFinalRequest, ::grep11::EncryptFinalResponse>(std::bind(&WithStreamedUnaryMethod_EncryptFinal<BaseClass>::StreamedEncryptFinal, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_EncryptFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EncryptFinal(::grpc::ServerContext* context, const ::grep11::EncryptFinalRequest* request, ::grep11::EncryptFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEncryptFinal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::EncryptFinalRequest,::grep11::EncryptFinalResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DecryptFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DecryptFinal() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::DecryptFinalRequest, ::grep11::DecryptFinalResponse>(std::bind(&WithStreamedUnaryMethod_DecryptFinal<BaseClass>::StreamedDecryptFinal, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DecryptFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DecryptFinal(::grpc::ServerContext* context, const ::grep11::DecryptFinalRequest* request, ::grep11::DecryptFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDecryptFinal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::DecryptFinalRequest,::grep11::DecryptFinalResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EncryptSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_EncryptSingle() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::EncryptSingleRequest, ::grep11::EncryptSingleResponse>(std::bind(&WithStreamedUnaryMethod_EncryptSingle<BaseClass>::StreamedEncryptSingle, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_EncryptSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EncryptSingle(::grpc::ServerContext* context, const ::grep11::EncryptSingleRequest* request, ::grep11::EncryptSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEncryptSingle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::EncryptSingleRequest,::grep11::EncryptSingleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DecryptSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DecryptSingle() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::DecryptSingleRequest, ::grep11::DecryptSingleResponse>(std::bind(&WithStreamedUnaryMethod_DecryptSingle<BaseClass>::StreamedDecryptSingle, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DecryptSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DecryptSingle(::grpc::ServerContext* context, const ::grep11::DecryptSingleRequest* request, ::grep11::DecryptSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDecryptSingle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::DecryptSingleRequest,::grep11::DecryptSingleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SignInit() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::SignInitRequest, ::grep11::SignInitResponse>(std::bind(&WithStreamedUnaryMethod_SignInit<BaseClass>::StreamedSignInit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SignInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignInit(::grpc::ServerContext* context, const ::grep11::SignInitRequest* request, ::grep11::SignInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::SignInitRequest,::grep11::SignInitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VerifyInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VerifyInit() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::VerifyInitRequest, ::grep11::VerifyInitResponse>(std::bind(&WithStreamedUnaryMethod_VerifyInit<BaseClass>::StreamedVerifyInit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VerifyInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VerifyInit(::grpc::ServerContext* context, const ::grep11::VerifyInitRequest* request, ::grep11::VerifyInitResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerifyInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::VerifyInitRequest,::grep11::VerifyInitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SignUpdate() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::SignUpdateRequest, ::grep11::SignUpdateResponse>(std::bind(&WithStreamedUnaryMethod_SignUpdate<BaseClass>::StreamedSignUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SignUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignUpdate(::grpc::ServerContext* context, const ::grep11::SignUpdateRequest* request, ::grep11::SignUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::SignUpdateRequest,::grep11::SignUpdateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VerifyUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VerifyUpdate() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::VerifyUpdateRequest, ::grep11::VerifyUpdateResponse>(std::bind(&WithStreamedUnaryMethod_VerifyUpdate<BaseClass>::StreamedVerifyUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VerifyUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VerifyUpdate(::grpc::ServerContext* context, const ::grep11::VerifyUpdateRequest* request, ::grep11::VerifyUpdateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerifyUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::VerifyUpdateRequest,::grep11::VerifyUpdateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SignFinal() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::SignFinalRequest, ::grep11::SignFinalResponse>(std::bind(&WithStreamedUnaryMethod_SignFinal<BaseClass>::StreamedSignFinal, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SignFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignFinal(::grpc::ServerContext* context, const ::grep11::SignFinalRequest* request, ::grep11::SignFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignFinal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::SignFinalRequest,::grep11::SignFinalResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VerifyFinal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VerifyFinal() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::VerifyFinalRequest, ::grep11::VerifyFinalResponse>(std::bind(&WithStreamedUnaryMethod_VerifyFinal<BaseClass>::StreamedVerifyFinal, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VerifyFinal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VerifyFinal(::grpc::ServerContext* context, const ::grep11::VerifyFinalRequest* request, ::grep11::VerifyFinalResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerifyFinal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::VerifyFinalRequest,::grep11::VerifyFinalResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Sign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Sign() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::SignRequest, ::grep11::SignResponse>(std::bind(&WithStreamedUnaryMethod_Sign<BaseClass>::StreamedSign, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Sign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Sign(::grpc::ServerContext* context, const ::grep11::SignRequest* request, ::grep11::SignResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSign(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::SignRequest,::grep11::SignResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Verify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Verify() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::VerifyRequest, ::grep11::VerifyResponse>(std::bind(&WithStreamedUnaryMethod_Verify<BaseClass>::StreamedVerify, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Verify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Verify(::grpc::ServerContext* context, const ::grep11::VerifyRequest* request, ::grep11::VerifyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerify(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::VerifyRequest,::grep11::VerifyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SignSingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SignSingle() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::SignSingleRequest, ::grep11::SignSingleResponse>(std::bind(&WithStreamedUnaryMethod_SignSingle<BaseClass>::StreamedSignSingle, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SignSingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SignSingle(::grpc::ServerContext* context, const ::grep11::SignSingleRequest* request, ::grep11::SignSingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSignSingle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::SignSingleRequest,::grep11::SignSingleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VerifySingle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VerifySingle() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::VerifySingleRequest, ::grep11::VerifySingleResponse>(std::bind(&WithStreamedUnaryMethod_VerifySingle<BaseClass>::StreamedVerifySingle, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VerifySingle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VerifySingle(::grpc::ServerContext* context, const ::grep11::VerifySingleRequest* request, ::grep11::VerifySingleResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerifySingle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::VerifySingleRequest,::grep11::VerifySingleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GenerateKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GenerateKey() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::GenerateKeyRequest, ::grep11::GenerateKeyResponse>(std::bind(&WithStreamedUnaryMethod_GenerateKey<BaseClass>::StreamedGenerateKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GenerateKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateKey(::grpc::ServerContext* context, const ::grep11::GenerateKeyRequest* request, ::grep11::GenerateKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGenerateKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::GenerateKeyRequest,::grep11::GenerateKeyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GenerateKeyPair : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GenerateKeyPair() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::GenerateKeyPairRequest, ::grep11::GenerateKeyPairResponse>(std::bind(&WithStreamedUnaryMethod_GenerateKeyPair<BaseClass>::StreamedGenerateKeyPair, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GenerateKeyPair() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenerateKeyPair(::grpc::ServerContext* context, const ::grep11::GenerateKeyPairRequest* request, ::grep11::GenerateKeyPairResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGenerateKeyPair(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::GenerateKeyPairRequest,::grep11::GenerateKeyPairResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WrapKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_WrapKey() {
      ::grpc::Service::MarkMethodStreamed(29,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::WrapKeyRequest, ::grep11::WrapKeyResponse>(std::bind(&WithStreamedUnaryMethod_WrapKey<BaseClass>::StreamedWrapKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_WrapKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WrapKey(::grpc::ServerContext* context, const ::grep11::WrapKeyRequest* request, ::grep11::WrapKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWrapKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::WrapKeyRequest,::grep11::WrapKeyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnwrapKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UnwrapKey() {
      ::grpc::Service::MarkMethodStreamed(30,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::UnwrapKeyRequest, ::grep11::UnwrapKeyResponse>(std::bind(&WithStreamedUnaryMethod_UnwrapKey<BaseClass>::StreamedUnwrapKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UnwrapKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnwrapKey(::grpc::ServerContext* context, const ::grep11::UnwrapKeyRequest* request, ::grep11::UnwrapKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnwrapKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::UnwrapKeyRequest,::grep11::UnwrapKeyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeriveKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeriveKey() {
      ::grpc::Service::MarkMethodStreamed(31,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::DeriveKeyRequest, ::grep11::DeriveKeyResponse>(std::bind(&WithStreamedUnaryMethod_DeriveKey<BaseClass>::StreamedDeriveKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeriveKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeriveKey(::grpc::ServerContext* context, const ::grep11::DeriveKeyRequest* request, ::grep11::DeriveKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeriveKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::DeriveKeyRequest,::grep11::DeriveKeyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMechanismList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetMechanismList() {
      ::grpc::Service::MarkMethodStreamed(32,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::GetMechanismListRequest, ::grep11::GetMechanismListResponse>(std::bind(&WithStreamedUnaryMethod_GetMechanismList<BaseClass>::StreamedGetMechanismList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetMechanismList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMechanismList(::grpc::ServerContext* context, const ::grep11::GetMechanismListRequest* request, ::grep11::GetMechanismListResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMechanismList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::GetMechanismListRequest,::grep11::GetMechanismListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMechanismInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetMechanismInfo() {
      ::grpc::Service::MarkMethodStreamed(33,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::GetMechanismInfoRequest, ::grep11::GetMechanismInfoResponse>(std::bind(&WithStreamedUnaryMethod_GetMechanismInfo<BaseClass>::StreamedGetMechanismInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetMechanismInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMechanismInfo(::grpc::ServerContext* context, const ::grep11::GetMechanismInfoRequest* request, ::grep11::GetMechanismInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMechanismInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::GetMechanismInfoRequest,::grep11::GetMechanismInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAttributeValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAttributeValue() {
      ::grpc::Service::MarkMethodStreamed(34,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::GetAttributeValueRequest, ::grep11::GetAttributeValueResponse>(std::bind(&WithStreamedUnaryMethod_GetAttributeValue<BaseClass>::StreamedGetAttributeValue, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAttributeValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAttributeValue(::grpc::ServerContext* context, const ::grep11::GetAttributeValueRequest* request, ::grep11::GetAttributeValueResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAttributeValue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::GetAttributeValueRequest,::grep11::GetAttributeValueResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAttributeValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SetAttributeValue() {
      ::grpc::Service::MarkMethodStreamed(35,
        new ::grpc::internal::StreamedUnaryHandler< ::grep11::SetAttributeValueRequest, ::grep11::SetAttributeValueResponse>(std::bind(&WithStreamedUnaryMethod_SetAttributeValue<BaseClass>::StreamedSetAttributeValue, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetAttributeValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAttributeValue(::grpc::ServerContext* context, const ::grep11::SetAttributeValueRequest* request, ::grep11::SetAttributeValueResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAttributeValue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::grep11::SetAttributeValueRequest,::grep11::SetAttributeValueResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GenerateRandom<WithStreamedUnaryMethod_DigestInit<WithStreamedUnaryMethod_Digest<WithStreamedUnaryMethod_DigestUpdate<WithStreamedUnaryMethod_DigestKey<WithStreamedUnaryMethod_DigestFinal<WithStreamedUnaryMethod_DigestSingle<WithStreamedUnaryMethod_EncryptInit<WithStreamedUnaryMethod_DecryptInit<WithStreamedUnaryMethod_EncryptUpdate<WithStreamedUnaryMethod_DecryptUpdate<WithStreamedUnaryMethod_Encrypt<WithStreamedUnaryMethod_Decrypt<WithStreamedUnaryMethod_EncryptFinal<WithStreamedUnaryMethod_DecryptFinal<WithStreamedUnaryMethod_EncryptSingle<WithStreamedUnaryMethod_DecryptSingle<WithStreamedUnaryMethod_SignInit<WithStreamedUnaryMethod_VerifyInit<WithStreamedUnaryMethod_SignUpdate<WithStreamedUnaryMethod_VerifyUpdate<WithStreamedUnaryMethod_SignFinal<WithStreamedUnaryMethod_VerifyFinal<WithStreamedUnaryMethod_Sign<WithStreamedUnaryMethod_Verify<WithStreamedUnaryMethod_SignSingle<WithStreamedUnaryMethod_VerifySingle<WithStreamedUnaryMethod_GenerateKey<WithStreamedUnaryMethod_GenerateKeyPair<WithStreamedUnaryMethod_WrapKey<WithStreamedUnaryMethod_UnwrapKey<WithStreamedUnaryMethod_DeriveKey<WithStreamedUnaryMethod_GetMechanismList<WithStreamedUnaryMethod_GetMechanismInfo<WithStreamedUnaryMethod_GetAttributeValue<WithStreamedUnaryMethod_SetAttributeValue<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GenerateRandom<WithStreamedUnaryMethod_DigestInit<WithStreamedUnaryMethod_Digest<WithStreamedUnaryMethod_DigestUpdate<WithStreamedUnaryMethod_DigestKey<WithStreamedUnaryMethod_DigestFinal<WithStreamedUnaryMethod_DigestSingle<WithStreamedUnaryMethod_EncryptInit<WithStreamedUnaryMethod_DecryptInit<WithStreamedUnaryMethod_EncryptUpdate<WithStreamedUnaryMethod_DecryptUpdate<WithStreamedUnaryMethod_Encrypt<WithStreamedUnaryMethod_Decrypt<WithStreamedUnaryMethod_EncryptFinal<WithStreamedUnaryMethod_DecryptFinal<WithStreamedUnaryMethod_EncryptSingle<WithStreamedUnaryMethod_DecryptSingle<WithStreamedUnaryMethod_SignInit<WithStreamedUnaryMethod_VerifyInit<WithStreamedUnaryMethod_SignUpdate<WithStreamedUnaryMethod_VerifyUpdate<WithStreamedUnaryMethod_SignFinal<WithStreamedUnaryMethod_VerifyFinal<WithStreamedUnaryMethod_Sign<WithStreamedUnaryMethod_Verify<WithStreamedUnaryMethod_SignSingle<WithStreamedUnaryMethod_VerifySingle<WithStreamedUnaryMethod_GenerateKey<WithStreamedUnaryMethod_GenerateKeyPair<WithStreamedUnaryMethod_WrapKey<WithStreamedUnaryMethod_UnwrapKey<WithStreamedUnaryMethod_DeriveKey<WithStreamedUnaryMethod_GetMechanismList<WithStreamedUnaryMethod_GetMechanismInfo<WithStreamedUnaryMethod_GetAttributeValue<WithStreamedUnaryMethod_SetAttributeValue<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};
// See https://www-03.ibm.com/security/cryptocards/pciecc/pdf/ep11-structure.pdf for
// further documentation

}  // namespace grep11


#endif  // GRPC_server_2eproto__INCLUDED
